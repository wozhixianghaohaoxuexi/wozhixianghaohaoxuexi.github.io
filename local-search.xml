<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>gulp基本使用（版本3.9.1）</title>
    <link href="/2022/01/06/gulp%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%EF%BC%88%E7%89%88%E6%9C%AC3-9-1%EF%BC%89/"/>
    <url>/2022/01/06/gulp%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%EF%BC%88%E7%89%88%E6%9C%AC3-9-1%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><strong>以3.9.1版本为例，4.x版本使用参照官方文档。3.9.1不支持ES6</strong></p><h3 id="一、入门介绍"><a href="#一、入门介绍" class="headerlink" title="一、入门介绍"></a>一、入门介绍</h3><ul><li><p>gulp介绍</p><ul><li>gulp是与grunt功能类似的前端项目构建工具，也是基于nodejs的自动任务运行器</li><li>能自动化地完成javascript/coffee/sass/less/html/img/css等文件的合并、压缩、检查、监听文件变化、浏览器自动刷新、测试等任务</li><li>gulp相对于grunt更高效（异步多任务），更易于使用，插件高质量</li></ul></li><li><p>gulp特点：任务化、基于流（I/O数据流）、异步/同步</p></li></ul><p>使用：</p><ul><li><p>安装nodejs，查看版本：node -v</p></li><li><p>创建一个简单应用gulp_test<br><img src="https://gitee.com/huqian025/my-images/raw/master/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/gulp%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/gulp_test%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="gulp_test目录结构"></p></li><li><p>安装gulp：</p><ul><li>全局安装gulp：<code>npm install gulp -g</code></li><li>局部安装gulp：<code>npm install gulp --save-dev</code></li></ul></li><li><p>配置：gulpfile.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入gulp模块</span><br><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>);<br><span class="hljs-comment">// 注册任务，注册任务后可以通过 `gulp 任务名` 执行任务</span><br>gulp.task(<span class="hljs-string">&#x27;任务名&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 配置任务操作</span><br>&#125;)<br><span class="hljs-comment">// 注册默认任务，可以将多个任务放在数组中，通过 `gulp` 执行多个任务</span><br>gulp.task(<span class="hljs-string">&#x27;default&#x27;</span>, [<span class="hljs-string">&#x27;任务名&#x27;</span>])<br></code></pre></td></tr></table></figure></li></ul><h3 id="二、任务构建"><a href="#二、任务构建" class="headerlink" title="二、任务构建"></a>二、任务构建</h3><h4 id="1、构建js任务（gulp-uglify）"><a href="#1、构建js任务（gulp-uglify）" class="headerlink" title="1、构建js任务（gulp-uglify）"></a>1、构建js任务（gulp-uglify）</h4><ul><li>下载插件：<code>npm install gulp-concat gulp-uglify gulp-rename --save-dev</code></li><li>配置编码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入gulp模块</span><br><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>);<br><span class="hljs-comment">// 引入gulp插件，需要先npm安装，它们都是一个方法，直接在名称后面加括号进行调用，不用通过gulp对象调用</span><br><span class="hljs-keyword">var</span> concat = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-concat&#x27;</span>);<br><span class="hljs-keyword">var</span> uglify = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-uglify&#x27;</span>);<br><span class="hljs-keyword">var</span> rename = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-rename&#x27;</span>);<br><span class="hljs-comment">// 注册合并压缩js的任务</span><br>gulp.task(<span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;src/js/*.js&#x27;</span>) <span class="hljs-comment">// 找到目标源文件，将数据读取到gulp内存中</span><br>        .pipe(concat(<span class="hljs-string">&#x27;build.js&#x27;</span>)) <span class="hljs-comment">// 合并文件</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/js/&#x27;</span>)) <span class="hljs-comment">// 临时输出文件到本地</span><br>        .pipe(uglify()) <span class="hljs-comment">// 压缩文件</span><br>        .pipe(rename(&#123;<span class="hljs-attr">suffix</span>: <span class="hljs-string">&#x27;.min&#x27;</span>&#125;)) <span class="hljs-comment">// 重命名，也可以不用对象直接写文件名</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/js/&#x27;</span>))<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h4 id="2、构建less任务（gulp-less）"><a href="#2、构建less任务（gulp-less）" class="headerlink" title="2、构建less任务（gulp-less）"></a>2、构建less任务（gulp-less）</h4><ul><li>下载插件：<code>npm install gulp-less --save-dev</code></li><li>配置编码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> less = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-less&#x27;</span>)<br><br><span class="hljs-comment">// 注册转换less的任务</span><br>gulp.task(<span class="hljs-string">&#x27;less&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;src/less/*.less&#x27;</span>)<br>        .pipe(less()) <span class="hljs-comment">// 编译less文件为css文件</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;src/css/&#x27;</span>)) <span class="hljs-comment">// 文件名不重复可以不用重命名</span><br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h4 id="3、构建css任务（gulp-clean-css）"><a href="#3、构建css任务（gulp-clean-css）" class="headerlink" title="3、构建css任务（gulp-clean-css）"></a>3、构建css任务（gulp-clean-css）</h4><ul><li>下载插件：<code>npm installl gulp-clean-css --save-dev</code></li><li>配置编码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> cleanCss = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-clean-css&#x27;</span>)<br><br><span class="hljs-comment">// 注册合并压缩css文件</span><br>gulp.task(<span class="hljs-string">&#x27;css&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;src/css/*.css&#x27;</span>)<br>        .pipe(concat(<span class="hljs-string">&#x27;build.css&#x27;</span>))<br>        .pipe(rename(&#123;<span class="hljs-attr">suffix</span>: <span class="hljs-string">&#x27;.min&#x27;</span>&#125;))<br>        .pipe(cleanCss(&#123;<span class="hljs-attr">compatibility</span>: <span class="hljs-string">&#x27;ie8&#x27;</span>&#125;)) <span class="hljs-comment">// 兼容到ie8</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/css/&#x27;</span>))<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h4 id="4、构建压缩html任务（gulp-htmlmin）"><a href="#4、构建压缩html任务（gulp-htmlmin）" class="headerlink" title="4、构建压缩html任务（gulp-htmlmin）"></a>4、构建压缩html任务（gulp-htmlmin）</h4><ul><li>下载插件：<code>npm install gulp-htmlmin --save-dev</code></li><li>配置编码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> htmlmin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-htmlmin&#x27;</span>)<br><br><span class="hljs-comment">// 注册压缩html任务</span><br>gulp.task(<span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br>        .pipe(htmlmin(&#123;<span class="hljs-attr">collapseWhitespace</span>: <span class="hljs-literal">true</span>&#125;)) <span class="hljs-comment">// 清除空格</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/&#x27;</span>)) <span class="hljs-comment">// 注意html中引入css和js路径变化，以前是引入src下的</span><br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h4 id="5、执行任务异步-同步，任务之间依赖"><a href="#5、执行任务异步-同步，任务之间依赖" class="headerlink" title="5、执行任务异步/同步，任务之间依赖"></a>5、执行任务异步/同步，任务之间依赖</h4><ul><li><p>使用默认任务执行多个任务：在注册任务时，不使用return多个任务是同步执行的，使用return是异步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 注册默认任务</span><br>gulp.task(<span class="hljs-string">&#x27;default&#x27;</span>, [<span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-string">&#x27;less&#x27;</span>, <span class="hljs-string">&#x27;css&#x27;</span>]) <span class="hljs-comment">// 直接通过 `gulp` 命名执行js、less、css三个任务</span><br></code></pre></td></tr></table></figure></li><li><p>任务之间的依赖，例如：less和css异步执行，css任务要在less任务执行完成后，再执行</p></li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/gulp%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E4%BB%BB%E5%8A%A1%E4%B9%8B%E9%97%B4%E4%BE%9D%E8%B5%96.png" alt="任务依赖"></p><h3 id="三、自动刷新"><a href="#三、自动刷新" class="headerlink" title="三、自动刷新"></a>三、自动刷新</h3><h4 id="1、半自动（仅改动时，自动调用相应任务gulp-livereload）"><a href="#1、半自动（仅改动时，自动调用相应任务gulp-livereload）" class="headerlink" title="1、半自动（仅改动时，自动调用相应任务gulp-livereload）"></a>1、半自动（仅改动时，自动调用相应任务gulp-livereload）</h4><ul><li>下载插件：<code>npm install gulp-livereload --save-dev</code></li><li>配置编码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> livereload = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-livereload&#x27;</span>)<br><br><span class="hljs-comment">// 注册监视任务（半自动）</span><br>gulp.task(<span class="hljs-string">&#x27;watch&#x27;</span>, [<span class="hljs-string">&#x27;default&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 开启监听</span><br>    livereload.listen();<br>    <span class="hljs-comment">// 确认监听的目标以及绑定相应的任务</span><br>    gulp.watch(<span class="hljs-string">&#x27;src/js/*.js&#x27;</span>, [<span class="hljs-string">&#x27;js&#x27;</span>]); <span class="hljs-comment">// 监听js文件的变化，变化时启动js任务</span><br>    gulp.watch([<span class="hljs-string">&#x27;src/css/*.css&#x27;</span>, <span class="hljs-string">&#x27;src/less/*.less&#x27;</span>], [<span class="hljs-string">&#x27;css&#x27;</span>]);<br>&#125;)<br><br><span class="hljs-comment">// 在每个任务后添加.pipe(livereload())，以js任务为例</span><br>gulp.task(<span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;src/js/*.js&#x27;</span>) <span class="hljs-comment">// 找到目标源文件，将数据读取到gulp内存中</span><br>        .pipe(concat(<span class="hljs-string">&#x27;build.js&#x27;</span>)) <span class="hljs-comment">// 合并文件</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/js/&#x27;</span>)) <span class="hljs-comment">// 临时输出文件到本地</span><br>        .pipe(uglify()) <span class="hljs-comment">// 压缩文件</span><br>        .pipe(rename(&#123;<span class="hljs-attr">suffix</span>: <span class="hljs-string">&#x27;.min&#x27;</span>&#125;)) <span class="hljs-comment">// 重命名，也可以不用对象直接写文件名</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/js/&#x27;</span>))<br>        .pipe(livereload()) <span class="hljs-comment">// 实时刷新</span><br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h4 id="2、全自动（自动刷新gulp-connect，自动打开链接open）"><a href="#2、全自动（自动刷新gulp-connect，自动打开链接open）" class="headerlink" title="2、全自动（自动刷新gulp-connect，自动打开链接open）"></a>2、全自动（自动刷新gulp-connect，自动打开链接open）</h4><h5 id="2-1、页面自动刷新，不用f5"><a href="#2-1、页面自动刷新，不用f5" class="headerlink" title="2.1、页面自动刷新，不用f5"></a>2.1、页面自动刷新，不用f5</h5><ul><li>下载插件：<code>npm install gulp-connect --save-dev</code></li><li>编码配置：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> connect = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-connect&#x27;</span>)<br><br><span class="hljs-comment">// 注册监视任务（全自动），跟半自动没有任何关系</span><br>gulp.task(<span class="hljs-string">&#x27;server&#x27;</span>, [<span class="hljs-string">&#x27;default&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 配置服务器的选项</span><br>    connect.server(&#123;<br>        <span class="hljs-attr">root</span>: <span class="hljs-string">&#x27;dist/&#x27;</span>,<br>        <span class="hljs-attr">livereload</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 实时刷新</span><br>        <span class="hljs-attr">port</span>: <span class="hljs-number">5000</span><br>    &#125;)<br>    <span class="hljs-comment">// 确认监听的目标以及绑定相应的任务</span><br>    gulp.watch(<span class="hljs-string">&#x27;src/js/*.js&#x27;</span>, [<span class="hljs-string">&#x27;js&#x27;</span>]); <span class="hljs-comment">// 监听js文件的变化，变化时启动js任务</span><br>    gulp.watch([<span class="hljs-string">&#x27;src/css/*.css&#x27;</span>, <span class="hljs-string">&#x27;src/less/*.less&#x27;</span>], [<span class="hljs-string">&#x27;css&#x27;</span>]);<br>&#125;)<br><br><span class="hljs-comment">// 在每个任务后添加.pipe(connect.reload())，以js任务为例</span><br>gulp.task(<span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;src/js/*.js&#x27;</span>) <span class="hljs-comment">// 找到目标源文件，将数据读取到gulp内存中</span><br>        .pipe(concat(<span class="hljs-string">&#x27;build.js&#x27;</span>)) <span class="hljs-comment">// 合并文件</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/js/&#x27;</span>)) <span class="hljs-comment">// 临时输出文件到本地</span><br>        .pipe(uglify()) <span class="hljs-comment">// 压缩文件</span><br>        .pipe(rename(&#123;<span class="hljs-attr">suffix</span>: <span class="hljs-string">&#x27;.min&#x27;</span>&#125;)) <span class="hljs-comment">// 重命名，也可以不用对象直接写文件名</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/js/&#x27;</span>))<br>        .pipe(connect.reload()) <span class="hljs-comment">// 实时刷新</span><br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h5 id="2-2、链接自动打开，不用手动输入地址"><a href="#2-2、链接自动打开，不用手动输入地址" class="headerlink" title="2.2、链接自动打开，不用手动输入地址"></a>2.2、链接自动打开，不用手动输入地址</h5><ul><li>下载插件：<code>npm install open --save-dev</code></li><li>编码配置：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> open = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;open&#x27;</span>)<br><br><span class="hljs-comment">// 注册监视任务（全自动），跟半自动没有任何关系</span><br>gulp.task(<span class="hljs-string">&#x27;server&#x27;</span>, [<span class="hljs-string">&#x27;default&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 配置服务器的选项</span><br>    connect.server(&#123;<br>        <span class="hljs-attr">root</span>: <span class="hljs-string">&#x27;dist/&#x27;</span>,<br>        <span class="hljs-attr">livereload</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 实时刷新</span><br>        <span class="hljs-attr">port</span>: <span class="hljs-number">5000</span><br>    &#125;)<br>    <br>    <span class="hljs-comment">// open可以自动打开指定的链接</span><br>    open(<span class="hljs-string">&#x27;http://localhost:5000/&#x27;</span>);<br>    <br>    <span class="hljs-comment">// 确认监听的目标以及绑定相应的任务</span><br>    gulp.watch(<span class="hljs-string">&#x27;src/js/*.js&#x27;</span>, [<span class="hljs-string">&#x27;js&#x27;</span>]); <span class="hljs-comment">// 监听js文件的变化，变化时启动js任务</span><br>    gulp.watch([<span class="hljs-string">&#x27;src/css/*.css&#x27;</span>, <span class="hljs-string">&#x27;src/less/*.less&#x27;</span>], [<span class="hljs-string">&#x27;css&#x27;</span>]);<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h3 id="四、扩展插件"><a href="#四、扩展插件" class="headerlink" title="四、扩展插件"></a>四、扩展插件</h3><h4 id="1、gulp-load-plugins（打包基于gulp的所有插件，不用一个个单独引入）"><a href="#1、gulp-load-plugins（打包基于gulp的所有插件，不用一个个单独引入）" class="headerlink" title="1、gulp-load-plugins（打包基于gulp的所有插件，不用一个个单独引入）"></a>1、gulp-load-plugins（打包基于gulp的所有插件，不用一个个单独引入）</h4><ul><li>下载插件：<code>npm install gulp-load-plugins --save-dev</code></li><li>配置编码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> $ = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-load-plugins&#x27;</span>)();<br><br><span class="hljs-comment">// 任务中的每个插件通过 `$.插件名`的方式引入，以js任务为例</span><br><span class="hljs-comment">// 插件名为 `gulp-`后面的部分，短横线改为驼峰。如：gulp-htmlmin插件名为htmlmin，gulp-clean-css插件名为cleanCss</span><br>gulp.task(<span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;src/js/*.js&#x27;</span>) <span class="hljs-comment">// 找到目标源文件，将数据读取到gulp内存中</span><br>        .pipe($.concat(<span class="hljs-string">&#x27;build.js&#x27;</span>)) <span class="hljs-comment">// 合并文件</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/js/&#x27;</span>)) <span class="hljs-comment">// 临时输出文件到本地</span><br>        .pipe($.uglify()) <span class="hljs-comment">// 压缩文件</span><br>        .pipe($.rename(&#123;<span class="hljs-attr">suffix</span>: <span class="hljs-string">&#x27;.min&#x27;</span>&#125;)) <span class="hljs-comment">// 重命名，也可以不用对象直接写文件名</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/js/&#x27;</span>))<br>        .pipe($.connect.reload()) <span class="hljs-comment">// 实时刷新</span><br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h3 id="五、4-x版本使用差异（支持ES6）"><a href="#五、4-x版本使用差异（支持ES6）" class="headerlink" title="五、4.x版本使用差异（支持ES6）"></a>五、4.x版本使用差异（支持ES6）</h3><ul><li><ol><li>创建任务不在使用task()方法，而是直接写执行函数，并将其导出</li></ol></li><li><ol start="2"><li>组合任务有两种方法：series()和parallel()，允许将多个独立的任务组合为一个更大的操作。这两个方法都可以接受任意数量的任务函数或以组合的操作，并可以互相嵌套至任意深度</li></ol><ul><li>如果需要让任务按顺序执行，使用series()方法</li><li>如果希望以最大并发来运行任务，使用parallel()方法</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; series &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>);<br><br><span class="hljs-comment">// `clean` 函数并未被导出（export），因此被认为是私有任务（private task）。</span><br><span class="hljs-comment">// 它仍然可以被用在 `series()` 组合中。 </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clean</span>(<span class="hljs-params">cb</span>) </span>&#123; <br>    <span class="hljs-comment">// body omitted </span><br>    cb(); <br>&#125; <br><span class="hljs-comment">// `build` 函数被导出（export）了，因此它是一个公开任务（public task），并且可以被 `gulp` 命令直接调用。</span><br><span class="hljs-comment">// 它也仍然可以被用在 `series()` 组合中。 </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build</span>(<span class="hljs-params">cb</span>) </span>&#123;<br>    <span class="hljs-comment">// body omitted </span><br>    cb();<br>&#125;<br><br><span class="hljs-built_in">exports</span>.build = build; <br><span class="hljs-built_in">exports</span>.default = series(clean, build);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>打包工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>glup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack性能优化</title>
    <link href="/2022/01/06/webpack%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2022/01/06/webpack%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="一、开发环境性能优化"><a href="#一、开发环境性能优化" class="headerlink" title="一、开发环境性能优化"></a>一、开发环境性能优化</h3><h4 id="1、优化打包构建速度"><a href="#1、优化打包构建速度" class="headerlink" title="1、优化打包构建速度"></a>1、优化打包构建速度</h4><h5 id="1-1、HMR"><a href="#1-1、HMR" class="headerlink" title="1.1、HMR"></a>1.1、HMR</h5><p>HMR：hot module replacement 热模块替换 / 模块热替换。</p><ul><li>作用：一个模块发生变化，只会重新打包这一模块，而不是重新打包所有模块，极大提升构建速度。<ul><li>样式文件：可以使用 HMR 功能，因为style-loader内部实现了。</li><li>js文件：默认不能使用 HMR 功能 -&gt; 需要修改js代码，添加支持 HMR 功能的代码。<ul><li>注意：HMR 功能对 js 的处理，只能处理非入口 js 文件的其他文件。</li></ul></li><li>html文件：默认不能使用 HMR 功能，同时会导致问题： html文件不能热更新了（修改后不会重新编译，刷新浏览器）。<ul><li>解决：修改entry入口，将html文件引入。</li><li>由于html文件只有一个，因此不用做 HMR 功能。</li></ul></li></ul></li></ul><h5 id="1-2、source-map"><a href="#1-2、source-map" class="headerlink" title="1.2、source-map"></a>1.2、source-map</h5><p>source-map：一种提供源代码到构建后代码映射的技术（如果构建后代码出错了，通过映射可以追踪源代码错误）</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 直接在 webpack.config.js 中添加 devtool 即可开启source-map</span><br><span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;source-map&#x27;</span><br></code></pre></td></tr></table></figure><p>devtool 取值为 <code>[ inline- | hidden- | eval- ] [ nosources- ] [ cheap- [ module- ] ] source-map</code></p><hr><ul><li>内联和外部的区别：<ul><li>1、外部生成了文件，内联没有</li><li>2、内联构建速度更快    </li></ul></li></ul><hr><ul><li>source-map：外部<ul><li>错误代码准确信息 和 源代码的错误位置</li></ul></li><li>inline-source-map：内联<ul><li>只生成一个内联source-map</li><li>错误代码准确信息 和 源代码的错误位置</li></ul></li><li>hidden-source-map：外部<ul><li>错误代码的错误原因，但是没有源代码错误位置，只能提示到构建后代码的错误位置</li></ul></li><li>eval-source-map：内联<ul><li>每一个文件都生成对应的source-map，都在eval</li><li>错误代码准确信息 和 源代码的错误位置</li></ul></li><li>nosources-source-map：外部<ul><li>错误代码的错误信息，但没有任何源代码信息</li></ul></li><li>cheap-source-map：外部<ul><li>错误代码准确信息 和 源代码的错误位置</li><li>只能精确到行（当错误代码与正确代码在同一行时，整行标志整行，包含正确代码）</li></ul></li><li>cheap-module-source-map：外部<ul><li>错误代码准确信息 和 源代码的错误位置</li><li>module会将 loader 的 source map 加入</li></ul></li></ul><hr><ul><li>开发环境：要求速度快，调试更友好<ul><li>速度快（eval &gt; inline &gt; cheap &gt; …）<ul><li>eval-cheap-source-map</li><li>eval-source-map</li></ul></li><li>调试更友好<ul><li>source-map</li><li>cheap-module-source-map</li><li>cheap-source-map</li></ul></li><li>–&gt; eval-source-map / eval-cheap-module-source-map</li></ul></li><li>生产环境：源代码是否隐藏？调试是否要友好？<ul><li>内联会让代码体积变大，所以生产环境不用内联</li><li>nosources-source-map 源代码和构建后代码全部隐藏</li><li>hidden-source-map 只隐藏源代码，会提示构建后代码错误信息</li><li>–&gt; source-map / cheap-module-source-map</li></ul></li></ul><h5 id="1-3、oneOf"><a href="#1-3、oneOf" class="headerlink" title="1.3、oneOf"></a>1.3、oneOf</h5><h5 id="1-4、缓存"><a href="#1-4、缓存" class="headerlink" title="1.4、缓存"></a>1.4、缓存</h5><ul><li>babel缓存（让第二次打包构建速度更快）<ul><li>cacheDirectory: true</li></ul></li><li>文件资源缓存（让代码上线运行缓存，加快相应速度）<ul><li>hash：每次 webpack 构建时会生成一个唯一的 hash 值。<ul><li>问题：因为 js 和 css 同时使用一个 hash 值，如果重新打包，会导致所有缓存失效。（可能只改动一个文件）</li></ul></li><li>chunkhash：根据 chunk 生成的 hash 值。如果打包来源于同一个 chunk，那么 hash 值就一样。<ul><li>问题：js 和 css 的 hash 值还是一样的，因为 css 是在 js 中被引入的，所以同属于一个chunk</li></ul></li><li>contenthash：根据文件的内容生成 hash 值，不同文件 hash 值一定不一样 </li></ul></li></ul><h5 id="1-5、tree-shaking"><a href="#1-5、tree-shaking" class="headerlink" title="1.5、tree shaking"></a>1.5、tree shaking</h5><p>tree shaking：去除应用程序中没有使用的代码，让代码体积更小</p><ul><li>前提：1、必须使用 ES6 模块化    2、开启 production 环境</li><li>作用：减少代码体积</li></ul><hr><ul><li>可能由于 webpack 版本问题，将 css 等文件去除，在 package.json 中配置 “sideEffects”: false 模拟：<ul><li>“sideEffects”: false 所有代码都没有副作用（都可以进行tree shaking）</li><li>问题：可能会把 css / @babel/polyfill 等（副作用）文件去除 </li><li>解决：”sideEffects”: [“*.css”, “*.less”]，最好添加该配置，否则可能因为 webpack 版本问题去除 css 等文件</li></ul></li></ul><h5 id="1-6、code-split"><a href="#1-6、code-split" class="headerlink" title="1.6、code split"></a>1.6、code split</h5><p>code split：将打包生成的一个文件分割为多个文件</p><ul><li>方案一：单入口 / 多入口文件，每个入口打包成一个文件</li><li>方案二：webpack.config.js 配置中添加 optimization（一般都是单入口文件，该方案使用较少）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1、可以将node_modules中代码单独打包一个chunk最终输出</span><br><span class="hljs-comment">// 2、自动分析多入口chunk中，有没有公共的文件。如果有，会打包成一个单独chunk</span><br><span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">splitChunks</span>: &#123;<br>        <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;all&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>方案三：单入口，配置中添加 optimization，并通过js代码，让某个文件被单独打包成一个chunk</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// import动态导入语法，能让某个文件单独打包</span><br><span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &#x27;test&#x27; */</span><span class="hljs-string">&#x27;.test&#x27;</span>)<br>    .then(<span class="hljs-function">(<span class="hljs-params">&#123; mul, count&#125;</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 文件加载成功</span><br>        <span class="hljs-built_in">console</span>.log(mul(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>));<br>    &#125;)<br>    .catch(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// 文件加载失败</span><br>    &#125;);<br></code></pre></td></tr></table></figure><h5 id="1-7、懒加载和预加载"><a href="#1-7、懒加载和预加载" class="headerlink" title="1.7、懒加载和预加载"></a>1.7、懒加载和预加载</h5><ul><li>懒加载：当文件需要使用时才加载</li><li>预加载 prefetch（会有兼容性问题）：会在使用之前，提前加载js文件</li><li>正常加载可以认为是并行加载（同一时间加载多个文件），而预加载是等其他资源加载完毕，浏览器空闲了，再偷偷加载资源</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;btn&#x27;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 点击时，动态引入为懒加载，设置 webpackPrefetch: true 为预加载</span><br>    <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &#x27;test&#x27;, webpackPrefetch: true */</span><span class="hljs-string">&#x27;./test&#x27;</span>)<br>        .then(<span class="hljs-function">(<span class="hljs-params">&#123; mul &#125;</span>) =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(mul(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>));<br>        &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="1-8、PWA"><a href="#1-8、PWA" class="headerlink" title="1.8、PWA"></a>1.8、PWA</h5><p>PWA：渐进式网络开发应用程序（离线可访问）。webpack中使用workbox-webpack-plugin插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在webpack中使用workbox-webpack-plugin插件</span><br><span class="hljs-keyword">const</span> WorkboxWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;workbox-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> WorkboxWebpackPlugin.GenerateSW(&#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">                1、帮助 serviceworker 快速启动</span><br><span class="hljs-comment">                2、删除旧的 serviceworker</span><br><span class="hljs-comment">                </span><br><span class="hljs-comment">                打包时会自动生成一个 serviceworker 配置文件</span><br><span class="hljs-comment">            */</span><br>            <span class="hljs-attr">clientsClain</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">skipWaiting</span>: <span class="hljs-literal">true</span><br>        &#125;)<br>    ]<br>&#125;<br><br><span class="hljs-comment">// 在入口文件中注册 serviceworker</span><br><span class="hljs-comment">// 注册 serviceworker，并处理兼容性问题</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    注意： </span><br><span class="hljs-comment">    1、eslint不认识 window、navigator 全局变量</span><br><span class="hljs-comment">        解决：需要修改 package.json 中 eslintConfig 配置</span><br><span class="hljs-comment">        &quot;env&quot;: &#123;</span><br><span class="hljs-comment">            // 支持浏览器端全局变量</span><br><span class="hljs-comment">            &quot;browser&quot;: true</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    2、sw代码必须运行在服务器上</span><br><span class="hljs-comment">        --&gt; 快速创建服务器库 serve</span><br><span class="hljs-comment">            npm i serve -g</span><br><span class="hljs-comment">            serve -s build 启动服务器，将build目录下所有资源作为静态资源暴露出去    </span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;serviceWorker&#x27;</span> <span class="hljs-keyword">in</span> navigator) &#123;<br>    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        navigator.serviceWorker<br>            .register(<span class="hljs-string">&#x27;/service-worker.js&#x27;</span>)<br>            .then(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sw注册成功了&#x27;</span>);<br>            &#125;)<br>            .catch(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sw注册失败了&#x27;</span>);<br>            &#125;);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-9、多进程打包"><a href="#1-9、多进程打包" class="headerlink" title="1.9、多进程打包"></a>1.9、多进程打包</h5><p>使用 thread-loader 插件</p><h5 id="1-10、externals"><a href="#1-10、externals" class="headerlink" title="1,10、externals"></a>1,10、externals</h5><h5 id="1-11、dll"><a href="#1-11、dll" class="headerlink" title="1.11、dll"></a>1.11、dll</h5><h4 id="2、优化代码调试"><a href="#2、优化代码调试" class="headerlink" title="2、优化代码调试"></a>2、优化代码调试</h4><h3 id="二、生产环境性能优化"><a href="#二、生产环境性能优化" class="headerlink" title="二、生产环境性能优化"></a>二、生产环境性能优化</h3><h4 id="1、优化打包构建速度-1"><a href="#1、优化打包构建速度-1" class="headerlink" title="1、优化打包构建速度"></a>1、优化打包构建速度</h4><h4 id="2、优化代码运行的性能"><a href="#2、优化代码运行的性能" class="headerlink" title="2、优化代码运行的性能"></a>2、优化代码运行的性能</h4>]]></content>
    
    
    <categories>
      
      <category>打包工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dos修改默认编码格式</title>
    <link href="/2022/01/06/dos%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/"/>
    <url>/2022/01/06/dos%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h4 id="1、临时修改"><a href="#1、临时修改" class="headerlink" title="1、临时修改"></a>1、临时修改</h4><ul><li><code>chcp</code> 查看当前编码，936（简体中文），65001（UTF-8）</li><li><code>chcp 65001</code> 将当前窗口的编码改为65001</li></ul><h4 id="2、永久修改"><a href="#2、永久修改" class="headerlink" title="2、永久修改"></a>2、永久修改</h4><h5 id="2-1、powershell"><a href="#2-1、powershell" class="headerlink" title="2.1、powershell"></a>2.1、powershell</h5><ol><li>打开注册表，win+R =&gt; regedit</li><li>进入HKEY_CURRENT_USER\Console%SystemRoot%_System32_WindowsPowerShell_v1.0_powershell.exe，将CodePage的十进制值修改为65001。如果没有CodePage选项，右键新建DWORD(32位)，修改十进制值为65001</li><li>重新打开powershell，输入chcp显示65001，说明修改成功<h5 id="2-2、cmd"><a href="#2-2、cmd" class="headerlink" title="2.2、cmd"></a>2.2、cmd</h5></li><li>打开注册表，win+R =&gt; regedit</li><li>进入HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Command Processor，添加一个叫autorun的字符串值，值是chcp 65001</li><li>重新打开cmd，输入chcp显示65001，说明修改成功</li></ol>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>canvas实现简易签字板</title>
    <link href="/2022/01/06/canvas%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%AD%BE%E5%AD%97%E6%9D%BF/"/>
    <url>/2022/01/06/canvas%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%AD%BE%E5%AD%97%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>最近看到有些在线文档可以进行签名，以防以后项目中会用到，提前用canvas练习一下，先看下最后实现的效果：<br><img src="https://gitee.com/huqian025/my-images/raw/master/demos/canvas%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%AD%BE%E5%AD%97%E6%9D%BF/%E7%AD%BE%E5%AD%97%E6%9D%BF%E6%95%88%E6%9E%9C.gif"></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol><li>在canva中监听鼠标按下事件（<code>mousedown</code>），获取按下时鼠标到canvas左上角的距离</li><li>以鼠标按下的点为canvas画笔的起点，监听鼠标移动事件（<code>mousemove</code>），根据鼠标移动到的位置实时绘制线条</li><li>监听鼠标弹起事件（<code>mouseup</code>），移除对mousemove事件的监听，防止鼠标弹起继续绘制</li></ol><h4 id="搭建html结构"><a href="#搭建html结构" class="headerlink" title="搭建html结构"></a>搭建html结构</h4><p>html结构比较简单，直接使用一个canvas标签，设置其背景色，宽度和高度。背景色是为了方便看效果，宽度默认300px，高度默认150px，设置宽高时不用带单位px</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>简易签名板<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: skyblue;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./canvas.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="在canvas-js中实现功能"><a href="#在canvas-js中实现功能" class="headerlink" title="在canvas.js中实现功能"></a>在canvas.js中实现功能</h4><ol><li>获取canvas对象，获取2D画笔<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#canvas&#x27;</span>)<br><span class="hljs-keyword">if</span> (canvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> ctx = canvas.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>根据鼠标移动绘制路径<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 监听鼠标按下事件</span><br>canvas.onmousedown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">mousedownEvent</span>) </span>&#123;<br>  <span class="hljs-comment">// 获取绘制起点，即鼠标点击到canvas元素左上角的距离</span><br>  <span class="hljs-keyword">const</span> startX = mousedownEvent.offsetX;<br>  <span class="hljs-keyword">const</span> startY = mousedownEvent.offsetY;<br>  ctx.beginPath();<br>  <span class="hljs-comment">// 将画笔移动到起点</span><br>  ctx.moveTo(startX, startY);<br><br>  <span class="hljs-comment">// 监听鼠标移动事件</span><br>  canvas.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">mousemoveEvent</span>) </span>&#123;<br>    <span class="hljs-comment">// 跟随鼠标移动来移动画笔</span><br>    ctx.lineTo(mousemoveEvent.offsetX, mousemoveEvent.offsetY);<br>    <span class="hljs-comment">// 实时绘制</span><br>    ctx.stroke();<br>  &#125;<br><br>  <span class="hljs-comment">// 监听鼠标弹起事件</span><br>  canvas.onmouseup = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    canvas.onmousemove = <span class="hljs-literal">null</span><br>    <span class="hljs-comment">// 闭合路径，使用之后线条起点和终点会自动连起来</span><br>    <span class="hljs-comment">// ctx.closePath();</span><br>    <span class="hljs-comment">// 鼠标弹起时再绘制</span><br>    <span class="hljs-comment">// ctx.stroke();</span><br>  &#125;<br><br>  <span class="hljs-comment">// 监听鼠标移出canvas区域事件</span><br>  canvas.onmouseout = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 鼠标移出时，停止对mousemove事件的监听，否则在移出时鼠标弹起事件监听失效</span><br>    canvas.onmousemove = <span class="hljs-literal">null</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>注意点clientX/Y和offsetX/Y</strong><br><img src="https://gitee.com/huqian025/my-images/raw/master/demos/canvas%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%AD%BE%E5%AD%97%E6%9D%BF/offsetX%E3%80%81clientX%E3%80%81screenX.png"></p><h4 id="扩展：将canvas转化为图片"><a href="#扩展：将canvas转化为图片" class="headerlink" title="扩展：将canvas转化为图片"></a>扩展：将canvas转化为图片</h4><ul><li>方法一：使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL">HTMLCanvasElement.toDataURL()</a>获取canvas图片的dataURL</li><li>方法二：使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toBlob">HTMLCanvasElement.toBlob()</a>创建Blob对象，再使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL">URL.createObjectURL()</a>获取指向该Blob对象的URL<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 按钮点击事件</span><br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 方法一</span><br>  <span class="hljs-keyword">const</span> canvasData = canvas.toDataURL()<br>  <span class="hljs-keyword">const</span> img = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;img&#x27;</span>)<br>  img.src=canvasData;<br>  body.appendChild(img)<br><br>  <span class="hljs-comment">// 方法二</span><br>  <span class="hljs-comment">// canvas.toBlob(function(blob) &#123;</span><br>  <span class="hljs-comment">//   var url = URL.createObjectURL(blob);</span><br>  <span class="hljs-comment">//   const img = document.createElement(&#x27;img&#x27;)</span><br>  <span class="hljs-comment">//   img.src=url;</span><br>  <span class="hljs-comment">//   // 图片加载成功后清除url，避免占用内存</span><br>  <span class="hljs-comment">//   img.onload = function() &#123;</span><br>  <span class="hljs-comment">//     URL.revokeObjectURL(url)</span><br>  <span class="hljs-comment">//   &#125;;</span><br>  <span class="hljs-comment">//   body.appendChild(img)</span><br>  <span class="hljs-comment">// &#125;)</span><br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/huqian025/my-images/raw/master/demos/canvas%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%AD%BE%E5%AD%97%E6%9D%BF/%E7%AD%BE%E5%AD%97%E6%9D%BF%E5%AF%BC%E5%87%BA%E4%B8%BA%E5%9B%BE%E7%89%87.gif"></li></ul>]]></content>
    
    
    <categories>
      
      <category>canvas</category>
      
    </categories>
    
    
    <tags>
      
      <tag>canvas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue计算属性computed和侦听器watch</title>
    <link href="/2022/01/06/vue%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7computed%E5%92%8C%E4%BE%A6%E5%90%AC%E5%99%A8watch/"/>
    <url>/2022/01/06/vue%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7computed%E5%92%8C%E4%BE%A6%E5%90%AC%E5%99%A8watch/</url>
    
    <content type="html"><![CDATA[<h3 id="一、计算属性computed"><a href="#一、计算属性computed" class="headerlink" title="一、计算属性computed"></a>一、计算属性computed</h3><h4 id="1、计算属性的setter和getter"><a href="#1、计算属性的setter和getter" class="headerlink" title="1、计算属性的setter和getter"></a>1、计算属性的setter和getter</h4><ul><li>每个计算属性都包含一个setter和一个getter</li><li>计算属性一般没有set方法，只读属性</li><li>计算属性在使用时作为一个属性，不用加()</li><li>注意：如果计算属性使用了箭头函数，则 this 不会指向这个组件的实例，不过仍然可以将其实例作为函数的第一个参数来访问</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-attr">data</span>: &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;,<br>    <span class="hljs-attr">computed</span>: &#123;<br>        <span class="hljs-comment">// 仅读取 </span><br>        <span class="hljs-attr">aDouble</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.a * <span class="hljs-number">2</span> <br>        &#125;, <br>        <span class="hljs-comment">// 读取和设置 </span><br>        <span class="hljs-attr">aPlus</span>: &#123; <br>            <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.a + <span class="hljs-number">1</span><br>            &#125;, <br>            <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">v</span>) </span>&#123; <br>                <span class="hljs-built_in">this</span>.a = v - <span class="hljs-number">1</span> <br>            &#125;<br>        &#125; <br>    &#125;<br>&#125;)<br>vm.aPlus <span class="hljs-comment">// =&gt; 2</span><br>vm.aPlus = <span class="hljs-number">3</span> <br>vm.a <span class="hljs-comment">// =&gt; 2 </span><br>vm.aDouble <span class="hljs-comment">// =&gt; 4</span><br></code></pre></td></tr></table></figure><h4 id="2、计算属性的缓存"><a href="#2、计算属性的缓存" class="headerlink" title="2、计算属性的缓存"></a>2、计算属性的缓存</h4><ul><li>计算属性的结果会被缓存，除非依赖的响应式 property 变化才会重新计算</li><li>注意：如果某个依赖 (比如非响应式 property) 在该实例范畴之外，则计算属性是不会被更新的</li></ul>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue常用指令</title>
    <link href="/2022/01/06/vue%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2022/01/06/vue%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="一、v-text"><a href="#一、v-text" class="headerlink" title="一、v-text"></a>一、v-text</h3><ul><li>与 Mustache比较相似：都用于将数据显示在界面中（没有Mustache灵活）</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-text.png" alt="v-text"></p><h3 id="二、v-html"><a href="#二、v-html" class="headerlink" title="二、v-html"></a>二、v-html</h3><ul><li>会将string的html解析出来并进行渲染</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-html.png" alt="v-html"></p><h3 id="三、v-show"><a href="#三、v-show" class="headerlink" title="三、v-show"></a>三、v-show</h3><ul><li>用法与v-if相似，也用于决定一个元素是否渲染</li></ul><h4 id="1、v-if和v-show对比"><a href="#1、v-if和v-show对比" class="headerlink" title="1、v-if和v-show对比"></a>1、v-if和v-show对比</h4><ul><li>v-if：当条件为false时，包含v-if指令的元素，根本就不会存在于dom中</li><li>v-show：当条件为false时，v-show只是给我们的元素添加一个行内样式 display：none</li></ul><h4 id="2、如何选择"><a href="#2、如何选择" class="headerlink" title="2、如何选择"></a>2、如何选择</h4><ul><li>需要在显示与隐藏之间频繁切换时，使用v-show</li><li>只有一次切换时，使用v-if（根据服务器传入数据决定是否渲染，大量使用）</li></ul><h3 id="四、v-if"><a href="#四、v-if" class="headerlink" title="四、v-if"></a>四、v-if</h3><ul><li>与js中if类似</li><li>Vue的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件</li><li>原理：v-if后面的条件为false时，对应的元素以及其子元素不会渲染，根本没有不会有对应的标签出现在DOM中</li></ul><h3 id="五、-v-else"><a href="#五、-v-else" class="headerlink" title="五、 v-else"></a>五、 v-else</h3><ul><li>与js中else类似</li><li>Vue的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件</li></ul><h3 id="六、v-else-if"><a href="#六、v-else-if" class="headerlink" title="六、v-else-if"></a>六、v-else-if</h3><ul><li>与js中else if类似</li><li>Vue的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件</li></ul><h3 id="七、v-for"><a href="#七、v-for" class="headerlink" title="七、v-for"></a>七、v-for</h3><h4 id="1、遍历数组"><a href="#1、遍历数组" class="headerlink" title="1、遍历数组"></a>1、遍历数组</h4><h5 id="1-1、不含索引"><a href="#1-1、不含索引" class="headerlink" title="1.1、不含索引"></a>1.1、不含索引</h5><ul><li><code>&lt;li v-for=&quot;item in names&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</code></li></ul><h5 id="1-2、含索引"><a href="#1-2、含索引" class="headerlink" title="1.2、含索引"></a>1.2、含索引</h5><ul><li><code>&lt;li v-for=&quot;(item, index) in names&quot;&gt;&#123;&#123; index+1 &#125;&#125;.&#123;&#123; item &#125;&#125;&lt;/li&gt;</code></li></ul><h4 id="2、遍历对象"><a href="#2、遍历对象" class="headerlink" title="2、遍历对象"></a>2、遍历对象</h4><h5 id="2-1、获取value"><a href="#2-1、获取value" class="headerlink" title="2.1、获取value"></a>2.1、获取value</h5><ul><li><code>&lt;li v-for=&quot;item in info&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</code></li></ul><h5 id="2-2、获取value和key"><a href="#2-2、获取value和key" class="headerlink" title="2.2、获取value和key"></a>2.2、获取value和key</h5><ul><li><code>&lt;li v-for=&quot;(value, key) in info&quot;&gt;&#123;&#123; value &#125;&#125;-&#123;&#123; key &#125;&#125;&lt;/li&gt;</code></li></ul><h5 id="2-3、获取value、key和index"><a href="#2-3、获取value、key和index" class="headerlink" title="2.3、获取value、key和index"></a>2.3、获取value、key和index</h5><ul><li><code>&lt;li v-for=&quot;(value, key, index) in info&quot;&gt;&#123;&#123; value &#125;&#125;-&#123;&#123; key &#125;&#125;-&#123;&#123; index &#125;&#125;&lt;/li&gt;</code></li></ul><h4 id="3、v-for绑定key和不绑定key的区别"><a href="#3、v-for绑定key和不绑定key的区别" class="headerlink" title="3、v-for绑定key和不绑定key的区别"></a>3、v-for绑定key和不绑定key的区别</h4><ul><li>主要在于虚拟dom的复用，绑定key可以更好的复用</li><li>不推荐使用index作为key（在最后插入输入，重新渲染最后一条，使用index没有问题。但在中间插入时，后面数据的index都会发生改变，都会重新进行渲染，与不绑定key效果一样）</li><li>有相同父元素的子元素必须有独特的key，重复的key会造成渲染错误</li><li>官方示例：<code>&lt;li v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;&#123;&#123; item.text &#125;&#125;&lt;/li&gt;</code></li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-for.png" alt="v-for"></p><h3 id="八、v-on"><a href="#八、v-on" class="headerlink" title="八、v-on"></a>八、v-on</h3><ul><li>绑定事件监听器</li><li>语法糖 @</li></ul><h4 id="1、v-on参数"><a href="#1、v-on参数" class="headerlink" title="1、v-on参数"></a>1、v-on参数</h4><h5 id="1-1、情况一（方法不需参数）"><a href="#1-1、情况一（方法不需参数）" class="headerlink" title="1.1、情况一（方法不需参数）"></a>1.1、情况一（方法不需参数）</h5><ul><li>调用方法时可以加()，也可以不加()</li></ul><h5 id="1-2、情况二（方法需要一个参数）"><a href="#1-2、情况二（方法需要一个参数）" class="headerlink" title="1.2、情况二（方法需要一个参数）"></a>1.2、情况二（方法需要一个参数）</h5><ul><li>调用方法时不加()：该形参被赋值为原生事件event</li><li>调用方法时加()：()中传入形参对应的实参。如果不传参数，形参会被赋值为undefined</li></ul><h5 id="1-3、情况三（方法需要其他参数和event）"><a href="#1-3、情况三（方法需要其他参数和event）" class="headerlink" title="1.3、情况三（方法需要其他参数和event）"></a>1.3、情况三（方法需要其他参数和event）</h5><ul><li>调用方法时不加()：第一个形参被赋值为event，其他参数为undefined</li><li>调用方法时加()：()中传入形参对应的实参。如果传入参数个数少于方法需要的参数个数（包含不传），其他形参会被赋值为undefined。可以通过$event传入event事件</li></ul><h4 id="2、修饰符"><a href="#2、修饰符" class="headerlink" title="2、修饰符"></a>2、修饰符</h4><h5 id="2-1、-stop"><a href="#2-1、-stop" class="headerlink" title="2.1、.stop"></a>2.1、.stop</h5><ul><li>调用event.stopPropagation()</li><li>停止冒泡</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-on.stop.png" alt="v-on.stop"></p><h5 id="2-2、-prevent"><a href="#2-2、-prevent" class="headerlink" title="2.2、.prevent"></a>2.2、.prevent</h5><ul><li>调用event.prevenDefault</li><li>阻止默认行为（如点击按钮表单自动提交）</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-on.prevent.png" alt="v-on.prevent"></p><h5 id="2-3、-keyCode-keyAlias"><a href="#2-3、-keyCode-keyAlias" class="headerlink" title="2.3、.{keyCode | keyAlias}"></a>2.3、.{keyCode | keyAlias}</h5><ul><li>只当事件是从特定键触发时才触发回调</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-on.keyCode.png" alt="v-on.keyCode"></p><h5 id="2-4、-once"><a href="#2-4、-once" class="headerlink" title="2.4、.once"></a>2.4、.once</h5><ul><li>只触发一次回调</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-on.once.png" alt="v-on.once"></p><h5 id="2-5、-native"><a href="#2-5、-native" class="headerlink" title="2.5、.native"></a>2.5、.native</h5><ul><li>监听组件根元素的原生事件，不限于click事件（例如：调用组件时，直接使用@click无法监听到点击事件）<ul><li><code>&lt;cpn @click=&quot;btnClick&quot;&gt;&lt;/cpn&gt; // 无法监听click</code></li><li><code>&lt;cpn @click.native=&quot;btnClick&quot;&gt;&lt;/cpn&gt; // 可以监听click</code></li></ul></li></ul><h3 id="九、v-bind"><a href="#九、v-bind" class="headerlink" title="九、v-bind"></a>九、v-bind</h3><ul><li>动态绑定数据</li><li>语法糖 :</li></ul><h4 id="1、绑定基本属性"><a href="#1、绑定基本属性" class="headerlink" title="1、绑定基本属性"></a>1、绑定基本属性</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-bind-base.png" alt="v-bind-base"></p><h4 id="2、绑定class"><a href="#2、绑定class" class="headerlink" title="2、绑定class"></a>2、绑定class</h4><h5 id="2-1、对象语法"><a href="#2-1、对象语法" class="headerlink" title="2.1、对象语法"></a>2.1、对象语法</h5><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-bind-classObj.png" alt="v-bind-classObj"></p><h5 id="2-2、数组语法（了解）"><a href="#2-2、数组语法（了解）" class="headerlink" title="2.2、数组语法（了解）"></a>2.2、数组语法（了解）</h5><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-bind-classArr.png" alt="v-bind-classArr"></p><h4 id="3、绑定style"><a href="#3、绑定style" class="headerlink" title="3、绑定style"></a>3、绑定style</h4><h5 id="3-1、对象语法"><a href="#3-1、对象语法" class="headerlink" title="3.1、对象语法"></a>3.1、对象语法</h5><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-bind-styleObj.png" alt="v-bind-styleObj"></p><h5 id="3-2、数组语法（了解）"><a href="#3-2、数组语法（了解）" class="headerlink" title="3.2、数组语法（了解）"></a>3.2、数组语法（了解）</h5><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-bind-styleArr.png" alt="v-bind-styleArr"></p><h3 id="十、v-model"><a href="#十、v-model" class="headerlink" title="十、v-model"></a>十、v-model</h3><h4 id="1、修饰符"><a href="#1、修饰符" class="headerlink" title="1、修饰符"></a>1、修饰符</h4><h5 id="1-1、lazy"><a href="#1-1、lazy" class="headerlink" title="1.1、lazy"></a>1.1、lazy</h5><ul><li>默认情况下，v-model默认是在input事件中同步输入框的数据的，也就是说，一旦有数据发生改变对应的data中的数据就会自动发生改变</li><li> lazy修饰符可以让数据在失去焦点或者回车时才会更新<br><code>&lt;input type=&quot;text&quot; v-model.lazy=&quot;message&quot;&gt;</code></li></ul><h5 id="1-2、number"><a href="#1-2、number" class="headerlink" title="1.2、number"></a>1.2、number</h5><ul><li>默认情况下，在输入框中无论我们输入的是字母还是数字，都会被当做字符串类型进行处理，但如果我们希望处理的是数字类型，那么最好直接将内容当做数字处理</li><li>number修饰符可以让输入框中输入的内容自动转成数字类型<br><code>&lt;input type=&quot;number&quot; v-model.number=&quot;age&quot;&gt;&lt;h2&gt;&#123;&#123;typeof age&#125;&#125;&lt;/h2&gt;</code></li></ul><h5 id="1-3、trim"><a href="#1-3、trim" class="headerlink" title="1.3、trim"></a>1.3、trim</h5><ul><li>如果输入的内容首尾有很多空格，通常我们希望将其去除，trim修饰符可以过滤内容左右两边的空格</li></ul><h4 id="2、v-model原理"><a href="#2、v-model原理" class="headerlink" title="2、v-model原理"></a>2、v-model原理</h4><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 等同于下面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">v-on:input</span>=<span class="hljs-string">&quot;message = $event.target.value&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3、v-model结合radio类型"><a href="#3、v-model结合radio类型" class="headerlink" title="3、v-model结合radio类型"></a>3、v-model结合radio类型</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-model%E7%BB%93%E5%90%88radio.png" alt="v-model结合radio"></p><h4 id="4、v-model结合checkbox类型"><a href="#4、v-model结合checkbox类型" class="headerlink" title="4、v-model结合checkbox类型"></a>4、v-model结合checkbox类型</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-model%E7%BB%93%E5%90%88checkbox.png" alt="v-model结合checkbox"></p><h4 id="5、v-model结合select类型"><a href="#5、v-model结合select类型" class="headerlink" title="5、v-model结合select类型"></a>5、v-model结合select类型</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-model%E7%BB%93%E5%90%88select1.png" alt="v-model结合select1"><br><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-model%E7%BB%93%E5%90%88select2.png" alt="v-model结合select2"></p><h3 id="十一、v-slot"><a href="#十一、v-slot" class="headerlink" title="十一、v-slot"></a>十一、v-slot</h3><h4 id="1、插槽类型"><a href="#1、插槽类型" class="headerlink" title="1、插槽类型"></a>1、插槽类型</h4><h5 id="1-1、匿名插槽（隐含name-“default”）"><a href="#1-1、匿名插槽（隐含name-“default”）" class="headerlink" title="1.1、匿名插槽（隐含name=“default”）"></a>1.1、匿名插槽（隐含name=“default”）</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>匿名插槽默认内容<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-2、具名插槽"><a href="#1-2、具名插槽" class="headerlink" title="1.2、具名插槽"></a>1.2、具名插槽</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-3、作用域插槽（父组件替换插槽的标签，但是内容由子组件来提供）"><a href="#1-3、作用域插槽（父组件替换插槽的标签，但是内容由子组件来提供）" class="headerlink" title="1.3、作用域插槽（父组件替换插槽的标签，但是内容由子组件来提供）"></a>1.3、作用域插槽（父组件替换插槽的标签，但是内容由子组件来提供）</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 子组件中定义插槽，name为top（插槽名），data（属性名自己取）为items（子组件中的数据） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;top&quot;</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;items&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 父组件调用子组件，子组件名以cpn为例，slotProps（名称自定义） .data（调用子组件中绑定的data自定义属性）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;top&quot;</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span>&#123;&#123; slotProps.data &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>作用域插槽示例：子组件中包括一组数据，比如：pLanguages: [‘JavaScript’, ‘Python’, ‘Swift’, ‘Go’, ‘C++’]，需要在多个界面进行展示（某些界面是以水平方向一一展示的，某些界面是以列表形式展示的）</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-slot1.png" alt="v-slot1"><br><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-slot2.png" alt="v-slot2"></p><h4 id="2、v-slot"><a href="#2、v-slot" class="headerlink" title="2、v-slot"></a>2、v-slot</h4><ul><li>在vue2.6及已上版本，slot 和slot-scope已经开始废弃， 有了新的替代: v-slot，v-slot只能用在template 上，和组件标签上</li><li>语法糖 #</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 子组件中定义插槽方式不变 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;top&quot;</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;items&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 父组件调用子组件，使用v-slot代替slot和slot-scope --&gt;</span><br><span class="hljs-comment">&lt;!-- #top为v-slot:top的简写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> #<span class="hljs-attr">top</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span>&#123;&#123; slotProps.data &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="十二、v-pre（不需要表达式）"><a href="#十二、v-pre（不需要表达式）" class="headerlink" title="十二、v-pre（不需要表达式）"></a>十二、v-pre（不需要表达式）</h3><ul><li>v-pre用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustache语法</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-pre.png" alt="v-pre"></p><h3 id="十三、-v-cloak（不需要表达式）"><a href="#十三、-v-cloak（不需要表达式）" class="headerlink" title="十三、 v-cloak（不需要表达式）"></a>十三、 v-cloak（不需要表达式）</h3><ul><li>这个指令保持在元素上直到关联实例结束编译（vue解析完成后，元素上的v-cloak属性消失）</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-cloak.png" alt="v-cloak"></p><h3 id="十四、v-once（不需要表达式）"><a href="#十四、v-once（不需要表达式）" class="headerlink" title="十四、v-once（不需要表达式）"></a>十四、v-once（不需要表达式）</h3><ul><li>元素和组件只渲染一次，不会随着数据的改变而改变</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-once.png" alt="v-once"></p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux中安装nginx</title>
    <link href="/2022/01/06/linux%E4%B8%AD%E5%AE%89%E8%A3%85nginx/"/>
    <url>/2022/01/06/linux%E4%B8%AD%E5%AE%89%E8%A3%85nginx/</url>
    
    <content type="html"><![CDATA[<h4 id="1、安装nginx依赖包"><a href="#1、安装nginx依赖包" class="headerlink" title="1、安装nginx依赖包"></a>1、安装nginx依赖包</h4><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 安装gcc-c++编译器<br>yum install gcc-c++<br>yum install -y openssl openssl-devel<br><span class="hljs-regexp">//</span> 安装pcre包<br>yum install -y pcre pcre-devel<br><span class="hljs-regexp">//</span> 安装zlib包<br>yum install -y zlib zlib-devel<br></code></pre></td></tr></table></figure><h4 id="2、下载并解压安装包"><a href="#2、下载并解压安装包" class="headerlink" title="2、下载并解压安装包"></a>2、下载并解压安装包</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 安装wget命令<br>yum -y install wget<br><span class="hljs-regexp">//</span> 新建文件夹<br>mkdir <span class="hljs-regexp">/usr/</span>local/nginx<br>cd <span class="hljs-regexp">/usr/</span>local/nginx<br><span class="hljs-regexp">//</span> 下载tar包，下载地址可在官网查看<br>wget http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/download/</span>nginx-<span class="hljs-number">1.20</span>.<span class="hljs-number">2</span>.tar.gz<br><span class="hljs-regexp">//</span> 解压<br>tar -zxvf nginx-<span class="hljs-number">1.20</span>.<span class="hljs-number">2</span>.tar.gz<br><span class="hljs-regexp">//</span> 进入解压后目录<br>cd nginx-<span class="hljs-number">1.20</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="3、安装nginx"><a href="#3、安装nginx" class="headerlink" title="3、安装nginx"></a>3、安装nginx</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 使用nginx默认配置<br>./configure<br><span class="hljs-regexp">//</span> 编译安装<br>make<br>make install<br><span class="hljs-regexp">//</span> 查找安装路径<br>whereis nginx<br><span class="hljs-regexp">//</span> 进入sbin目录，可以看到有一个可执行文件nginx，直接./nginx执行就OK了。<br>cd sbin<br>./nginx<br><span class="hljs-regexp">//</span> 查看是否启动成功<br>ps -ef | grep nginx<br></code></pre></td></tr></table></figure><h4 id="4、将nginx路径配置到系统环境变量"><a href="#4、将nginx路径配置到系统环境变量" class="headerlink" title="4、将nginx路径配置到系统环境变量"></a>4、将nginx路径配置到系统环境变量</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 编辑系统环境变量<br>vim <span class="hljs-regexp">/etc/</span>profile<br><span class="hljs-regexp">//</span> 将nginx路径添加至环境变量<br><span class="hljs-regexp">//</span> 添加路径并使用NGINX_HOME接收<br>export NGINX_HOME=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<br><span class="hljs-regexp">//</span> 将NGINX_HOME添加至环境变量PATH<br>export PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$NGINX_HOME</span><br><span class="hljs-regexp">//</span> 重新加载环境变量<br>source <span class="hljs-regexp">/etc/</span>profile<br><span class="hljs-regexp">//</span> 在root路径下使用nginx命令<br>cd /<br>nginx -h<br></code></pre></td></tr></table></figure><h4 id="5、nginx其他命令"><a href="#5、nginx其他命令" class="headerlink" title="5、nginx其他命令"></a>5、nginx其他命令</h4><p><strong>未配置环境变量，需将nginx替换为路径/usr/local/nginx/sbin/nginx</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 查看nginx帮助信息<br>nginx -h<br><span class="hljs-regexp">//</span> 查看nginx的版本号<br>nginx -v<br><span class="hljs-regexp">//</span> 显示nginx的版本号和编译信息<br>nginx -V<br><span class="hljs-regexp">//</span> 启动nginx<br>start nginx<br><span class="hljs-regexp">//</span> 快速停止和关闭nginx<br>nginx -s stop<br><span class="hljs-regexp">//</span> 正常停止或关闭nginx，完成已接收的连接请求再退出<br>nginx -s quit<br><span class="hljs-regexp">//</span> 重新加载配置文件。要所有链接都断开后，配置才会生效。<br><span class="hljs-regexp">//</span> nginx -s reload 是平滑重启，不会强制结束正在工作的连接，需要等所有连接都结束才会重启。<br>nginx -s reload<br><span class="hljs-regexp">//</span> 测试nginx配置文件的正确性<br>nginx -t<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js标识符、关键字、保留字</title>
    <link href="/2022/01/06/js%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%81%E4%BF%9D%E7%95%99%E5%AD%97/"/>
    <url>/2022/01/06/js%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%81%E4%BF%9D%E7%95%99%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h4 id="1、标识符"><a href="#1、标识符" class="headerlink" title="1、标识符"></a>1、标识符</h4><p>标识符：指开发人员为变量、属性、函数、参数取的名字。</p><p><strong>标识符可以包含字母、数字、下划线、$符号，但是不能以数字开头，并区分大小写，标识符不能是关键字或保留字。</strong></p><h4 id="2、关键字"><a href="#2、关键字" class="headerlink" title="2、关键字"></a>2、关键字</h4><p>关键字：指JS本身已经使用了的字，不能再用他们充当变量名、方法名。<br>包括： break、case、catch、class、const、continue、debugger、default、delete、do、else、export、extends、finally、for、function、if、import、in、instanceof、new、return、super、switch、this、throw、try、typeof、var、void、while、with、yield</p><h4 id="3、保留字"><a href="#3、保留字" class="headerlink" title="3、保留字"></a>3、保留字</h4><p>保留字：<strong>实际就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字</strong>，同样不能使用他们当变量名或方法名。<br>包括：enum、abstract、boolean、byte、char、double、final、float、goto、int、long、native、short、synchronized、transient、volatile<br>只在严格模式中被当成保留关键字：implements、interface、let、package、private、protected、public、static<br>只在模块代码中被当成保留关键字：await</p><p><strong>另外，直接量null、true和false同样不能被当成标识使用</strong></p><h4 id="4、标识符为关键字报错信息"><a href="#4、标识符为关键字报错信息" class="headerlink" title="4、标识符为关键字报错信息"></a>4、标识符为关键字报错信息</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/js/js%E6%A0%87%E8%AF%86%E7%AC%A6/%E5%85%B3%E9%94%AE%E5%AD%97%E6%8A%A5%E9%94%99.png" alt="标识符为关键字报错信息"></p><h4 id="5、标识符为保留字报错信息"><a href="#5、标识符为保留字报错信息" class="headerlink" title="5、标识符为保留字报错信息"></a>5、标识符为保留字报错信息</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/js/js%E6%A0%87%E8%AF%86%E7%AC%A6/%E4%BF%9D%E7%95%99%E5%AD%97%E6%8A%A5%E9%94%99.png" alt="标识符为保留字报错信息"></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar">关键字、保留字参考文档</a></p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>标识符</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js数组中的高阶函数</title>
    <link href="/2022/01/06/js%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <url>/2022/01/06/js%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="0、什么是高阶函数"><a href="#0、什么是高阶函数" class="headerlink" title="0、什么是高阶函数"></a>0、什么是高阶函数</h4><p>高阶函数英文叫Higher-order function。JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p><h4 id="1、filter函数的使用（过滤数组）"><a href="#1、filter函数的使用（过滤数组）" class="headerlink" title="1、filter函数的使用（过滤数组）"></a>1、filter函数的使用（过滤数组）</h4><blockquote><p>MDN：filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。 </p></blockquote><p>filter中的回调函数有一个要求：必须返回一个boolean值<br>true：当返回为true时，函数内部自动将这次回调的n加入到新的数组中<br>false：当返回为false时，函数内部会过滤掉这次的n</p><ul><li><p>示例：获取集合中小于100的数</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">111</span>, <span class="hljs-number">222</span>, <span class="hljs-number">333</span>]<br><span class="hljs-keyword">let</span> newNums = nums.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> n&lt;<span class="hljs-number">100</span><br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>示例：js中获取素数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_primes</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> arr.filter(<span class="hljs-function"><span class="hljs-params">num</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// 1不是素数</span><br>        <span class="hljs-keyword">if</span>(num === <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 从2开始，取到该数的平方根即可</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">2</span>; i&lt;=<span class="hljs-built_in">Math</span>.sqrt(num); i++) &#123;<br>            <span class="hljs-comment">// 如果可以整除，证明不是素数</span><br>            <span class="hljs-keyword">if</span>(num % i === <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="2、map函数的使用（对数组每个元素进行操作）"><a href="#2、map函数的使用（对数组每个元素进行操作）" class="headerlink" title="2、map函数的使用（对数组每个元素进行操作）"></a>2、map函数的使用（对数组每个元素进行操作）</h4><blockquote><p>MDN：map()方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。</p></blockquote><ul><li>示例：将新集合中的所有数*2<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> new2Nums = newNums.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> n*<span class="hljs-number">2</span><br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h4 id="3、reduce函数的使用（汇总数组的内容）"><a href="#3、reduce函数的使用（汇总数组的内容）" class="headerlink" title="3、reduce函数的使用（汇总数组的内容）"></a>3、reduce函数的使用（汇总数组的内容）</h4><blockquote><p>MDN：reduce()方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</p></blockquote><ul><li>示例：计算集合所有数据的和<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// new2Nums数组的和，preValue为上一次function的返回值，0为preValue初始值</span><br>new2Nums.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">preValue, n</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> preValue + n<br>&#125;, <span class="hljs-number">0</span>)<br><br><span class="hljs-comment">// 简化</span><br><span class="hljs-keyword">let</span> total = nums.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> n&lt;<span class="hljs-number">100</span><br>&#125;).map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> n*<span class="hljs-number">2</span><br>&#125;).reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">preValue, n</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> preValue + n<br>&#125;, <span class="hljs-number">0</span>)<br><br><span class="hljs-comment">// 进一步简化：</span><br><span class="hljs-keyword">let</span> total = nums.filter(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> n&lt;<span class="hljs-number">100</span>).map(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> n*<span class="hljs-number">2</span>).reduce(<span class="hljs-function">(<span class="hljs-params">preValue, n</span>) =&gt;</span> preValue +n)<br></code></pre></td></tr></table></figure></li></ul><h4 id="4、sort函数的使用（数组排序）"><a href="#4、sort函数的使用（数组排序）" class="headerlink" title="4、sort函数的使用（数组排序）"></a>4、sort函数的使用（数组排序）</h4><blockquote><p>MDN：sort()方法用<a href="https://en.wikipedia.org/wiki/In-place_algorithm">原地算法</a>对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的。<a href="https://juejin.cn/post/6844904159314116622">深入理解字符编码</a></p></blockquote><p>对于两个元素x和y，如果认为x &lt; y，则返回-1，如果认为x == y，则返回0，如果认为x &gt; y，则返回1。<strong>sort()方法会直接对Array进行修改，它返回的结果仍是当前Array。</strong></p><ul><li><p>示例：使用sort默认排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;Microsoft&#x27;</span>].sort(); <span class="hljs-comment">// [&#x27;Apple&#x27;, &#x27;Google&#x27;, &#x27;Microsoft&#x27;];</span><br><br>[<span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;Microsoft&#x27;</span>].sort(); <span class="hljs-comment">// [&#x27;Google&#x27;, &#x27;Microsoft&quot;, &#x27;apple&#x27;]</span><br><br><span class="hljs-comment">//  Array的sort()方法默认把所有元素先转换为String再排序</span><br>[<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>].sort(); <span class="hljs-comment">// [1, 10, 2, 20]</span><br></code></pre></td></tr></table></figure></li><li><p>示例：将数组从小到大排序 [10, 20, 1, 2]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-comment">// 正数相当于1，负数相当于-1</span><br>arr.sort(<span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> x-y); <span class="hljs-comment">// [1, 2, 10, 20]</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="5、every函数的使用（判断数组的所有元素是否满足测试条件）"><a href="#5、every函数的使用（判断数组的所有元素是否满足测试条件）" class="headerlink" title="5、every函数的使用（判断数组的所有元素是否满足测试条件）"></a>5、every函数的使用（判断数组的所有元素是否满足测试条件）</h4><blockquote><p>MDN：every()方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</p></blockquote><p><strong>若收到一个空数组，此方法在一切情况下都会返回 true。</strong></p><ul><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>];<br><span class="hljs-built_in">console</span>.log(arr.every(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> s.length &gt; <span class="hljs-number">0</span>;<br>&#125;)); <span class="hljs-comment">// true, 因为每个元素都满足s.length&gt;0</span><br><br><span class="hljs-built_in">console</span>.log(arr.every(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> s.toLowerCase() === s;<br>&#125;)); <span class="hljs-comment">// false, 因为不是每个元素都全部是小写</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="6、find函数的使用（查找符合条件的第一个元素，返回值）"><a href="#6、find函数的使用（查找符合条件的第一个元素，返回值）" class="headerlink" title="6、find函数的使用（查找符合条件的第一个元素，返回值）"></a>6、find函数的使用（查找符合条件的第一个元素，返回值）</h4><blockquote><p>MDN： find()方法返回数组中满足提供的测试函数的第一个元素的值。否则返回undefined。</p></blockquote><ul><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>];<br><span class="hljs-built_in">console</span>.log(arr.find(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> s.toLowerCase() === s;<br>&#125;)); <span class="hljs-comment">// &#x27;pear&#x27;, 因为pear全部是小写</span><br><br><span class="hljs-built_in">console</span>.log(arr.find(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> s.toUpperCase() === s;<br>&#125;)); <span class="hljs-comment">// undefined, 因为没有全部是大写的元素</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="7、findIndex函数的使用（查找符合条件的第一个元素，返回索引）"><a href="#7、findIndex函数的使用（查找符合条件的第一个元素，返回索引）" class="headerlink" title="7、findIndex函数的使用（查找符合条件的第一个元素，返回索引）"></a>7、findIndex函数的使用（查找符合条件的第一个元素，返回索引）</h4><blockquote><p>MDN：findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回-1。</p></blockquote><ul><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>];<br><span class="hljs-built_in">console</span>.log(arr.findIndex(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> s.toLowerCase() === s;<br>&#125;)); <span class="hljs-comment">// 1, 因为&#x27;pear&#x27;的索引是1</span><br><br><span class="hljs-built_in">console</span>.log(arr.findIndex(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> s.toUpperCase() === s;<br>&#125;)); <span class="hljs-comment">// -1</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>findIndex与indexOf的区别</strong></p><ul><li>findindex丢进去的是一个函数，找满足函数关系的元素。</li><li>indexof丢进去的是要找的元素，直接找元素。</li></ul><h4 id="8、forEach函数的使用（对数组每个元素进行操作，没有返回值）"><a href="#8、forEach函数的使用（对数组每个元素进行操作，没有返回值）" class="headerlink" title="8、forEach函数的使用（对数组每个元素进行操作，没有返回值）"></a>8、forEach函数的使用（对数组每个元素进行操作，没有返回值）</h4><blockquote><p>MDN：forEach()方法对数组的每个元素执行一次给定的函数。</p></blockquote><p>forEach()和map()类似，它也把每个元素依次作用于传入的函数，但不会返回新的数组。forEach()常用于遍历数组，因此，传入的函数不需要返回值。</p><ul><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>];<br>arr.forEach(<span class="hljs-built_in">console</span>.log); <span class="hljs-comment">// 依次打印每个元素</span><br></code></pre></td></tr></table></figure></li></ul><p>forEach方法可以接收两个参数array.forEach(function(currentValue, index, arr), thisValue)：</p><ol><li>回调函数，必需，回调函数中有三个参数<ol><li>currentValue，必需，当前元素</li><li>index，可选，当前元素的索引值</li><li>arr，可选，当前元素所属的数组对象</li></ol></li><li>thisValue，可选，传递给参数的值一般用“this”值，如果这个参数为空，“undefined”会传递给“this”值简单点来说，就是我们可以直接使用第二个参数来指定函数里的this的值，而不需要使用箭头函数或者在外面定义var that = this;等操作。 在加上第二个参数前，forEach函数里的this默认是指向window的，在加了第二个参数this之后则指向forEach函数所在的对象了。<br><img src="https://gitee.com/huqian025/my-images/raw/master/js/js%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/foreach%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8F%82%E6%95%B0.png" alt="forEach方法第二个参数thisValue"></li></ol>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js模块化规范</title>
    <link href="/2022/01/06/js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/"/>
    <url>/2022/01/06/js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h3 id="一、入门介绍"><a href="#一、入门介绍" class="headerlink" title="一、入门介绍"></a>一、入门介绍</h3><h4 id="1、什么是模块-模块化"><a href="#1、什么是模块-模块化" class="headerlink" title="1、什么是模块/模块化"></a>1、什么是模块/模块化</h4><ul><li>将一个复杂的程序依据一定的规则（规范）封装成几个块（文件），并进行组合在一起</li><li>块的内部数据/实现是私有的，只是向外部暴露一些接口（方法）与其他外部模块通信</li></ul><h4 id="2、为什么要模块化"><a href="#2、为什么要模块化" class="headerlink" title="2、为什么要模块化"></a>2、为什么要模块化</h4><ul><li>降低复杂度</li><li>提高解耦性（降低耦合度）</li><li>部署方便（功能点明确）</li></ul><h4 id="3、模块化的好处"><a href="#3、模块化的好处" class="headerlink" title="3、模块化的好处"></a>3、模块化的好处</h4><ul><li>避免命名冲突（减少命名空间污染）</li><li>更好的分离，按需加载</li><li>更高复用性</li><li>高可维护性</li></ul><h4 id="4、页面引入加载script问题"><a href="#4、页面引入加载script问题" class="headerlink" title="4、页面引入加载script问题"></a>4、页面引入加载script问题</h4><ul><li>请求过多</li><li>依赖模糊</li><li>难以维护</li></ul><h3 id="二、模块化规范"><a href="#二、模块化规范" class="headerlink" title="二、模块化规范"></a>二、模块化规范</h3><h4 id="0、不使用任何规范"><a href="#0、不使用任何规范" class="headerlink" title="0、不使用任何规范"></a>0、不使用任何规范</h4><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// module1.js</span><br><span class="hljs-comment">// 定义一个没有任何依赖的模块</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">window</span></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;module1&#x27;</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> name<br>  &#125;<br>  <span class="hljs-built_in">window</span>.module1 = &#123;getName&#125;<br>&#125;)(<span class="hljs-built_in">window</span>)<br><br><span class="hljs-comment">// module2.js</span><br><span class="hljs-comment">// 定义一个有依赖的模块</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">window</span>, module1</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> msg = <span class="hljs-string">&#x27;module2&#x27;</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(msg, module1.getName())<br>  &#125;<br>  <span class="hljs-built_in">window</span>.module2 = &#123;foo&#125;<br>&#125;)(<span class="hljs-built_in">window</span>, module1)<br><br><span class="hljs-comment">// app.js</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">module2</span>) </span>&#123;<br>  module2.foo()<br>&#125;)(module2)<br><br><span class="hljs-comment">// html中引入</span><br>&lt;!-- 需要发三次请求，且依赖关系不能乱 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/module1.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/module2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./app.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="1、CommonJS（掌握）"><a href="#1、CommonJS（掌握）" class="headerlink" title="1、CommonJS（掌握）"></a>1、CommonJS（掌握）</h4><h5 id="1-1、规范"><a href="#1-1、规范" class="headerlink" title="1.1、规范"></a>1.1、规范</h5><ul><li>说明：<ul><li>每个js文件都可当做一个模块</li><li>在服务器端：模块的加载是运行时同步加载的</li><li>在浏览器端：模块需要提前编译打包处理</li></ul></li><li>基本语法：<ul><li>暴露模块：<ul><li><code>module.exports = value</code></li><li><code>exports.xxx = value</code></li><li>暴露模块本质暴露的是exports对象</li></ul></li><li>引入模块：<code>require(xxx)</code><ul><li>第三方模块：xxx为模块名</li><li>自定义模块：xxx为模块文件路径</li></ul></li></ul></li></ul><h5 id="1-2、实现"><a href="#1-2、实现" class="headerlink" title="1.2、实现"></a>1.2、实现</h5><ul><li>服务端实现：Node. js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// module1.js</span><br><span class="hljs-comment">// module.exports = value 暴露一个对象</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;module1&#x27;</span>,<br>  foo () &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.msg)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// module2.js</span><br><span class="hljs-comment">// 暴露一个函数 module.exports = function()&#123;&#125;</span><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;module2&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// module3.js</span><br><span class="hljs-comment">// exports.xxx = value</span><br><span class="hljs-built_in">exports</span>.foo = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;foo() module3&#x27;</span>)<br>&#125;<br><span class="hljs-built_in">exports</span>.bar= <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;bar() module3&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// 将其他模块汇集到主模块</span><br><span class="hljs-keyword">let</span> uniq = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;uniq&#x27;</span>) <span class="hljs-comment">// 引入第三方不用写路径，一般第三方放到最上面</span><br><span class="hljs-keyword">let</span> module1 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./modules/module1&#x27;</span>)<br><span class="hljs-keyword">let</span> module2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./modules/module2&#x27;</span>)<br><span class="hljs-keyword">let</span> module3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./modules/module3&#x27;</span>)<br><br>module1.foo()<br>module2()<br>module3.foo()<br>module3.bar()<br></code></pre></td></tr></table></figure><ul><li>浏览器端实现：Browserify，也称为浏览器端的打包工具（ES6也使用到）。全局安装<code>npm install browserify -g</code>，项目中安装<code>npm install browserify --save-dev</code><ul><li>浏览器端与node端基本相似，区别在于浏览器端需要将主模块js文件打包，并在html文件中引入打包后的js文件</li><li>踩坑：使用<code>browserify js/src/app.js -o js/dist/bundle.js</code>对js主模块进行打包时，会报错<code>browserify : 无法加载文件 D:\devSoftware\nodejs\node_global\browserify.ps1，因为在此系统上禁止运行脚本</code>，解决方法：以管理员身份进入命令行，切换到项目根目录，再执行上述打包命令</li></ul></li></ul><h4 id="2、AMD（掌握）"><a href="#2、AMD（掌握）" class="headerlink" title="2、AMD（掌握）"></a>2、AMD（掌握）</h4><h5 id="2-1、规范"><a href="#2-1、规范" class="headerlink" title="2.1、规范"></a>2.1、规范</h5><ul><li>说明：专门用于浏览器端，模块的加载是异步的</li><li>基本语法：<ul><li>定义暴露模块<ul><li>定义没有依赖的模块：<code>define(function() &#123; return 模块 &#125;)</code></li><li>定义有依赖的模块：<code>define([&#39;module1&#39;, &#39;module2&#39;], function(m1, m2) &#123; return 模块 &#125;)</code></li></ul></li><li>引入使用模块（可以使用require，也可以使用requirejs）<ul><li><code>requirejs([&#39;module1&#39;, &#39;module2&#39;], function(m1, m2) &#123; 使用m1/m2 &#125;)</code></li></ul></li></ul></li></ul><h5 id="2-2、实现（浏览器端）"><a href="#2-2、实现（浏览器端）" class="headerlink" title="2.2、实现（浏览器端）"></a>2.2、实现（浏览器端）</h5><ul><li>require.js，在官网或github下载require.js，并将其导入项目（如：js/libs/require.js）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// dataService.js</span><br><span class="hljs-comment">// 定义没有依赖的模块</span><br>define(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;dataService.js&#x27;</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> name<br>  &#125;<br>  <span class="hljs-comment">// 暴露模块</span><br>  <span class="hljs-keyword">return</span> &#123;getName&#125;<br>&#125;)<br><br><span class="hljs-comment">// alerter.js</span><br><span class="hljs-comment">// 定义有依赖的模块</span><br>define([<span class="hljs-string">&#x27;dataService&#x27;</span>, <span class="hljs-string">&#x27;jquery&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">dataService, $</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> msg = <span class="hljs-string">&#x27;alerter.js&#x27;</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showMsg</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(msg, dataService.getName())<br>  &#125;<br>  $(<span class="hljs-string">&#x27;body&#x27;</span>).css(<span class="hljs-string">&#x27;background&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>)<br>  <span class="hljs-comment">// 暴露模块</span><br>  <span class="hljs-keyword">return</span> &#123;showMsg&#125;<br>&#125;)<br><br><span class="hljs-comment">// main.js</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  requirejs.config(&#123;<br>    <span class="hljs-comment">// 基本路径，使用baseUrl出发点在根目录下，不使用从自身出发</span><br>    <span class="hljs-comment">// baseUrl: &#x27;js/&#x27;,</span><br>    <span class="hljs-comment">// 配置路径</span><br>    <span class="hljs-attr">paths</span>: &#123;<br>      <span class="hljs-comment">// 模块名: 路径，文件名后不用加.js，requirejs会自动添加.js</span><br>      <span class="hljs-attr">dataService</span>: <span class="hljs-string">&#x27;./modules/dataService&#x27;</span>,<br>      <span class="hljs-attr">alerter</span>: <span class="hljs-string">&#x27;./modules/alerter&#x27;</span>,<br>      <span class="hljs-comment">// jQuery官方在AMD规范中暴露jquery</span><br>      <span class="hljs-attr">jquery</span>: <span class="hljs-string">&#x27;./libs/jquery-3.6.0&#x27;</span><br>    &#125;<br>  &#125;)<br>  requirejs([<span class="hljs-string">&#x27;alerter&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">alerter</span>) </span>&#123;<br>    alerter.showMsg()<br>  &#125;)<br>&#125;)()<br><br><span class="hljs-comment">// html中引入</span><br>&lt;!-- data-main为根目录下主模块路径，src为根目录下<span class="hljs-built_in">require</span>.js路径 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">data-main</span>=<span class="hljs-string">&quot;js/main.js&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/libs/require.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="3、CMD（了解）"><a href="#3、CMD（了解）" class="headerlink" title="3、CMD（了解）"></a>3、CMD（了解）</h4><h5 id="3-1、规范"><a href="#3-1、规范" class="headerlink" title="3.1、规范"></a>3.1、规范</h5><ul><li>说明：专门用于浏览器端，模块的加载是异步的，模块使用时才会加载执行</li><li>基本语法：<ul><li>定义暴露模块、引入使用模块</li><li><img src="https://gitee.com/huqian025/my-images/raw/master/js/js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/CMD.png"></li></ul></li></ul><h5 id="3-2、实现（浏览器端）"><a href="#3-2、实现（浏览器端）" class="headerlink" title="3.2、实现（浏览器端）"></a>3.2、实现（浏览器端）</h5><ul><li>Sea.js（停止维护）</li></ul><h4 id="4、ES6（掌握）"><a href="#4、ES6（掌握）" class="headerlink" title="4、ES6（掌握）"></a>4、ES6（掌握）</h4><h5 id="4-1、规范"><a href="#4-1、规范" class="headerlink" title="4.1、规范"></a>4.1、规范</h5><ul><li>说明：依赖模块需要编译打包处理</li><li>语法：<ul><li>导出模块：export</li><li>引入模块：import</li></ul></li></ul><h5 id="4-2、实现（浏览器端）"><a href="#4-2、实现（浏览器端）" class="headerlink" title="4.2、实现（浏览器端）"></a>4.2、实现（浏览器端）</h5><ul><li><p>核心：</p><ul><li>使用Babel将ES6编译为ES5代码</li><li>使用Browserify编译打包js</li></ul></li><li><p>使用：</p><ul><li>安装babel-cli，babel-preset-es2015和browserify<ul><li>npm install babel-cli browserify -g</li><li>npm install babel-preset-es2015 –save-dev</li></ul></li><li>定义 .babelrc 文件<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;es2015&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>编译</p><ul><li>使用Babel将ES6编译为ES5代码（但还是包含CommonJS语法）：babel js/src -d js/build</li><li>使用Browserify编译js：browserify js/build/main.js -o js/dist/bundle.js</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// module1.js</span><br><span class="hljs-comment">// 常规暴露-分别暴露</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;foo() module1&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;bar() module1&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><br><span class="hljs-comment">// module2.js</span><br><span class="hljs-comment">// 常规暴露-统一暴露</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;fun() module2&#x27;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun2</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;fun2() module2&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">export</span> &#123;fun, fun2&#125;<br><br><span class="hljs-comment">// module3.js</span><br><span class="hljs-comment">// 默认暴露，可以暴露任意数据类型，暴露什么数据接收到的就是什么数据</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;默认暴露&#x27;</span>,<br>  foo () &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.msg)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// main.js</span><br><span class="hljs-comment">// 引入模块</span><br><span class="hljs-comment">// 常规暴露必须使用解构赋值的形式引入</span><br><span class="hljs-keyword">import</span> &#123;foo, bar&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module1&#x27;</span><br><span class="hljs-keyword">import</span> &#123; fun, fun2 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module2&#x27;</span><br><span class="hljs-comment">// 默认暴露直接引入</span><br><span class="hljs-keyword">import</span> module3 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module3&#x27;</span><br><span class="hljs-comment">// 引入第三方库类似默认暴露，以jquery为例</span><br><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jquery&#x27;</span><br>$(<span class="hljs-string">&#x27;body&#x27;</span>).css(<span class="hljs-string">&#x27;background&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>)<br>foo()<br>bar()<br>fun()<br>fun2()<br>module3.foo()<br><br><span class="hljs-comment">// html中引入</span><br>&lt;!-- 引入通过babel和browserify打包处理后的js文件 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/dist/bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="三、ES6引入export-default导出的模块，不使用"><a href="#三、ES6引入export-default导出的模块，不使用" class="headerlink" title="三、ES6引入export default导出的模块，不使用{}"></a>三、ES6引入export default导出的模块，不使用{}</h3><p><img src="https://gitee.com/huqian025/my-images/raw/master/js/js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/ES6%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4%E5%AF%BC%E5%87%BA%E6%A8%A1%E5%9D%97.png"></p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>模块化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ajax基础</title>
    <link href="/2022/01/06/ajax%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/01/06/ajax%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h4 id="0、HTTP协议"><a href="#0、HTTP协议" class="headerlink" title="0、HTTP协议"></a>0、HTTP协议</h4><ul><li><p>HTTP 超文本传输协议，协议详细规定了浏览器与万维网服务器之间互相通信的规则。</p></li><li><p>请求报文：<br><img src="https://gitee.com/huqian025/my-images/raw/master/ajax/ajax%E5%9F%BA%E7%A1%80/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.png" alt="请求报文"></p></li><li><p>响应报文：<br><img src="https://gitee.com/huqian025/my-images/raw/master/ajax/ajax%E5%9F%BA%E7%A1%80/%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87.png" alt="响应报文"></p></li></ul><h4 id="1、Ajax简介"><a href="#1、Ajax简介" class="headerlink" title="1、Ajax简介"></a>1、Ajax简介</h4><ul><li>Ajax全称为Asynchronous JavaScript And XML，就是异步的JS和XML</li><li>通过Ajax可以在浏览器中向服务器发送异步请求，最大的优势：<strong>无刷新获取数据</strong></li><li>Ajax不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式</li></ul><h4 id="2、XML简介"><a href="#2、XML简介" class="headerlink" title="2、XML简介"></a>2、XML简介</h4><ul><li>XML可扩展标记语言，被设计用来传输和存储数据</li><li>XML和HTML类似，不同的是HTML中都是预定义标签，而XML中没有预定义标签，全部都是自定义标签，用来表示一些数据</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 例如：有一个学生数据name=&quot;孙悟空&quot;; age=18; gender=&quot;男&quot; --&gt;</span><br><span class="hljs-comment">&lt;!-- 用XML表示： --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>孙悟空<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>现在已经被JSON取代了<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 用JSON表示：</span><br>&#123;<br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;孙悟空&quot;</span>,<br>    <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">&quot;gender&quot;</span>: <span class="hljs-string">&quot;男&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="3、Ajax特点"><a href="#3、Ajax特点" class="headerlink" title="3、Ajax特点"></a>3、Ajax特点</h4><h5 id="3-1、Ajax优点"><a href="#3-1、Ajax优点" class="headerlink" title="3.1、Ajax优点"></a>3.1、Ajax优点</h5><ul><li>可以在无需刷新页面与服务器进行通信</li><li>允许根据用户事件来更新部分页面内容</li></ul><h5 id="3-2、Ajax缺点"><a href="#3-2、Ajax缺点" class="headerlink" title="3.2、Ajax缺点"></a>3.2、Ajax缺点</h5><ul><li>没有浏览历史，不能回退</li><li>存在跨域问题</li><li>SEO优化不友好</li></ul><h4 id="4、发送ajax请求"><a href="#4、发送ajax请求" class="headerlink" title="4、发送ajax请求"></a>4、发送ajax请求</h4><h5 id="4-1、原生ajax"><a href="#4-1、原生ajax" class="headerlink" title="4.1、原生ajax"></a>4.1、原生ajax</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取button元素</span><br><span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;button&#x27;</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">const</span> box = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;box&#x27;</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-comment">// 绑定事件</span><br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 1. 创建对象</span><br>    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br>    <span class="hljs-comment">// 2. 初始化 设置请求类型和url</span><br>    xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://127.0.0.1:8000/server&#x27;</span>)<br>    <span class="hljs-comment">// 3. 发送</span><br>    xhr.send()<br>    <span class="hljs-comment">// 4. 事件绑定 处理服务端返回的结果</span><br>    <span class="hljs-comment">// on when 当...时候</span><br>    <span class="hljs-comment">// readystate 是xhr对象中的属性，表示状态0,1,2,3,4（分别对应未初始化，open方法调用完毕，send方法调用完毕，服务端返回部分结果，服务端返回所有结果）</span><br>    <span class="hljs-comment">// change 改变</span><br>    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-comment">// 判断服务端返回所有结果</span><br>      <span class="hljs-keyword">if</span>(xhr.readyState === <span class="hljs-number">4</span>)&#123;<br>        <span class="hljs-comment">// 判断相应状态码，2开头都是成功</span><br>        <span class="hljs-keyword">if</span>(xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>)&#123;<br>          <span class="hljs-comment">// 处理结果</span><br>          <span class="hljs-built_in">console</span>.log(xhr.status) <span class="hljs-comment">// 响应状态码</span><br>          <span class="hljs-built_in">console</span>.log(xhr.statusText) <span class="hljs-comment">// 响应状态字符串</span><br>          <span class="hljs-built_in">console</span>.log(xhr.getAllResponseHeaders()) <span class="hljs-comment">// 所有响应头</span><br>          <span class="hljs-built_in">console</span>.log(xhr.response) <span class="hljs-comment">// 响应体</span><br>          box.innerHTML = xhr.response<br>        &#125;<br>      &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-2、jquery发送ajax请求"><a href="#4-2、jquery发送ajax请求" class="headerlink" title="4.2、jquery发送ajax请求"></a>4.2、jquery发送ajax请求</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $.get(<span class="hljs-string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>, &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">200</span>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(data)<br>    &#125;, <span class="hljs-string">&#x27;json&#x27;</span>)<br>  &#125;)<br>  $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">1</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $.post(<span class="hljs-string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>, &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">200</span>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(data)<br>    &#125;)<br>  &#125;)<br>  $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">2</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $.ajax(&#123;<br>      <span class="hljs-comment">// url</span><br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>,<br>      <span class="hljs-comment">// 参数</span><br>      <span class="hljs-attr">data</span>: &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">200</span>&#125;,<br>      <span class="hljs-comment">// 请求类型</span><br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>      <span class="hljs-comment">// 响应体结果</span><br>      <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,<br>      <span class="hljs-comment">// 成功回调</span><br>      <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(data)<br>      &#125;,<br>      <span class="hljs-comment">// 超时时间</span><br>      <span class="hljs-attr">timeout</span>: <span class="hljs-number">2000</span>,<br>      <span class="hljs-comment">// 失败回调</span><br>      <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;出错了&#x27;</span>)<br>      &#125;<br>    &#125;)<br>  &#125;)<br></code></pre></td></tr></table></figure><h5 id="4-3、axios发送ajax请求"><a href="#4-3、axios发送ajax请求" class="headerlink" title="4.3、axios发送ajax请求"></a>4.3、axios发送ajax请求</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;button&#x27;</span>)<br>  <span class="hljs-comment">// 配置baseURL</span><br>  axios.defaults.baseURL = <span class="hljs-string">&#x27;http://127.0.0.1:8000&#x27;</span><br>  btns[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// GET请求</span><br>    axios.get(<span class="hljs-string">&#x27;axios-server&#x27;</span>, &#123;<br>      <span class="hljs-comment">// url参数</span><br>      <span class="hljs-attr">params</span>: &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">100</span>,<br>        <span class="hljs-attr">vip</span>: <span class="hljs-number">7</span><br>      &#125;,<br>      <span class="hljs-comment">// 请求头信息</span><br>      <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;abc&#x27;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>      &#125;<br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(res)<br>    &#125;)<br>  &#125;<br>  btns[<span class="hljs-number">1</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// POST请求</span><br>    axios.post(<span class="hljs-string">&#x27;axios-server&#x27;</span>, <br>      &#123;<br>        <span class="hljs-comment">// 请求体</span><br>        <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>        <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;admin&#x27;</span><br>      &#125;, <br>      &#123;<br>        <span class="hljs-comment">// url参数</span><br>        <span class="hljs-attr">params</span>: &#123;<br>          <span class="hljs-attr">id</span>: <span class="hljs-number">100</span>,<br>          <span class="hljs-attr">vip</span>: <span class="hljs-number">7</span><br>        &#125;,<br>        <span class="hljs-comment">// 请求头信息</span><br>        <span class="hljs-attr">headers</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;abc&#x27;</span>,<br>          <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>        &#125;<br>      &#125;<br>    ).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(res)<br>    &#125;)<br>  &#125;<br>  btns[<span class="hljs-number">2</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    axios(&#123;<br>      <span class="hljs-comment">// 请求类型</span><br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>      <span class="hljs-comment">// url</span><br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;axios-server&#x27;</span>,<br>      <span class="hljs-comment">// url参数</span><br>      <span class="hljs-attr">params</span>: &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">100</span>,<br>        <span class="hljs-attr">vip</span>: <span class="hljs-number">7</span><br>      &#125;,<br>      <span class="hljs-comment">// 请求头信息</span><br>      <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;abc&#x27;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>      &#125;,<br>      <span class="hljs-comment">// 请求体</span><br>      <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>        <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;admin&#x27;</span><br>      &#125;<br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(res)<br>    &#125;)<br>  &#125;<br></code></pre></td></tr></table></figure><h5 id="4-4、fetch发送ajax请求"><a href="#4-4、fetch发送ajax请求" class="headerlink" title="4.4、fetch发送ajax请求"></a>4.4、fetch发送ajax请求</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>)<br>  btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    fetch(<span class="hljs-string">&#x27;http://127.0.0.1:8000/fetch-server&#x27;</span>, &#123;<br>      <span class="hljs-comment">// 请求类型</span><br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>      <span class="hljs-comment">// 请求头</span><br>      <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;abc&#x27;</span><br>      &#125;,<br>      <span class="hljs-comment">// 请求体</span><br>      <span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;username=admin&amp;password=admin&#x27;</span><br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-comment">// console.log(res)</span><br>      <span class="hljs-keyword">return</span> res.json()<br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(res)<br>    &#125;)<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="5、跨域"><a href="#5、跨域" class="headerlink" title="5、跨域"></a>5、跨域</h4><h5 id="5-1、同源策略"><a href="#5-1、同源策略" class="headerlink" title="5.1、同源策略"></a>5.1、同源策略</h5><ul><li><ol><li>同源策略是浏览器的一种安全策略</li></ol></li><li><ol start="2"><li>同源：协议、域名、端口号必须完全相同</li></ol></li><li><ol start="3"><li>违背同源策略就是跨域</li></ol></li></ul><h5 id="5-2、解决跨域-jsonp"><a href="#5-2、解决跨域-jsonp" class="headerlink" title="5.2、解决跨域-jsonp"></a>5.2、解决跨域-jsonp</h5><ul><li><ol><li>jsonp是什么：jsonp是一个非官方的跨域解决方案，凭借程序员的聪明才智开发出来，只支持get请求</li></ol></li><li><ol start="2"><li>jsonp怎么工作的：在网页中有一些标签天生具有跨域能力，比如img、link、iframe和script。jsonp就是利用script标签的跨域能力来发送请求的</li></ol></li><li><ol start="3"><li>jsonp的使用：</li></ol><ul><li>1）动态创建一个script标签<code>var script = document.createElement(&#39;script&#39;)</code></li><li>2）设置script的src属性，设置回调函数<code>script.src = &#39;http://127.0.0.1:8000/check-username&#39;</code></li><li>3）将script标签插入到文档中<code>document.body.appendChild(script)</code></li></ul></li></ul><h5 id="5-3、解决跨域-设置CORS响应头"><a href="#5-3、解决跨域-设置CORS响应头" class="headerlink" title="5.3、解决跨域-设置CORS响应头"></a>5.3、解决跨域-设置CORS响应头</h5><ul><li><ol><li>CORS是什么：跨域资源共享，CORS是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持post和get请求。跨域资源共享标准新增了一组HTTP首部字段，允许服务器声明哪些源站通过浏览器访问哪些资源</li></ol></li><li><ol start="2"><li>CORS是怎么工作的：CORS是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行</li></ol></li><li><ol start="3"><li>CORS的使用：</li></ol><ul><li>在服务端设置请求的响应头<code>response.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;)</code></li></ul></li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/ajax/ajax%E5%9F%BA%E7%A1%80/%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F.png" alt="解决跨域"></p>]]></content>
    
    
    <categories>
      
      <category>ajax</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
