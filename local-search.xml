<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue3新特性</title>
    <link href="/2022/03/03/vue3%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/2022/03/03/vue3%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="一、常用-Composition-API"><a href="#一、常用-Composition-API" class="headerlink" title="一、常用 Composition API"></a>一、常用 Composition API</h3><h4 id="1-setup"><a href="#1-setup" class="headerlink" title="1. setup"></a>1. setup</h4><p>setup 是 Vue3.0 中一个新的配置项，值为一个函数，是所有 Composition API 的入口</p><p><strong>两个注意点</strong>：</p><ul><li>1.setup 执行的时机：在 beforeCreate 之前执行一次，this 是 undefined</li><li>2.setup 的参数：<ul><li>props：值为对象，包含组件外部传递过来，且组件内部声明接收了的属性</li><li>content：上下文对象<ul><li>attrs：值为对象，包含组件外部传递过来，但没有在 props 配置中声明的属性，相当于 <code>this.$attrs</code></li><li>slots：收到的插槽内容，相当于 <code>this.$slots</code></li><li>emit：分发自定义事件的函数，相当于 <code>this.$emit</code></li></ul></li></ul></li></ul><h4 id="2-ref-和-reactive"><a href="#2-ref-和-reactive" class="headerlink" title="2. ref 和 reactive"></a>2. ref 和 reactive</h4><h5 id="2-1-ref-和-reactive-使用"><a href="#2-1-ref-和-reactive-使用" class="headerlink" title="2.1 ref 和 reactive 使用"></a>2.1 ref 和 reactive 使用</h5><ul><li>ref 用于定义一个响应式的数据<ul><li>定义基本数据类型：响应式是靠 Object.defineProperty() 的 get 和 set 完成的</li><li>定义对象数据类型：内部实际使用 reactive 函数</li></ul></li><li>reactive 用于定义一个<strong>对象类型</strong>的响应式数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>num: &#123;&#123; num &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>obj.name: &#123;&#123; obj.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>obj.age: &#123;&#123; obj.age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; ref, reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> num = ref(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">const</span> obj = reactive(&#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>    &#125;)<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      num.value ++;<br>      obj.age ++;<br>    &#125;, <span class="hljs-number">3000</span>);<br>    <span class="hljs-keyword">return</span> &#123;<br>      num,<br>      obj<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-ref-与-reactive-对比"><a href="#2-2-ref-与-reactive-对比" class="headerlink" title="2.2 ref 与 reactive 对比"></a>2.2 ref 与 reactive 对比</h5><ul><li>从定义数据角度对比：<ul><li>ref用来定义：基本类型数据。</li><li>reactive用来定义：对象（或数组）类型数据。</li><li>备注：ref也可以用来定义对象（或数组）类型数据, 它内部会自动通过reactive转为代理对象。</li></ul></li><li>从原理角度对比：<ul><li>ref通过Object.defineProperty()的get与set来实现响应式（数据劫持）。</li><li>reactive通过使用Proxy来实现响应式（数据劫持）, 并通过Reflect操作源对象内部的数据。</li></ul></li><li>从使用角度对比：<ul><li>ref定义的数据：操作数据需要.value，读取数据时模板中直接读取不需要.value。</li><li>reactive定义的数据：操作数据与读取数据：均不需要.value。</li></ul></li></ul><h5 id="2-3-vue2-和-vue3-响应式对比"><a href="#2-3-vue2-和-vue3-响应式对比" class="headerlink" title="2.3 vue2 和 vue3 响应式对比"></a>2.3 vue2 和 vue3 响应式对比</h5><ul><li>vue2实现原理：<ul><li>对象类型：通过 Object.defineProperty() 对属性的读取、修改进行拦截（数据劫持）</li><li>数组类型：通过重写更新数组的一系列方法来实现拦截（对数组的变更方法进行了包裹）</li><li>为什么数组类型不通过 Object.defineProperty() 对数组属性进行监听？<a href="https://github.com/vuejs/vue/issues/8562">（Object.defineProperty 可以对数组元素监听，但是性能代价和获得的用户体验收益不成正比）</a></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.defineProperty(data, <span class="hljs-string">&#x27;count&#x27;</span>, &#123;<br>    get () &#123;&#125;, <br>    set () &#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>vue3实现原理：<ul><li>通过 Proxy（代理）：拦截对象中任意属性的变化，包括属性值的读写、属性的添加、属性的删除等</li><li>通过 Reflect（反射）：对源对象的属性进行操作</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(data, &#123;<br><span class="hljs-comment">// 拦截读取属性值</span><br>    get (target, prop) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.get(target, prop)<br>    &#125;,<br>    <span class="hljs-comment">// 拦截设置属性值或添加新属性</span><br>    set (target, prop, value) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.set(target, prop, value)<br>    &#125;,<br>    <span class="hljs-comment">// 拦截删除属性</span><br>    deleteProperty (target, prop) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.deleteProperty(target, prop)<br>    &#125;<br>&#125;)<br>proxy.name = <span class="hljs-string">&#x27;tom&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="3-计算属性与监视"><a href="#3-计算属性与监视" class="headerlink" title="3. 计算属性与监视"></a>3. 计算属性与监视</h4><h5 id="3-1-computed"><a href="#3-1-computed" class="headerlink" title="3.1 computed"></a>3.1 computed</h5><p>与 vue2 中 computed 配置功能一致</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; computed, reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> person = reactive&#123;<br>      <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;张&#x27;</span>,<br>      <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;三&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">// const fullName = computed(() =&gt; &#123;</span><br>    <span class="hljs-comment">//   return `$&#123;person.firstName&#125;-$&#123;person.lastName&#125;`</span><br>    <span class="hljs-comment">// &#125;)</span><br>    <span class="hljs-keyword">const</span> fullName = computed(&#123;<br>      <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;person.firstName&#125;</span>-<span class="hljs-subst">$&#123;person.lastName&#125;</span>`</span><br>      &#125;,<br>      <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> nameArr = value.split(<span class="hljs-string">&#x27;-&#x27;</span>)<br>        person.firstName = nameArr[<span class="hljs-number">0</span>]<br>        person.lastName = nameArr[<span class="hljs-number">1</span>]<br>      &#125;<br>    &#125;)<br>    <span class="hljs-keyword">return</span> &#123;<br>      person,<br>      fullName<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-2-watch"><a href="#3-2-watch" class="headerlink" title="3.2 watch"></a>3.2 watch</h5><p>与 vue2 中 watch 配置功能一致</p><p><strong>注意点：</strong></p><ol><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//情况一：监视ref定义的响应式数据</span><br>watch(sum, <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sum变化了&#x27;</span>, newValue, oldValue)<br>&#125;, &#123;<span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>&#125;)<br><br><span class="hljs-comment">//情况二：监视多个ref定义的响应式数据</span><br>watch([sum, msg], <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sum或msg变化了&#x27;</span>, newValue, oldValue)<br>&#125;) <br><br><span class="hljs-comment">/* 情况三：监视reactive定义的响应式数据</span><br><span class="hljs-comment">若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span><br><span class="hljs-comment">若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span><br><span class="hljs-comment">*/</span><br>watch(person, <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;person变化了&#x27;</span>, newValue, oldValue)<br>&#125;, &#123;<span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">deep</span>: <span class="hljs-literal">false</span>&#125;) <span class="hljs-comment">//此处的deep配置不再奏效</span><br><br><span class="hljs-comment">//情况四：监视reactive定义的响应式数据中的某个属性</span><br>watch(<span class="hljs-function">()=&gt;</span>person.job, <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>, newValue, oldValue)<br>&#125;, &#123;<span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>&#125;) <br><br><span class="hljs-comment">//情况五：监视reactive定义的响应式数据中的某些属性</span><br>watch([<span class="hljs-function">()=&gt;</span>person.job, <span class="hljs-function">()=&gt;</span>person.name], <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>)=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>, newValue, oldValue)<br>&#125;, &#123;<span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>&#125;)<br><br><span class="hljs-comment">//特殊情况</span><br>watch(<span class="hljs-function">()=&gt;</span>person.job, <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;person的job变化了&#x27;</span>, newValue, oldValue)<br>&#125;, &#123;<span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>&#125;) <span class="hljs-comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span><br></code></pre></td></tr></table></figure><h5 id="3-3-watchEffect"><a href="#3-3-watchEffect" class="headerlink" title="3.3 watchEffect"></a>3.3 watchEffect</h5><ul><li>watchEffect 与 watch 区别：watch 既要指明监视的属性，也要指明监视的回调。而 watchEffect 不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span><br>watchEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">const</span> x1 = sum.value<br>    <span class="hljs-keyword">const</span> x2 = person.age<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;watchEffect配置的回调执行了&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="4-生命周期"><a href="#4-生命周期" class="headerlink" title="4. 生命周期"></a>4. 生命周期</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vue3%E6%96%B0%E7%89%B9%E6%80%A7/vue3%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="vue3生命周期"></p><ul><li><p>vue3 中可以继续使用 vue2 中的生命周期钩子，但是有两个被更名</p><ul><li>beforeDestroy 更名为 beforeUnmount</li><li>destroyed 更名为 unmounted</li></ul></li><li><p>vue3 也提供了 Composition API 形式的生命周期钩子，与 vue2 中钩子对应关系如下：</p><ul><li>beforeCreate ===&gt; setup</li><li>created =======&gt; setup</li><li>beforeMount ===&gt; onBeforeMount</li><li>mounted ======&gt; onMounted</li><li>beforeUpdate ===&gt; onBeforeUpdate</li><li>updated =======&gt; onUpdated</li><li>beforeDestroy ==&gt; onBeforeUnmount</li><li>destroyed =====&gt; onUnmounted</li><li>onRenderTracked（新增，调试用）</li><li>onRenderTriggered（新增，调试用）</li></ul></li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vue3%E6%96%B0%E7%89%B9%E6%80%A7/vue2%E5%92%8Cvue3%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90%E5%AF%B9%E6%AF%94.png" alt="vue2和vue3生命周期钩子对比"></p><h4 id="5-自定义-hook-函数"><a href="#5-自定义-hook-函数" class="headerlink" title="5. 自定义 hook 函数"></a>5. 自定义 hook 函数</h4><ul><li><p>hook 本质是使用 vue3 的组合 API 封装的可复用的功能函数</p></li><li><p>示例1：收集用户鼠标点击的页面坐标</p></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useMousePosition</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 初始化坐标数据</span><br>  <span class="hljs-keyword">const</span> x = ref(-<span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">const</span> y = ref(-<span class="hljs-number">1</span>)<br><br>  <span class="hljs-comment">// 用于收集点击事件坐标的函数</span><br>  <span class="hljs-keyword">const</span> updatePosition = <span class="hljs-function">(<span class="hljs-params">e: MouseEvent</span>) =&gt;</span> &#123;<br>    x.value = e.pageX<br>    y.value = e.pageY<br>  &#125;<br><br>  <span class="hljs-comment">// 挂载后绑定点击监听</span><br>  onMounted(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, updatePosition)<br>  &#125;)<br><br>  <span class="hljs-comment">// 卸载前解绑点击监听</span><br>  onUnmounted(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">document</span>.removeEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, updatePosition)<br>  &#125;)<br><br>  <span class="hljs-keyword">return</span> &#123;x, y&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>示例2：使用axios发送异步ajax请求</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useUrlLoader</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">url: <span class="hljs-built_in">string</span></span>) </span>&#123;<br><br>  <span class="hljs-keyword">const</span> result = ref&lt;T | <span class="hljs-literal">null</span>&gt;(<span class="hljs-literal">null</span>)<br>  <span class="hljs-keyword">const</span> loading = ref(<span class="hljs-literal">true</span>)<br>  <span class="hljs-keyword">const</span> errorMsg = ref(<span class="hljs-literal">null</span>)<br><br>  axios.get(url)<br>    .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>      loading.value = <span class="hljs-literal">false</span><br>      result.value = response.data<br>    &#125;)<br>    .catch(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>      loading.value = <span class="hljs-literal">false</span><br>      errorMsg.value = e.message || <span class="hljs-string">&#x27;未知错误&#x27;</span><br>    &#125;)<br><br>  <span class="hljs-keyword">return</span> &#123;<br>    loading,<br>    result,<br>    errorMsg,<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-toRef-和-toRefs"><a href="#6-toRef-和-toRefs" class="headerlink" title="6. toRef 和 toRefs"></a>6. toRef 和 toRefs</h4><ul><li>toRef 作用：为 reactive 对象上的属性创建 ref。创建的 ref 与源属性同步，修改源属性将更新 ref，修改 ref 也将更新源属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> state = reactive(&#123;<br>  <span class="hljs-attr">foo</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">bar</span>: <span class="hljs-number">2</span><br>&#125;)<br><span class="hljs-keyword">const</span> fooRef = toRef(state, <span class="hljs-string">&#x27;foo&#x27;</span>)<br><br><span class="hljs-comment">// 改变 ref 值，源属性值发生变化</span><br>fooRef.value++<br><span class="hljs-built_in">console</span>.log(state.foo) <span class="hljs-comment">// 2</span><br><br><span class="hljs-comment">// 修改源属性值，ref 值发生变化</span><br>state.foo++<br><span class="hljs-built_in">console</span>.log(fooRef.value) <span class="hljs-comment">// 3</span><br><br><span class="hljs-comment">// 错误示范，fooRef 不会与 state.foo 同步，因为 ref() 接收的是一个纯字符串值</span><br><span class="hljs-comment">// const fooRef = ref(state.foo)</span><br></code></pre></td></tr></table></figure><ul><li>toRefs 作用：将 reactive 对象转换为普通对象，普通对象的每个属性都是指向原始对象相应属性的 ref。每个单独的 ref 都是使用 toRef 创建的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useFeatureX</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> state = reactive(&#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">bar</span>: <span class="hljs-number">2</span><br>  &#125;)<br> <br>  <span class="hljs-comment">// 返回时转化为 refs</span><br>  <span class="hljs-keyword">return</span> toRefs(state)<br>&#125;<br><span class="hljs-comment">// 对象解构不会丢失响应式</span><br><span class="hljs-keyword">const</span> &#123; foo, bar &#125; = useFeatureX()<br></code></pre></td></tr></table></figure><h3 id="二、其他-Composition-API"><a href="#二、其他-Composition-API" class="headerlink" title="二、其他 Composition API"></a>二、其他 Composition API</h3><h4 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1. shallowReactive 与 shallowRef"></a>1. shallowReactive 与 shallowRef</h4><ul><li>shallowReactive：只处理对象最外层属性的响应式（浅响应式）</li><li>shallowRef：只处理基本数据类型的响应式，不进行对象的响应式处理</li><li>什么时候使用：<ul><li>如果一个对象结构比较深，但只是外层属性发生变化，则使用 shallowReactive</li><li>如果一个对象，后续不会修改其属性，而是用新的对象来替换，则使用 shallowRef</li></ul></li></ul><h4 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2. readonly 与 shallowReadonly"></a>2. readonly 与 shallowReadonly</h4><ul><li>readonly：让一个响应式数据变为只读的（深只读）</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）</li><li>使用场景：不希望数据被修改时</li></ul><h4 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3. toRaw 与 markRaw"></a>3. toRaw 与 markRaw</h4><ul><li><p>toRaw：将一个由 reactive 生成的响应式对象转为普通对象</p></li><li><p>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新</p></li><li><p>markRaw：标记一个对象，使其永远不会成为响应式对象</p></li><li><p>使用场景：</p><ul><li>有些值不应被设置为响应式，例如复杂的第三方类库等</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能</li></ul></li></ul><h4 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4. customRef"></a>4. customRef</h4><ul><li>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; ref, customRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Demo&#x27;</span>,<br>    <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">// let keyword = ref(&#x27;hello&#x27;) //使用 Vue 准备好的内置 ref</span><br>        <span class="hljs-comment">// 自定义一个 myRef</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myRef</span>(<span class="hljs-params">value, delay</span>)</span>&#123;<br>            <span class="hljs-keyword">let</span> timer<br>            <span class="hljs-comment">// 通过 customRef 去实现自定义</span><br>            <span class="hljs-keyword">return</span> customRef(<span class="hljs-function">(<span class="hljs-params">track, trigger</span>)=&gt;</span>&#123;<br>                <span class="hljs-keyword">return</span>&#123;<br>                    <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;<br>                        track() <span class="hljs-comment">// 告诉 vue 这个 value 值是需要被“追踪”的</span><br>                        <span class="hljs-keyword">return</span> value<br>                    &#125;,<br>                    <span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">newValue</span>)</span>&#123;<br>                        <span class="hljs-built_in">clearTimeout</span>(timer)<br>                        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>                            value = newValue<br>                            trigger() <span class="hljs-comment">// 告诉 vue 去更新界面</span><br>                        &#125;,delay)<br>                    &#125;<br>                &#125;<br>            &#125;)<br>        &#125;<br>        <span class="hljs-comment">// 使用自定义的ref</span><br>        <span class="hljs-keyword">let</span> keyword = myRef(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">500</span>) <br>        <span class="hljs-keyword">return</span> &#123;<br>            keyword<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5. provide 与 inject"></a>5. provide 与 inject</h4><ul><li>作用：实现祖与后代组件之间的通信。父组件有一个 provide 选项来提供数据，后代组件有一个 inject 选项来使用这些数据</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vue3%E6%96%B0%E7%89%B9%E6%80%A7/provide%E5%92%8Cinject.png" alt="provide和inject"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 祖组件</span><br><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> car = reactive(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;奔驰&#x27;</span>, <span class="hljs-attr">price</span>: <span class="hljs-string">&#x27;40万&#x27;</span>&#125;)<br>    provide(<span class="hljs-string">&#x27;car&#x27;</span>, car)<br>&#125;<br><br><span class="hljs-comment">// 后代组件</span><br><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> car = inject(<span class="hljs-string">&#x27;car&#x27;</span>)<br>    <span class="hljs-keyword">return</span> &#123; car &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6. 响应式数据的判断"></a>6. 响应式数据的判断</h4><ul><li>isRef：检查一个值是否为 ref 对象</li><li>isReactive：检查一个对象是否是由 reactive 创建的响应式代理</li><li>isReadonly：检查一个对象是否是由 readonly 创建的只读代理</li><li>isProxy：检查一个对象是否是由 reactive 或者 readonly 方法创建的代理</li></ul><h3 id="三、新组件"><a href="#三、新组件" class="headerlink" title="三、新组件"></a>三、新组件</h3><h4 id="1-Fragment（片段）"><a href="#1-Fragment（片段）" class="headerlink" title="1. Fragment（片段）"></a>1. Fragment（片段）</h4><ul><li>在 vue2 中：组件必须有一个根标签</li><li>在 vue3 中：组件可以没有根标签，内部会将多个标签包含在一个 Fragment 虚拟元素中</li><li>好处：减少标签层级，减小内存占用</li></ul><h4 id="2-Teleport（瞬移）"><a href="#2-Teleport（瞬移）" class="headerlink" title="2. Teleport（瞬移）"></a>2. Teleport（瞬移）</h4><ul><li>Teleport 是一种能够将组件的 html 结构移动到指定位置的技术</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- to 目标需要一个 CSS 选择器字符串或一个实际的 DOM 节点 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">teleport</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;body&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isShow&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mask&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;dialog&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是一个弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">teleport</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-Suspense（不确定的）"><a href="#3-Suspense（不确定的）" class="headerlink" title="3. Suspense（不确定的）"></a>3. Suspense（不确定的）</h4><ul><li>作用：等待异步组件时渲染一些额外内容，让应用有更好的用户体验</li><li>使用步骤：</li></ul><ol><li>异步引入组件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineAsyncComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> Child = defineAsyncComponent(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./components/Child.vue&#x27;</span>))<br></code></pre></td></tr></table></figure><ol start="2"><li>使用 Suspense 包裹组件，并配置好 default 和 fallback</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是App组件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Child</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:fallback</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>加载中.....<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h3><h4 id="1-全局-API-转移"><a href="#1-全局-API-转移" class="headerlink" title="1. 全局 API 转移"></a>1. 全局 API 转移</h4><ul><li>vue3 中将全局 API，即 Vue.xxx 调整到应用实例 app 上</li></ul><table><thead><tr><th>2.x 全局 API（Vue）</th><th>3.x 实例 API (app)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td>移除</td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table><h4 id="2-自定义指令"><a href="#2-自定义指令" class="headerlink" title="2. 自定义指令"></a>2. 自定义指令</h4><p>vue2 自定义指令钩子：</p><ul><li>bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。</li><li>inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。</li><li>update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新。</li><li>componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。</li><li>unbind：只调用一次，指令与元素解绑时调用。</li></ul><p><strong>vue2和vue3自定义指令钩子对比：</strong><br><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vue3%E6%96%B0%E7%89%B9%E6%80%A7/vue2%E5%92%8Cvue3%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E9%92%A9%E5%AD%90%E5%AF%B9%E6%AF%94.png" alt="vue2和vue3自定义指令钩子对比"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// vue2 注册一个全局自定义指令 v-focus</span><br>Vue.directive(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123; <br>    <span class="hljs-comment">// 当被绑定的元素插入到 DOM 中时</span><br>    <span class="hljs-attr">inserted</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123; <br>        <span class="hljs-comment">// 聚焦元素 </span><br>        el.focus() <br>    &#125; <br>&#125;)<br><br><span class="hljs-comment">// vue3 注册一个全局自定义指令 v-focus</span><br><span class="hljs-keyword">const</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><span class="hljs-keyword">const</span> app = createApp(&#123;&#125;) <br>app.directive(<span class="hljs-string">&#x27;focus&#x27;</span>, &#123; <br>    <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params">el</span>)</span> &#123; <br>        el.focus()<br>    &#125; <br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="3-v-model"><a href="#3-v-model" class="headerlink" title="3. v-model"></a>3. v-model</h4><ul><li>非兼容变更：用于自定义组件时，v-model 的 prop 和事件默认名称已更改<ul><li>prop: value -&gt; modelValue</li><li>事件: input -&gt; update:modelValue</li></ul></li><li>非兼容变更：v-bind 的 .sync 修饰符和组件的 model 选项已移除，可在 v-model 上加一个参数代替</li><li>新增：可以在同一组件上使用多个 v-model 绑定</li><li>新增：可以自定义 v-model 修饰符</li></ul><h5 id="3-1-vue2-语法"><a href="#3-1-vue2-语法" class="headerlink" title="3.1 vue2 语法"></a>3.1 vue2 语法</h5><p>vue2 中，在组件上使用 v-model 相当于绑定 value prop 并触发 input 事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ChildComponent</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pageTitle&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 等价于 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ChildComponent</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;pageTitle&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;pageTitle = $event&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h6 id="3-1-1-model-选项配置修改双向绑定"><a href="#3-1-1-model-选项配置修改双向绑定" class="headerlink" title="3.1.1 model 选项配置修改双向绑定"></a>3.1.1 model 选项配置修改双向绑定</h6><p>如果想要更改 prop 或事件名称，则需要在 ChildComponent 组件中添加 model 选项</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- ParentComponent.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ChildComponent</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pageTitle&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 等价于 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ChildComponent</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;pageTitle&quot;</span> @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;pageTitle = $event&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ChildComponent.vue</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">model</span>: &#123;<br>    <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;title&#x27;</span>,<br>    <span class="hljs-attr">event</span>: <span class="hljs-string">&#x27;change&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-comment">// 这将允许 `value` 属性用于其他用途</span><br>    <span class="hljs-attr">value</span>: <span class="hljs-built_in">String</span>,<br>    <span class="hljs-comment">// 使用 `title` 代替 `value` 作为 model 的 prop</span><br>    <span class="hljs-attr">title</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-built_in">String</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;Default title&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-1-2-v-bind-sync-修改双向绑定（vue3-中已移除）"><a href="#3-1-2-v-bind-sync-修改双向绑定（vue3-中已移除）" class="headerlink" title="3.1.2 v-bind.sync 修改双向绑定（vue3 中已移除）"></a>3.1.2 v-bind.sync 修改双向绑定（vue3 中已移除）</h6><p>在某些情况下，我们可能需要对某一个 prop 进行“双向绑定”，可以在子组件中抛出 update:myPropName 事件，父组件使用 :myPropName.sync 实现对 myPropName 属性的双向绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ChildComponent.vue</span><br><span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;update:title&#x27;</span>, newValue)<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- ParentComponent.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ChildComponent</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;pageTitle&quot;</span> @<span class="hljs-attr">update:title</span>=<span class="hljs-string">&quot;pageTitle = $event&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 等价于 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ChildComponent</span> <span class="hljs-attr">:title.sync</span>=<span class="hljs-string">&quot;pageTitle&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-2-vue3-语法"><a href="#3-2-vue3-语法" class="headerlink" title="3.2 vue3 语法"></a>3.2 vue3 语法</h5><p>在 vue3 中，自定义组件上的 v-model 相当于传递了 modelValue prop 并接收抛出的 update:modelValue 事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ChildComponent</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pageTitle&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 等价于 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ChildComponent</span> <span class="hljs-attr">:modelValue</span>=<span class="hljs-string">&quot;pageTitle&quot;</span> @<span class="hljs-attr">update:modelValue</span>=<span class="hljs-string">&quot;pageTitle = $event&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>如果需要更改 model 名称，可以为 v-model 传递一个参数，作为组件内的 model 选项代替</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ChildComponent</span> <span class="hljs-attr">v-model:title</span>=<span class="hljs-string">&quot;pageTitle&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 等价于 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ChildComponent</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;pageTitle&quot;</span> @<span class="hljs-attr">update:title</span>=<span class="hljs-string">&quot;pageTitle = $event&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>这也可以作为 .sync 修饰符的替代，而且允许我们在自定义组件上使用多个 v-model</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ChildComponent</span> <span class="hljs-attr">v-model:title</span>=<span class="hljs-string">&quot;pageTitle&quot;</span> <span class="hljs-attr">v-model:content</span>=<span class="hljs-string">&quot;pageContent&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 等价于 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ChildComponent</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;pageTitle&quot;</span> @<span class="hljs-attr">update:title</span>=<span class="hljs-string">&quot;pageTitle = $event&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:content</span>=<span class="hljs-string">&quot;pageContent&quot;</span> @<span class="hljs-attr">update:content</span>=<span class="hljs-string">&quot;pageContent = $event&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-异步组件"><a href="#4-异步组件" class="headerlink" title="4. 异步组件"></a>4. 异步组件</h4><p>Vue3 中 使用 defineAsyncComponent 定义异步组件，配置选项 component 替换为 loader，loader 函数本身不再接收 resolve 和 reject 参数，且必须返回一个 Promise，用法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span> <br>    <span class="hljs-comment">&lt;!-- 异步组件的使用 --&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">AsyncPage</span> /&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">AsyncPageWithOptions</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tempate</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineAsyncComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>; <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123; <br>    <span class="hljs-attr">components</span>: &#123;<br>        <span class="hljs-comment">// 无配置项异步组件 </span><br>        <span class="hljs-attr">AsyncPage</span>: defineAsyncComponent(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./NextPage.vue&quot;</span>)),<br>        <br>        <span class="hljs-comment">// 有配置项异步组件 </span><br>        <span class="hljs-attr">AsyncPageWithOptions</span>: defineAsyncComponent(&#123; <br>            <span class="hljs-attr">loader</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./NextPage.vue&quot;</span>), <br>            <span class="hljs-attr">delay</span>: <span class="hljs-number">200</span>, <br>            <span class="hljs-attr">timeout</span>: <span class="hljs-number">3000</span>, <br>            <span class="hljs-attr">errorComponent</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./ErrorComponent.vue&quot;</span>), <br>            <span class="hljs-attr">loadingComponent</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./LoadingComponent.vue&quot;</span>)<br>        &#125;) <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-其他改变"><a href="#5-其他改变" class="headerlink" title="5. 其他改变"></a>5. 其他改变</h4><ul><li>data 选项应始终被声明为一个函数</li><li>过渡类名更改：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* vue2 写法 */</span><br><span class="hljs-selector-class">.v-enter</span>,<br><span class="hljs-selector-class">.v-leave-to</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.v-leave</span>,<br><span class="hljs-selector-class">.v-enter-to</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/* vue3 写法 */</span><br><span class="hljs-selector-class">.v-enter-from</span>,<br><span class="hljs-selector-class">.v-leave-to</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.v-leave-from</span>,<br><span class="hljs-selector-class">.v-enter-to</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>移除 keyCode 作为 v-on 的修饰符，同时也不再支持 config.keyCodes</li><li>移除 v-on.native 修饰符</li><li>移除过滤器（filter）</li><li>v-if 优先 v-for 解析</li></ul><blockquote><p>参考文档：<br><a href="https://juejin.cn/post/6940454764421316644">掘金：Vue3.0 新特性以及使用经验总结</a><br><a href="https://vuejs.org/api/reactivity-utilities.html#toref">Vue3 API toRef</a><br><a href="https://v3.cn.vuejs.org/guide/migration/v-model.html">Vue2 迁移 Vue3 文档 v-model</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>this指向</title>
    <link href="/2022/02/24/this%E6%8C%87%E5%90%91/"/>
    <url>/2022/02/24/this%E6%8C%87%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h4 id="一、如何判断函数中-this-指向"><a href="#一、如何判断函数中-this-指向" class="headerlink" title="一、如何判断函数中 this 指向"></a>一、如何判断函数中 this 指向</h4><ol><li>检查 <code>.</code> 左边是谁调用这个函数。例如 <code>xiaoming.getName();</code> getName 函数里面有this，然后 <code>.</code> 旁边是 xiaoming，那么 this 就是指向 xiaoming。这种叫做 Implicit Binding（隐式绑定）</li><li>如果 <code>.</code> 左边不是一个对象，那就检查有没有用到 bind、apply、call 这三个方法，如果有，this 就指向这三个方法的第一个参数。这种叫做 explicit binding（显式绑定）</li><li>如果前两个条件不满足，检查是否通过 new 关键字调用该函数，如果是，this 就指向 new 创建的对象。这种叫做 new binding（new 绑定）</li><li>如果前三个条件不满足，检查 this 所在的函数是否为箭头函数，如果是，this 就指向箭头函数所绑定的对象（<strong>箭头函数中没有this，它的this继承外部函数的作用域。箭头函数在哪个位置定义，里面的this就跟这个位置的this指向相同</strong>）。这种叫做 lexical binding（词汇绑定）</li><li>以上条件都不满足，如果不是严格模式，this 指向 window 对象，严格模式为 undefined</li></ol><h4 id="二、bind、apply、call-三者之间的区别"><a href="#二、bind、apply、call-三者之间的区别" class="headerlink" title="二、bind、apply、call 三者之间的区别"></a>二、bind、apply、call 三者之间的区别</h4><ul><li>联系：</li></ul><ol><li>都可以改变函数的 this 指向</li><li>第一个参数都是 this 要指向的对象</li><li>都可以利用后续参数传参</li></ol><ul><li>区别：</li></ul><ol><li>call 和 apply 都是对函数直接调用（立即调用函数），而 bind 方法会返回一个函数，再通过()调用</li><li>call 和 bind 传入的参数和调用方法中的形参一一对应，而 apply 需要将一一对应的参数封装为一个数组。bind 可以向 call 一样在对象后面跟上参数，也可以在返回函数调用时传入参数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">name, age</span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(name, age)<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)<br>&#125;<br>fn(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">18</span>);    <span class="hljs-comment">// a 18 window</span><br><span class="hljs-keyword">let</span> obj = &#123;&#125;;<br>fn.call(obj, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">19</span>);  <span class="hljs-comment">// b 19 obj</span><br>fn.apply(obj, [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">20</span>]);   <span class="hljs-comment">// c 20 obj</span><br>fn.bind(obj)(<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">21</span>);  <span class="hljs-comment">// d 21 obj</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>this指向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack打包ts</title>
    <link href="/2022/02/24/webpack%E6%89%93%E5%8C%85ts/"/>
    <url>/2022/02/24/webpack%E6%89%93%E5%8C%85ts/</url>
    
    <content type="html"><![CDATA[<h3 id="一、基本使用"><a href="#一、基本使用" class="headerlink" title="一、基本使用"></a>一、基本使用</h3><h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h4><figure class="highlight powershell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs powershell">npm i <span class="hljs-literal">-D</span> webpack webpack<span class="hljs-literal">-cli</span> typescript ts<span class="hljs-literal">-loader</span><br></code></pre></td></tr></table></figure><h4 id="2-webpack配置"><a href="#2-webpack配置" class="headerlink" title="2. webpack配置"></a>2. webpack配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><br><span class="hljs-comment">// 引入一个包</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-comment">// webpack 中的所有配置信息都应该写在 module.exports 中</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br><br>    <span class="hljs-comment">// 指定入口文件</span><br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/index.ts&quot;</span>,<br>    <br>    <span class="hljs-comment">// 指定打包文件所在的位置</span><br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-comment">// 打包文件目录</span><br>        <span class="hljs-attr">path</span>: path.resolve(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>        <span class="hljs-comment">// 打包文件名</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span><br>    &#125;,<br>    <br>    <span class="hljs-comment">// 指定 webpack 打包时要使用的模块</span><br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-comment">// 指定要加载的规则</span><br>        <span class="hljs-attr">rules</span>: [<br>            &#123;<br>                <span class="hljs-comment">// 指定规则生效的文件</span><br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.ts$/</span>,<br>                <span class="hljs-comment">// 要使用的 loader</span><br>                use: <span class="hljs-string">&#x27;ts-loader&#x27;</span>,<br>                <span class="hljs-comment">// 要排除的文件</span><br>                <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node-modules/</span><br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-ts编译配置"><a href="#3-ts编译配置" class="headerlink" title="3. ts编译配置"></a>3. ts编译配置</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// tsconfig.json</span><br>&#123;<br>  <span class="hljs-attr">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;module&quot;</span>: <span class="hljs-string">&quot;ES2015&quot;</span>,<br>    <span class="hljs-attr">&quot;target&quot;</span>: <span class="hljs-string">&quot;ES2015&quot;</span>,<br>    <span class="hljs-attr">&quot;strict&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-打包命令配置"><a href="#4-打包命令配置" class="headerlink" title="4. 打包命令配置"></a>4. 打包命令配置</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// package.json 文件的 scripts 配置中添加 &quot;build&quot;: &quot;webpack&quot;，打包时直接执行 npm run build 即可</span><br>&#123;<br>    <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行 npm run build 打包 ts 文件</li></ul><h3 id="二、进阶使用"><a href="#二、进阶使用" class="headerlink" title="二、进阶使用"></a>二、进阶使用</h3><h4 id="1-html-webpack-plugin"><a href="#1-html-webpack-plugin" class="headerlink" title="1. html-webpack-plugin"></a>1. html-webpack-plugin</h4><ul><li>作用：自动生成成 html 并引用相关资源（css、js…）</li><li>安装：<code>npm i -D html-webpack-plugin</code></li><li>配置：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><br><span class="hljs-comment">// 引入 html 插件</span><br><span class="hljs-keyword">const</span> HTMLWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    其他配置参照基本使用，已省略</span><br><span class="hljs-comment">*/</span><br><br>  <span class="hljs-comment">// 配置 webpack 插件</span><br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> HTMLWebpackPlugin(&#123;<br>       <span class="hljs-comment">// 自定义 html 标题</span><br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;自定义title&quot;</span>,<br>      <span class="hljs-comment">// 指定 html 模板</span><br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;./src/index.html&quot;</span><br>    &#125;)<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-webpack-dev-server"><a href="#2-webpack-dev-server" class="headerlink" title="2. webpack-dev-server"></a>2. webpack-dev-server</h4><ul><li>作用：让项目在 webpack 内置服务器中运行，可根据项目改变自动刷新</li><li>安装：<code>npm i -D webpack-dev-server</code></li><li>配置：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// package.json 的 scripts 配置项中添加 start 命令后，通过 npm run start 启动即可</span><br><br>&#123;<br>    <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;start&quot;</span>: <span class="hljs-string">&quot;webpack serve --open chrome.exe&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-clean-webpack-plugin"><a href="#3-clean-webpack-plugin" class="headerlink" title="3. clean-webpack-plugin"></a>3. clean-webpack-plugin</h4><ul><li>作用：清除打包后的 dist 目录，保证打包后的文件为最新的。不使用该插件打包文件会进行替换，使用插件是先删除原文件再创建打包文件</li><li>安装：<code>npm i -D clean-webpack-plugin</code></li><li>配置：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><br><span class="hljs-comment">// 引入clean插件</span><br><span class="hljs-keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;clean-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> CleanWebpackPlugin()<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-设置引用模块"><a href="#4-设置引用模块" class="headerlink" title="4. 设置引用模块"></a>4. 设置引用模块</h4><ul><li>作用：设置 ts 文件可以作为模块使用</li><li>配置：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>   <span class="hljs-comment">// 设置引用模块</span><br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-comment">// 表示 ts, js 文件可以作为模块使用，不设置 ts 文件作为模块使用时会报错</span><br>    <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&#x27;.ts&#x27;</span>, <span class="hljs-string">&#x27;.js&#x27;</span>]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-babel-解决兼容性问题"><a href="#5-babel-解决兼容性问题" class="headerlink" title="5. babel 解决兼容性问题"></a>5. babel 解决兼容性问题</h4><ul><li>作用：将采用 ECMAScript 2015+ 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中</li><li>安装：<code>npm i -D @babel/core @babel/preset-env babel-loader core-js</code></li><li>配置：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/index.ts&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.resolve(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>,<br>    <br>    <span class="hljs-comment">// 告诉 webpack 不使用箭头函数。高版本 webpack 打包后的 js 中，包含 webpack 提供的箭头函数（非用户定义），不能兼容 ie</span><br>    <span class="hljs-attr">environment</span>: &#123;<br>      <span class="hljs-attr">arrowFunction</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">const</span>: <span class="hljs-literal">false</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [&#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.ts$/</span>,<br>      <span class="hljs-comment">// 要使用的 loader，数组从后往前执行</span><br>      use: [<br>        <span class="hljs-comment">// 配合babel</span><br>        &#123;<br>          <span class="hljs-comment">// 指定加载器</span><br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>          <span class="hljs-comment">// 设置babel</span><br>          <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-comment">// 设置预定义的环境</span><br>            <span class="hljs-attr">presets</span>: [<br>              [<br>                <span class="hljs-comment">// 指定环境插件</span><br>                <span class="hljs-string">&quot;@babel/preset-env&quot;</span>,<br>                <span class="hljs-comment">// 配置信息</span><br>                &#123;<br>                  <span class="hljs-comment">// 指定兼容的浏览器版本</span><br>                  <span class="hljs-attr">targets</span>: &#123;<br>                    <span class="hljs-comment">// 兼容到 chrome 58 版本，和 ie 11 版本</span><br>                    <span class="hljs-string">&quot;chrome&quot;</span>: <span class="hljs-string">&quot;58&quot;</span>,<br>                    <span class="hljs-string">&quot;ie&quot;</span>: <span class="hljs-string">&quot;11&quot;</span><br>                  &#125;,<br>                  <span class="hljs-comment">// 指定 corejs 版本</span><br>                  <span class="hljs-string">&quot;corejs&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,<br>                  <span class="hljs-comment">// 使用 corejs 的方式，&quot;usage&quot;表示按需加载</span><br>                  <span class="hljs-string">&quot;useBuiltIns&quot;</span>: <span class="hljs-string">&quot;usage&quot;</span><br>                &#125;<br>              ]<br>            ]<br>          &#125;<br>        &#125;,<br>        <span class="hljs-string">&#x27;ts-loader&#x27;</span><br>      ],<br>      <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node-modules/</span><br>    &#125;]<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> HTMLWebpackPlugin(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;./src/index.html&quot;</span><br>    &#125;),<br>    <span class="hljs-keyword">new</span> CleanWebpackPlugin()<br>  ],<br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&#x27;.ts&#x27;</span>, <span class="hljs-string">&#x27;.js&#x27;</span>]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ts</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ts数据类型</title>
    <link href="/2022/02/24/ts%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2022/02/24/ts%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="1-number"><a href="#1-number" class="headerlink" title="1. number"></a>1. number</h4><ul><li>所有数字都是浮点数，类型为 number，支持二进制、八进制、十进制和十六进制</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 十进制</span><br><span class="hljs-keyword">let</span> decimal: <span class="hljs-built_in">number</span> = <span class="hljs-number">6</span>;<br><span class="hljs-comment">// 十六进制</span><br><span class="hljs-keyword">let</span> hex: <span class="hljs-built_in">number</span> = <span class="hljs-number">0xf00d</span>;<br><span class="hljs-comment">// 二进制</span><br><span class="hljs-keyword">let</span> binary: <span class="hljs-built_in">number</span> = <span class="hljs-number">0b1010</span>;<br><span class="hljs-comment">// 八进制</span><br><span class="hljs-keyword">let</span> octal: <span class="hljs-built_in">number</span> = <span class="hljs-number">0o744</span>;<br></code></pre></td></tr></table></figure><h4 id="2-string"><a href="#2-string" class="headerlink" title="2. string"></a>2. string</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> color: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;blue&quot;</span>;<br>color = <span class="hljs-string">&#x27;red&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="3-boolean"><a href="#3-boolean" class="headerlink" title="3. boolean"></a>3. boolean</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> isDone: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><h4 id="4-enum"><a href="#4-enum" class="headerlink" title="4. enum"></a>4. enum</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-built_in">enum</span> Color &#123;<br>    Red,<br>    Green,<br>    Blue<br>&#125;<br><span class="hljs-keyword">let</span> c: Color = Color.Green;<br></code></pre></td></tr></table></figure><h4 id="5-array"><a href="#5-array" class="headerlink" title="5. array"></a>5. array</h4><ul><li>数组定义方式一：<code>元素类型[]</code></li><li>数组定义方式二：<code>Array&lt;元素类型&gt;</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> list: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> list: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure><h4 id="6-tuple"><a href="#6-tuple" class="headerlink" title="6. tuple"></a>6. tuple</h4><ul><li>元组，表示已知元素数量和类型的数组</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> x: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>] = [<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-number">10</span>];<br></code></pre></td></tr></table></figure><h4 id="7-any"><a href="#7-any" class="headerlink" title="7. any"></a>7. any</h4><ul><li>表示任意类型。会关闭类型检测，不建议使用</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> d: <span class="hljs-built_in">any</span> = <span class="hljs-number">4</span>;<br>d = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>d = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><h4 id="8-null-和-undefined"><a href="#8-null-和-undefined" class="headerlink" title="8. null 和 undefined"></a>8. null 和 undefined</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> n: <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">let</span> u: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span>;<br></code></pre></td></tr></table></figure><h4 id="9-unknown"><a href="#9-unknown" class="headerlink" title="9. unknown"></a>9. unknown</h4><ul><li>unknown 和 any 的主要区别在于 unknown 在操作前会对类型进行检查，而 any 不会进行类型检查</li><li>所有类型都可以赋值给 unknown，unknown 类型只能赋值给 any 和 unknown 类型</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> notSure: unknown = <span class="hljs-number">4</span>;<br>notSure = <span class="hljs-string">&#x27;hello&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="10-void"><a href="#10-void" class="headerlink" title="10. void"></a>10. void</h4><ul><li>表示没有任何类型。通常一个函数没有返回值时，其返回值类型为 void</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> unusable: <span class="hljs-built_in">void</span> = <span class="hljs-literal">undefined</span>;<br></code></pre></td></tr></table></figure><h4 id="11-never"><a href="#11-never" class="headerlink" title="11. never"></a>11. never</h4><ul><li>表示永远不存在的值的类型。never类型是那些<code>总是会抛出异常</code>或<code>根本就不会有返回值</code>的函数表达式或箭头函数表达式的返回值类型</li><li>never 和 null 的区别在于 void 可以被赋值为 null 和undefined 类型，never 则是一个不包含值的类型。拥有 void 返回值类型的函数能正常运行，拥有 never 返回值类型的函数无法正常返回，无法终止，或会抛出异常</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">error</span>(<span class="hljs-params">message: <span class="hljs-built_in">string</span></span>): <span class="hljs-title">never</span> </span>&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(message);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="12-symbol"><a href="#12-symbol" class="headerlink" title="12. symbol"></a>12. symbol</h4><ul><li>ES6 中新增数据类型，用来表示独一无二的值</li><li>在使用 symbol 时，必须在 tsconfig.json 的 libs 字段中 ES 版本至少为 ES2015 或 ES6</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> sym1:symbol = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br><span class="hljs-keyword">const</span> sym2:symbol = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(sym1 === sym2); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="13-bigint"><a href="#13-bigint" class="headerlink" title="13. bigint"></a>13. bigint</h4><ul><li>ES11 中新增数据类型，可以安全地存储和操作大整数</li><li>在使用 bigint 时，必须在 tsconfig.json 的 libs 字段中 ES 版本至少为 ES2020</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> max1 = <span class="hljs-built_in">Number</span>.MAX_SAFE_INTEGER;   <span class="hljs-comment">// 2**53-1</span><br><span class="hljs-built_in">console</span>.log(max1 + <span class="hljs-number">1</span> === max1 + <span class="hljs-number">2</span>); <span class="hljs-comment">// true</span><br><span class="hljs-keyword">const</span> max2 = <span class="hljs-built_in">BigInt</span>(<span class="hljs-built_in">Number</span>.MAX_SAFE_INTEGER); <br><span class="hljs-built_in">console</span>.log(max2 + <span class="hljs-number">1n</span> === max2 + <span class="hljs-number">2n</span>);   <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="14-object、Object-和-类型"><a href="#14-object、Object-和-类型" class="headerlink" title="14. object、Object 和 {} 类型"></a>14. object、Object 和 {} 类型</h4><ul><li>object 用于表示非原始类型，也就是除number、string、boolean、symbol、bigint、null 或 undefined 之外的类型</li><li>Object 和 {} 一样，代表所有拥有 toString、hasOwnProperty 方法的类型。所有原始类型、非原始类型都可以赋给 Object（严格模式下 null 和 undefined 不可以）</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// object 类型</span><br><span class="hljs-keyword">let</span> objectCase: <span class="hljs-built_in">object</span>;<br>objectCase = <span class="hljs-number">1</span>; <span class="hljs-comment">// error</span><br>objectCase = <span class="hljs-string">&quot;a&quot;</span>; <span class="hljs-comment">// error</span><br>objectCase = <span class="hljs-literal">true</span>; <span class="hljs-comment">// error</span><br>objectCase = <span class="hljs-literal">null</span>; <span class="hljs-comment">// error</span><br>objectCase = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// error</span><br>objectCase = &#123;&#125;; <span class="hljs-comment">// ok</span><br><span class="hljs-comment">// Object 类型</span><br><span class="hljs-keyword">let</span> ObjectCase: <span class="hljs-built_in">Object</span>;<br>ObjectCase = <span class="hljs-number">1</span>; <span class="hljs-comment">// ok</span><br>ObjectCase = <span class="hljs-string">&quot;a&quot;</span>; <span class="hljs-comment">// ok</span><br>ObjectCase = <span class="hljs-literal">true</span>; <span class="hljs-comment">// ok</span><br>ObjectCase = <span class="hljs-literal">null</span>; <span class="hljs-comment">// error</span><br>ObjectCase = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// error</span><br>ObjectCase = &#123;&#125;; <span class="hljs-comment">// ok</span><br><span class="hljs-comment">// &#123;&#125; 类型</span><br><span class="hljs-keyword">let</span> simpleCase: &#123;&#125;;<br>simpleCase = <span class="hljs-number">1</span>; <span class="hljs-comment">// ok</span><br>simpleCase = <span class="hljs-string">&quot;a&quot;</span>; <span class="hljs-comment">// ok</span><br>simpleCase = <span class="hljs-literal">true</span>; <span class="hljs-comment">// ok</span><br>simpleCase = <span class="hljs-literal">null</span>; <span class="hljs-comment">// error</span><br>simpleCase = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// error</span><br>simpleCase = &#123;&#125;; <span class="hljs-comment">// ok</span><br></code></pre></td></tr></table></figure><h4 id="15-字面量"><a href="#15-字面量" class="headerlink" title="15. 字面量"></a>15. 字面量</h4><ul><li>可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> color: <span class="hljs-string">&#x27;red&#x27;</span> | <span class="hljs-string">&#x27;blue&#x27;</span> | <span class="hljs-string">&#x27;black&#x27;</span> = <span class="hljs-string">&#x27;red&#x27;</span>;<br><span class="hljs-keyword">let</span> num: <span class="hljs-number">1</span> = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h4 id="15-类型断言"><a href="#15-类型断言" class="headerlink" title="15. 类型断言"></a>15. 类型断言</h4><ul><li>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 1. as 语法</span><br><span class="hljs-keyword">let</span> someValue: unknown = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><span class="hljs-keyword">let</span> strLength: <span class="hljs-built_in">number</span> = (someValue <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>).length;<br><span class="hljs-comment">// 2. 尖括号语法</span><br><span class="hljs-keyword">let</span> someValue: unknown = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><span class="hljs-keyword">let</span> strLength: <span class="hljs-built_in">number</span> = (&lt;<span class="hljs-built_in">string</span>&gt;someValue).length;<br></code></pre></td></tr></table></figure><blockquote><p>以上两种方式虽然没有任何区别，但是尖括号格式会与 react 中 JSX 产生语法冲突，因此更推荐使用 as 语法</p></blockquote><h4 id="16-非空断言"><a href="#16-非空断言" class="headerlink" title="16. 非空断言"></a>16. 非空断言</h4><ul><li>使用 <code>!</code> 可以用于断言操作对象是非 null 和非 undefined 类型 </li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> flag: <span class="hljs-literal">null</span> | <span class="hljs-literal">undefined</span> | <span class="hljs-built_in">string</span>;<br>flag!.toString();   <span class="hljs-comment">// ok</span><br>flag.toString();    <span class="hljs-comment">// error</span><br></code></pre></td></tr></table></figure><h4 id="17-类型别名"><a href="#17-类型别名" class="headerlink" title="17. 类型别名"></a>17. 类型别名</h4><ul><li>给一个类型起一个新名字</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> flag = <span class="hljs-built_in">string</span>;<br><span class="hljs-comment">// type flag = string | number;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">value: flag</span>) </span>&#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="18-联合类型"><a href="#18-联合类型" class="headerlink" title="18. 联合类型"></a>18. 联合类型</h4><ul><li>联合类型表示取值可以为多种类型中的一种。未赋值时联合类型上只能访问两个类型共有的属性和方法</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">let</span> name: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>;<br><span class="hljs-built_in">console</span>.log(name.toString());   <span class="hljs-comment">// 报错，name 赋值前不能使用</span><br>name = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">console</span>.log(name.toFixed(<span class="hljs-number">2</span>));   <span class="hljs-comment">// 1.00</span><br>name = <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(name.length);   <span class="hljs-comment">// 5</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span></span>): <span class="hljs-title">void</span> </span>&#123;<br>  name.toString();<br>  name.toFixed(<span class="hljs-number">2</span>);  <span class="hljs-comment">// 报错，name 上不存在 toFixed 方法</span><br>  name.length;  <span class="hljs-comment">// 报错，name 上不存在 length 属性</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="19-交叉类型"><a href="#19-交叉类型" class="headerlink" title="19. 交叉类型"></a>19. 交叉类型</h4><ul><li>交叉类型是将多个类型合并为一个类型。通过 &amp; 运算符可以将现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">type</span> Flag1 = &#123; <span class="hljs-attr">x</span>: <span class="hljs-built_in">number</span> &#125;;<br><span class="hljs-keyword">type</span> Flag2 = Flag1 &amp; &#123; <span class="hljs-attr">y</span>: <span class="hljs-built_in">string</span> &#125;;<br><br><span class="hljs-keyword">let</span> flag3: Flag2 = &#123;<br>  <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">y</span>: <span class="hljs-string">&quot;hello&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>参考资料：<br><a href="https://juejin.cn/post/7031787942691471396#heading-21">掘金：最全的TypeScript学习指南</a><br><a href="https://www.tslang.cn/docs/handbook/basic-types.html">TypeScript 官方文档</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ts</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>bootstrap响应式布局</title>
    <link href="/2022/02/14/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
    <url>/2022/02/14/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="一、响应式开发"><a href="#一、响应式开发" class="headerlink" title="一、响应式开发"></a>一、响应式开发</h3><h4 id="1、响应式开发原理"><a href="#1、响应式开发原理" class="headerlink" title="1、响应式开发原理"></a>1、响应式开发原理</h4><ul><li>就是使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同的设备</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91%E5%8E%9F%E7%90%86.png" alt="响应式开发原理"></p><h4 id="2、响应式布局容器"><a href="#2、响应式布局容器" class="headerlink" title="2、响应式布局容器"></a>2、响应式布局容器</h4><p>响应式需要一个父级作为布局容器，来配合子级元素来实现变化效果。原理就是在不同屏幕下，通过媒体查询来改变布局容器的大小，再改变里面子元素的排列方式和大小，从而实现不同屏幕下，看到不同的页面布局和样式变化</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E5%AE%B9%E5%99%A8.png" alt="响应式布局容器"></p><h3 id="二、bootstrap前端框架"><a href="#二、bootstrap前端框架" class="headerlink" title="二、bootstrap前端框架"></a>二、bootstrap前端框架</h3><h4 id="1、bootstrap简介"><a href="#1、bootstrap简介" class="headerlink" title="1、bootstrap简介"></a>1、bootstrap简介</h4><p>bootstrap来自twitter，是基于html、css和javascript的前端框架，它简洁灵活，使得web开发更加快捷</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/bootstrap%E7%AE%80%E4%BB%8B_1.png" alt="bootstrap简介_1"></p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/bootstrap%E7%AE%80%E4%BB%8B_2.png" alt="bootstrap简介_2"></p><h4 id="2、bootstrap基本使用"><a href="#2、bootstrap基本使用" class="headerlink" title="2、bootstrap基本使用"></a>2、bootstrap基本使用</h4><p>bootstrap使用四部曲：</p><ol><li><p>创建文件夹结构<br><img src="https://gitee.com/huqian025/my-images/raw/master/css/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/bootstrap_1.png" alt="bootstrap_1"></p></li><li><p>创建html骨架结构<br><img src="https://gitee.com/huqian025/my-images/raw/master/css/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/bootstrap_2.png" alt="bootstrap_2"></p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Bootstrap 101 Template<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Bootstrap --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 --&gt;</span><br><span class="hljs-comment">&lt;!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 --&gt;</span><br><span class="hljs-comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="hljs-comment">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/html5shiv@3.7.3/dist/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/respond.js@1.4.2/dest/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">&lt;![endif]--&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>引入相关样式文件<br><img src="https://gitee.com/huqian025/my-images/raw/master/css/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/bootstrap_3.png" alt="bootstrap_3"></p></li><li><p>书写内容<br><img src="https://gitee.com/huqian025/my-images/raw/master/css/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/bootstrap_4.png" alt="bootstrap_4"></p></li></ol><h4 id="3、布局容器"><a href="#3、布局容器" class="headerlink" title="3、布局容器"></a>3、布局容器</h4><p>bootstrap需要为页面内容和栅格系统包裹一个.container容器，bootstrap预先定义好了这个类，叫.container</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/bootstrap%E5%B8%83%E5%B1%80%E5%AE%B9%E5%99%A8.png" alt="bootstrap布局容器"></p><h3 id="三、bootstrap栅格系统"><a href="#三、bootstrap栅格系统" class="headerlink" title="三、bootstrap栅格系统"></a>三、bootstrap栅格系统</h3><h4 id="1、栅格系统简介"><a href="#1、栅格系统简介" class="headerlink" title="1、栅格系统简介"></a>1、栅格系统简介</h4><ul><li>栅格系统是指将页面布局划分为等宽的列，然后通过列数的定义来模块化页面布局。</li><li>bootstrap提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统自动分为12列</li><li>bootstrap里面的container宽度是固定的，但是不同屏幕下，container的宽度不同，我们再把container划分为12等份</li></ul><h4 id="2、栅格选项参数"><a href="#2、栅格选项参数" class="headerlink" title="2、栅格选项参数"></a>2、栅格选项参数</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/%E6%A0%85%E6%A0%BC%E9%80%89%E9%A1%B9%E5%8F%82%E6%95%B0.png" alt="栅格选项参数"></p><ul><li>每一列默认有左右15px的padding</li><li>如果孩子的份数相加等于12，则孩子能占满整个container的宽度</li><li>如果孩子的份数相加小于12，则不会占满整个container的宽度，会有空白</li><li>如果孩子的份数相加大于12，则超出的那一列会另起一行显示</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/%E6%A0%85%E6%A0%BC%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B.png" alt="栅格使用示例"></p><h4 id="3、列嵌套"><a href="#3、列嵌套" class="headerlink" title="3、列嵌套"></a>3、列嵌套</h4><p>栅格系统内置的栅格系统将内容再次嵌套，简单理解就是一个列内在分成若干份小列</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/%E5%88%97%E5%B5%8C%E5%A5%97.png" alt="列嵌套"></p><ul><li>列嵌套最好加一行row，这样可以取消父元素的padding值，而且高度自动和父级一样高</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/%E5%88%97%E5%B5%8C%E5%A5%97%E7%A4%BA%E4%BE%8B.png" alt="列嵌套示例"></p><h4 id="4、列偏移"><a href="#4、列偏移" class="headerlink" title="4、列偏移"></a>4、列偏移</h4><p>列偏移使用.col-md-offset-*类可以将列向右偏移，这些类实际是为当前元素添加了左侧的边距（margin）</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/%E5%88%97%E5%81%8F%E7%A7%BB%E7%A4%BA%E4%BE%8B.png" alt="列偏移示例"></p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/%E5%88%97%E5%81%8F%E7%A7%BB%E7%A4%BA%E4%BE%8B%E6%95%88%E6%9E%9C.png" alt="列偏移示例效果"></p><h4 id="5、列排序"><a href="#5、列排序" class="headerlink" title="5、列排序"></a>5、列排序</h4><p>通过使用.col-md-push-*和.col-md-pull-*类就可以很容易的改变列的顺序</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/%E5%88%97%E6%8E%92%E5%BA%8F.png" alt="列排序"></p><h4 id="6、响应式工具"><a href="#6、响应式工具" class="headerlink" title="6、响应式工具"></a>6、响应式工具</h4><p>为了加快对移动设备友好的页面开发工作，利用媒体查询功能，并使用这些工具类可以方便的针对不同的设备展示或隐藏页面内容</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B7%A5%E5%85%B7.png" alt="响应式工具"></p><p>与之相反的是visible-xs visible-sm visible-md visible-lg是显示某个页面内容</p>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bootstrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rem适配布局</title>
    <link href="/2022/02/14/rem%E9%80%82%E9%85%8D%E5%B8%83%E5%B1%80/"/>
    <url>/2022/02/14/rem%E9%80%82%E9%85%8D%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="一、rem基础"><a href="#一、rem基础" class="headerlink" title="一、rem基础"></a>一、rem基础</h3><ul><li>rem（root em）是一个相对单位，类似与em，em是父元素字体大小，rem是html元素字体大小<ul><li>比如，根元素（html）设置font-size=12px，非根元素设置width: 2rem; 则换成px表示就是24px</li></ul></li><li>rem的优点就是可以通过修改html里面的文字大小来改变页面中元素的大小，可以整体控制</li></ul><h3 id="二、媒体查询"><a href="#二、媒体查询" class="headerlink" title="二、媒体查询"></a>二、媒体查询</h3><h4 id="1、什么是媒体查询"><a href="#1、什么是媒体查询" class="headerlink" title="1、什么是媒体查询"></a>1、什么是媒体查询</h4><ul><li>媒体查询（Media Query）是css3新语法，使用@media查询，可以针对不同的媒体类型定义不同的样式</li><li><code>@media可以针对不同的屏幕尺寸设置不同的样式</code></li><li>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面</li></ul><h4 id="2、语法规范"><a href="#2、语法规范" class="headerlink" title="2、语法规范"></a>2、语法规范</h4><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> mediatype <span class="hljs-keyword">and</span>|<span class="hljs-keyword">not</span>|<span class="hljs-keyword">only</span> (media feature) &#123;<br>    css-<span class="hljs-selector-tag">code</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>用@media开头，注意@符号</li><li>mediatype 媒体类型</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/rem%E9%80%82%E9%85%8D%E5%B8%83%E5%B1%80/%E5%AA%92%E4%BD%93%E7%B1%BB%E5%9E%8B.png" alt="媒体类型"></p><ul><li>关键字 and not only</li><li>media feature 媒体特性，必须有小括号包含</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/rem%E9%80%82%E9%85%8D%E5%B8%83%E5%B1%80/%E5%AA%92%E4%BD%93%E7%89%B9%E6%80%A7.png" alt="媒体特性"></p><h4 id="3、媒体查询-rem实现元素动态大小变化"><a href="#3、媒体查询-rem实现元素动态大小变化" class="headerlink" title="3、媒体查询+rem实现元素动态大小变化"></a>3、媒体查询+rem实现元素动态大小变化</h4><ul><li>rem单位是跟着html走的，有了rem页面元素可以设置不同大小尺寸</li><li>媒体查询可以根据不同设备宽度来修改样式</li><li>媒体查询+rem就可以实现不同设备宽度，页面元素大小的动态变化<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">320px</span>) &#123;<br>    <span class="hljs-selector-tag">html</span> &#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">50px</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">640px</span>) &#123;<br>    <span class="hljs-selector-tag">html</span> &#123;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100px</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-selector-class">.top</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">1rem</span>;<br>    <span class="hljs-attribute">font-size</span>: .<span class="hljs-number">5rem</span>;<br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1rem</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="4、引入资源"><a href="#4、引入资源" class="headerlink" title="4、引入资源"></a>4、引入资源</h4><ul><li>当样式比较繁多的时候，我们可以针对不同的媒体使用不同的stylesheets（样式表）</li><li>原理：在link中判断设备的尺寸，然后引入不同的css文件<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 建议媒体查询从小到大 --&gt;</span><br><span class="hljs-comment">&lt;!-- 针对不同的屏幕尺寸，调用不同的css文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style320.css&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;screen and (min-width: 320px)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style640.css&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;screen and (min-width: 640px)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="三、less基础"><a href="#三、less基础" class="headerlink" title="三、less基础"></a>三、less基础</h3><h4 id="1、css弊端"><a href="#1、css弊端" class="headerlink" title="1、css弊端"></a>1、css弊端</h4><p>css是一门非程序式语言，没有变量、函数、SCOPE（作用域）等概念</p><ul><li>css需要书写大量看似没有逻辑的代码，css冗余度是比较高的</li><li>不方便维护及扩展，不利于复用</li><li>css没有很好的计算能力</li><li>非前端开发工程师来讲，往往因为缺少css编写经验而很难写出组织良好且易于维护的css代码项目</li></ul><h4 id="2、less介绍"><a href="#2、less介绍" class="headerlink" title="2、less介绍"></a>2、less介绍</h4><p>Less（Leaner Style Sheets）是一门css预处理语言，它扩展了css的动态特性</p><h4 id="3、less使用"><a href="#3、less使用" class="headerlink" title="3、less使用"></a>3、less使用</h4><p>首先新建一个后缀名为.less的文件，在这个less文件里面书写less语句</p><h5 id="3-1、less变量"><a href="#3-1、less变量" class="headerlink" title="3.1、less变量"></a>3.1、less变量</h5><p><code>@变量名: 变量值;</code></p><p>变量命名规范：</p><ul><li><p>必须有@为前缀</p></li><li><p>不能包含特殊字符</p></li><li><p>不能以数字开头</p></li><li><p>大小写敏感</p></li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/rem%E9%80%82%E9%85%8D%E5%B8%83%E5%B1%80/less%E5%8F%98%E9%87%8F.png" alt="less变量"></p><h5 id="3-2、less编译"><a href="#3-2、less编译" class="headerlink" title="3.2、less编译"></a>3.2、less编译</h5><ul><li>方法一：vsCode安装easy less插件，保存less会自动编译为同目录下同名css</li><li>方法二：通过npm安装less（<code>全局：npm install less -g，局部：npm install less --save-dev</code> ），编译<code>lessc less文件名 css文件名</code>（例如：<code>lessc bootstrap.less bootstrap.css</code>）</li></ul><h5 id="3-3、less嵌套"><a href="#3-3、less嵌套" class="headerlink" title="3.3、less嵌套"></a>3.3、less嵌套</h5><ul><li>子元素的样式直接写在父元素里面</li><li>如果有伪类、交集选择器、伪元素选择器，内层选择器的前面需要加&amp;</li><li>内层选择器的前面没有加&amp;符号，则它被解析为父选择器的后代</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/rem%E9%80%82%E9%85%8D%E5%B8%83%E5%B1%80/less%E5%B5%8C%E5%A5%97.png" alt="less嵌套"></p><h5 id="3-4、less运算"><a href="#3-4、less运算" class="headerlink" title="3.4、less运算"></a>3.4、less运算</h5><p>任何数字、颜色或者变量都可以参与运算，less提供了加（+）、减（-）、乘（*）、除（/）算术运算</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/rem%E9%80%82%E9%85%8D%E5%B8%83%E5%B1%80/less%E8%BF%90%E7%AE%97.png" alt="less运算"></p><p><strong>注意：</strong></p><ol><li>运算符的左右两侧必须敲一个空格隔开</li><li>两个数参与运算，如果只有一个数有单位，则最后的结果就以这个单位为准</li><li>两个数参与运算，如果2个数都有单位，而且它们的单位不一样，最后的结果以第一个单位为准</li></ol><h3 id="四、rem适配方案"><a href="#四、rem适配方案" class="headerlink" title="四、rem适配方案"></a>四、rem适配方案</h3><h4 id="1、rem实际开发适配方案"><a href="#1、rem实际开发适配方案" class="headerlink" title="1、rem实际开发适配方案"></a>1、rem实际开发适配方案</h4><ol><li>按照设计稿与设备宽度的比例，动态计算并设置html根标签的font-size大小（媒体查询）</li><li>css中，设计稿元素的宽、高、相对位置等取值，按照同等比例换算成rem为单位的值</li></ol><h4 id="2、rem适配方案技术使用（市场主流）"><a href="#2、rem适配方案技术使用（市场主流）" class="headerlink" title="2、rem适配方案技术使用（市场主流）"></a>2、rem适配方案技术使用（市场主流）</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/rem%E9%80%82%E9%85%8D%E5%B8%83%E5%B1%80/rem%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88%E6%8A%80%E6%9C%AF%E4%BD%BF%E7%94%A8.png" alt="rem适配方案技术使用"></p><h4 id="3、rem适配方案1（rem-媒体查询-less）"><a href="#3、rem适配方案1（rem-媒体查询-less）" class="headerlink" title="3、rem适配方案1（rem+媒体查询+less）"></a>3、rem适配方案1（rem+媒体查询+less）</h4><h5 id="3-1、设计稿常见尺寸宽度"><a href="#3-1、设计稿常见尺寸宽度" class="headerlink" title="3.1、设计稿常见尺寸宽度"></a>3.1、设计稿常见尺寸宽度</h5><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/rem%E9%80%82%E9%85%8D%E5%B8%83%E5%B1%80/%E8%AE%BE%E8%AE%A1%E7%A8%BF%E5%B8%B8%E8%A7%81%E5%B0%BA%E5%AF%B8%E5%AE%BD%E5%BA%A6.png" alt="设计稿常见尺寸宽度"></p><h5 id="3-2、动态设置html标签font-size大小"><a href="#3-2、动态设置html标签font-size大小" class="headerlink" title="3.2、动态设置html标签font-size大小"></a>3.2、动态设置html标签font-size大小</h5><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/rem%E9%80%82%E9%85%8D%E5%B8%83%E5%B1%80/%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AEhtml%E6%A0%87%E7%AD%BEfont-size.png" alt="动态设置html标签font-size"></p><h5 id="3-3、元素大小取值方法"><a href="#3-3、元素大小取值方法" class="headerlink" title="3.3、元素大小取值方法"></a>3.3、元素大小取值方法</h5><ul><li>最后的公式：页面元素的rem值=页面元素值（px）/（屏幕宽度 / 划分的份数）</li><li>屏幕宽度 / 划分的份数，就是html的font-size大小，页面元素的rem值=页面元素值（px）/ html的font-size字体大小</li></ul><h4 id="4、rem适配方案2（flexible-js-rem）"><a href="#4、rem适配方案2（flexible-js-rem）" class="headerlink" title="4、rem适配方案2（flexible.js+rem）"></a>4、rem适配方案2（flexible.js+rem）</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/rem%E9%80%82%E9%85%8D%E5%B8%83%E5%B1%80/flexible.js+rem.png" alt="flexible.js+rem"></p><p>vsCode px转换rem插件（cssrem）</p><ul><li>默认html的font-size为16px</li><li>在setting.json中添加<code>&quot;cssrem.rootFontSize&quot;: 75</code>，将font-size改为75px，重启vscode</li></ul>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rem</tag>
      
      <tag>媒体查询</tag>
      
      <tag>less</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动端布局简介</title>
    <link href="/2022/02/14/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/"/>
    <url>/2022/02/14/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="一、视口"><a href="#一、视口" class="headerlink" title="一、视口"></a>一、视口</h3><p>视口（viewport）就是浏览器显示页面内容的屏幕区域。视口可以分为布局视口、视觉视口和理想视口</p><h4 id="1、布局视口-layout-viewport"><a href="#1、布局视口-layout-viewport" class="headerlink" title="1、布局视口 layout viewport"></a>1、布局视口 layout viewport</h4><ul><li>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的pc端页面在手机上显示的问题</li><li>ios，android基本都将这个视口的分辨率设置为980px，所以pc上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/%E5%B8%83%E5%B1%80%E8%A7%86%E5%8F%A3.png" alt="布局视口"></p><h4 id="2、视觉视口-visual-viewport"><a href="#2、视觉视口-visual-viewport" class="headerlink" title="2、视觉视口 visual viewport"></a>2、视觉视口 visual viewport</h4><ul><li>字面意思，它是用户正在看到的网站的区域，注意：是网站的区域</li><li>我们可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/%E8%A7%86%E8%A7%89%E8%A7%86%E5%8F%A3.png" alt="视觉视口"></p><h4 id="3、理想视口-ideal-viewport"><a href="#3、理想视口-ideal-viewport" class="headerlink" title="3、理想视口 ideal viewport"></a>3、理想视口 ideal viewport</h4><ul><li>为了使网站在移动端有最理想的浏览和阅读宽度而设定</li><li>理想视口，对设备来讲，是最理想的视口尺寸</li><li>需要手动添写meta视口标签通知浏览器操作</li><li>meta视口标签的主要目的：布局视口的宽度应该和理想视口的宽度一致，简单理解就是设备有多宽，我们的布局视口就有多宽</li></ul><h4 id="4、meta标签"><a href="#4、meta标签" class="headerlink" title="4、meta标签"></a>4、meta标签</h4><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</code></p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/meta%E6%A0%87%E7%AD%BE.png" alt="meta标签"></p><h3 id="二、二倍图"><a href="#二、二倍图" class="headerlink" title="二、二倍图"></a>二、二倍图</h3><h4 id="1、物理像素-amp-物理像素比"><a href="#1、物理像素-amp-物理像素比" class="headerlink" title="1、物理像素&amp;物理像素比"></a>1、物理像素&amp;物理像素比</h4><ul><li>物理像素指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商出厂时就设置好了，比如苹果6/7/8是750 * 1334</li><li>我们开发时候的1px不一定等于1个物理像素</li><li>pc端页面，1px等于1个物理像素，但移动端就不尽相同</li><li>一个px能显示的物理像素点个数，称为物理像素比或屏幕像素比</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0&%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E6%AF%94.png" alt="物理像素&amp;物理像素比"></p><h4 id="2、多倍图"><a href="#2、多倍图" class="headerlink" title="2、多倍图"></a>2、多倍图</h4><ul><li>我们准备的图片比实际需要的大小大一倍，然后手动缩小为需要大小，这种方式就是2倍图。例如：需要50 * 50的图片，我们放一个100 * 100的图片，然后把图片宽高设置为50 * 50</li><li>对于一张50 * 50的图片，在手机Retina（视网膜屏幕）中打开，按照刚才的物理像素比会放大倍数，这样就会造成图片模糊</li><li>在标准的viewport设置中，使用倍图来提高图片质量，解决在高清设备中的模糊问题</li><li>通常使用二倍图，因为IPhone6/7/8的影响，但是现在还存在3倍图4倍图的情况，这个看实际开发公司需求</li><li>背景图片注意缩放问题</li></ul><h4 id="3、背景缩放background-size"><a href="#3、背景缩放background-size" class="headerlink" title="3、背景缩放background-size"></a>3、背景缩放background-size</h4><p>background-size属性规定了背景图片的尺寸 <code>background-size: 背景图片宽度 背景图片高度;</code></p><ul><li>单位：长度 | 百分比 | cover | contain</li><li>cover：等比例缩放，要完全覆盖div盒子，可能有部分背景图片显示不全</li><li>contain：高度和宽度等比例缩放，当宽度或高度铺满div盒子就不再进行拉伸了，可能有部分空白区域</li></ul><h4 id="4、多倍图切图cutterman（ps插件）"><a href="#4、多倍图切图cutterman（ps插件）" class="headerlink" title="4、多倍图切图cutterman（ps插件）"></a>4、多倍图切图cutterman（ps插件）</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/ps%E6%8F%92%E4%BB%B6cutterman.png" alt="ps插件cutterman"></p><h3 id="三、移动端开发选择"><a href="#三、移动端开发选择" class="headerlink" title="三、移动端开发选择"></a>三、移动端开发选择</h3><h4 id="1、移动端主流方案"><a href="#1、移动端主流方案" class="headerlink" title="1、移动端主流方案"></a>1、移动端主流方案</h4><ol><li><p>单独制作移动端页面（主流）</p></li><li><p>响应式页面兼容移动端（其次）</p></li></ol><h4 id="2、单独移动端页面（主流）"><a href="#2、单独移动端页面（主流）" class="headerlink" title="2、单独移动端页面（主流）"></a>2、单独移动端页面（主流）</h4><p>通常情况下，网址域名前面加m（mobile）可以打开移动端。通过判断设备，如果是移动端打开，则跳到移动端页面</p><h4 id="3、响应式页面兼容pc移动端（其次）"><a href="#3、响应式页面兼容pc移动端（其次）" class="headerlink" title="3、响应式页面兼容pc移动端（其次）"></a>3、响应式页面兼容pc移动端（其次）</h4><p>三星电子官网：<a href="http://www.samsung.com/cn/%EF%BC%8C%E9%80%9A%E8%BF%87%E5%88%A4%E6%96%AD%E5%B1%8F%E5%B9%95%E5%AE%BD%E5%BA%A6%E6%9D%A5%E6%94%B9%E5%8F%98%E6%A0%B7%E5%BC%8F%EF%BC%8C%E4%BB%A5%E9%80%82%E5%BA%94%E4%B8%8D%E5%90%8C%E7%BB%88%E7%AB%AF">www.samsung.com/cn/，通过判断屏幕宽度来改变样式，以适应不同终端</a><br>缺点：制作麻烦，需要花很大精力去调兼容性问题</p><h3 id="四、移动端技术解决方案"><a href="#四、移动端技术解决方案" class="headerlink" title="四、移动端技术解决方案"></a>四、移动端技术解决方案</h3><ul><li>移动端浏览器，基本以webkit内核为主，可以放心使用h5标签和css3样式，同时浏览器的私有前缀只需要加webkit即可</li><li>移动端css初始化推荐使用normalize.css</li><li>css3盒子模型box-sizing<ul><li>移动端可以全部css3盒子模型<code>box-sizing: border-box;</code></li><li>pc端如果完全需要兼容，就用传统模式，如果不考虑兼容，就选择css3盒子模型</li></ul></li><li>特殊样式<figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* css3盒子模型 */</span><br><span class="hljs-attribute">box-sizing</span>: border-box;<br>-webkit-<span class="hljs-attribute">box-sizing</span>: border-box;<br><br><span class="hljs-comment">/* 点击高亮我们需要清除，设置为transparent完成透明*/</span><br>-webkit-tap-highlight-<span class="hljs-attribute">color</span>: transparent;<br><br><span class="hljs-comment">/* 在移动端浏览器默认的外观，在IOS上加这个属性才能给按钮和输入框自定义样式 */</span><br>-webkit-appearance: none;<br><br><span class="hljs-comment">/* 禁用长按页面时的弹出菜单 */</span><br><span class="hljs-selector-tag">img</span>, <span class="hljs-selector-tag">a</span> &#123; -webkit-touch-callout: none; &#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="五、移动端技术选型"><a href="#五、移动端技术选型" class="headerlink" title="五、移动端技术选型"></a>五、移动端技术选型</h3><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80%E7%AE%80%E4%BB%8B/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B.png" alt="移动端技术选型"></p>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>css3新特性</title>
    <link href="/2022/02/14/css3%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/2022/02/14/css3%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="一、新增选择器"><a href="#一、新增选择器" class="headerlink" title="一、新增选择器"></a>一、新增选择器</h3><h4 id="1、属性选择器"><a href="#1、属性选择器" class="headerlink" title="1、属性选择器"></a>1、属性选择器</h4><p>属性选择器可以根据元素特定的属性来选择元素。这样就可以不用借助于类或者id选择器</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="属性选择器"></p><p><strong>注意：类选择器、属性选择器、伪类选择器，权重为10</strong></p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/%E9%80%89%E6%8B%A9%E5%99%A8%E6%9D%83%E9%87%8D.png" alt="选择器权重"></p><h4 id="2、结构伪类选择器"><a href="#2、结构伪类选择器" class="headerlink" title="2、结构伪类选择器"></a>2、结构伪类选择器</h4><p>结构伪类选择器主要是根据文档结构来选择元素，常用于根据父级选择器里面的子元素</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/%E7%BB%93%E6%9E%84%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="结构伪类选择器"><br><strong><a href="https://segmentfault.com/a/1190000020109948">注意：:last-child CSS伪类代表父元素的最后一个子元素。如.item:last-child,选中并不是指.item类中的最后一个元素, 而是既是.item又是父元素的最后一个子元素的元素</a></strong></p><ul><li>nth-child(n)选择某个父元素的一个或多个特定的子元素（括号内的参数必须为n，不能用a…）<ul><li>n可以是数字，关键字和公式</li><li>n如果是数字，就选择第n个元素，里面的数字从1开始</li><li>n可以是关键字：even偶数，odd奇数</li><li>n可以是公式：常见的公式如下（如果n是公式，则从0开始计算，但是第0个元素或者超出了元素的个数会被忽略）</li></ul></li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/nth-child(n).png" alt="nth-child(n)"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/nth-child%E6%9D%83%E9%87%8D.png" alt="nth-child权重"></p><ul><li>nth-child(n)和nth-of-type(n)的区别：nth-child先找第n个孩子，再判断其类型。nth-of-type先选出满足类型的孩子，再找第n个孩子</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/nth-child%E7%A4%BA%E4%BE%8B.png" alt="nth-child示例"></p><h4 id="3、伪元素选择器（重点）"><a href="#3、伪元素选择器（重点）" class="headerlink" title="3、伪元素选择器（重点）"></a>3、伪元素选择器（重点）</h4><p>伪元素选择器可以帮助我们利用css创建新标签元素，而不需要html标签，从而简化html结构</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/%E4%BC%AA%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8.png" alt="伪元素选择器"></p><ul><li>注意：<ul><li>before和after创建一个元素，但是属于行内元素</li><li>新创建的这个元素在文档树中是找不到的，所以我们称为伪元素</li><li>语法：<code>element::before&#123;&#125;</code></li><li>before和after必须有content属性</li><li>before在父元素内容的前面创建元素，after在父元素内容的后面插入元素</li><li>伪元素选择器和标签选择器一样，权重为1</li></ul></li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/before%E5%92%8Cafter%E4%BC%AA%E5%85%83%E7%B4%A0.png" alt="before和after伪元素"></p><h5 id="3-1、使用场景1：配合字体图标"><a href="#3-1、使用场景1：配合字体图标" class="headerlink" title="3.1、使用场景1：配合字体图标"></a>3.1、使用场景1：配合字体图标</h5><ul><li>实现效果：</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/%E4%BC%AA%E5%85%83%E7%B4%A0%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF1.png" alt="伪元素使用场景1"></p><ul><li>实现方法：</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/%E4%BC%AA%E5%85%83%E7%B4%A0%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF1_2.png" alt="伪元素使用场景1_2"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/%E4%BC%AA%E5%85%83%E7%B4%A0%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF1_3.png" alt="伪元素使用场景1_3"></p><h5 id="3-2、使用场景2：仿土豆效果"><a href="#3-2、使用场景2：仿土豆效果" class="headerlink" title="3.2、使用场景2：仿土豆效果"></a>3.2、使用场景2：仿土豆效果</h5><ul><li>实现效果：</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/%E4%BC%AA%E5%85%83%E7%B4%A0%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF2.png" alt="伪元素使用场景2"></p><ul><li>实现方法：</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/%E4%BC%AA%E5%85%83%E7%B4%A0%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF2_2.png" alt="伪元素使用场景2_2"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/%E4%BC%AA%E5%85%83%E7%B4%A0%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF2_3.png" alt="伪元素使用场景2_3"></p><h5 id="3-3、使用场景3：伪元素清除浮动本质"><a href="#3-3、使用场景3：伪元素清除浮动本质" class="headerlink" title="3.3、使用场景3：伪元素清除浮动本质"></a>3.3、使用场景3：伪元素清除浮动本质</h5><p>伪元素清除浮动，相当于是额外标签法升级和优化</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/%E4%BC%AA%E5%85%83%E7%B4%A0%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF3.png" alt="伪元素使用场景3"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/%E4%BC%AA%E5%85%83%E7%B4%A0%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF3_2.png" alt="伪元素使用场景3_2"></p><h3 id="二、css3盒子模型（box-sizing）"><a href="#二、css3盒子模型（box-sizing）" class="headerlink" title="二、css3盒子模型（box-sizing）"></a>二、css3盒子模型（box-sizing）</h3><ul><li><p>css3中可以通过box-sizing来指定盒模型</p><ol><li><p><code>box-sizing: content-box</code>盒子大小为 width+padding+border（默认）</p></li><li><p><code>box-sizing: border-box</code>盒子大小为 width</p></li></ol></li></ul><p>如果盒子模型我们改为了 <code>box-sizing: border-box</code>，那padding和border就不会撑大盒子（前提padding和border不会超过width宽度）</p><h3 id="三、图片模糊处理（css3滤镜filter）"><a href="#三、图片模糊处理（css3滤镜filter）" class="headerlink" title="三、图片模糊处理（css3滤镜filter）"></a>三、图片模糊处理（css3滤镜filter）</h3><p>filter css属性将模糊或颜色偏移等图形效果应用于元素</p><ul><li>语法：</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/filter%E8%AF%AD%E6%B3%95.png" alt="filter语法"></p><ul><li>示例：</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/filter%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81.png" alt="filter示例代码"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/filter%E7%A4%BA%E4%BE%8B%E6%95%88%E6%9E%9C.png" alt="filter示例效果"></p><ul><li>补充：backdrop-filter：CSS 属性可以让你为一个元素后面区域添加图形效果（如模糊或颜色偏移）。 因为它适用于元素背后的所有元素，为了看到效果，必须使元素或其背景至少部分透明。</li></ul><h3 id="四、计算盒子宽度（calc函数）"><a href="#四、计算盒子宽度（calc函数）" class="headerlink" title="四、计算盒子宽度（calc函数）"></a>四、计算盒子宽度（calc函数）</h3><p>calc() 此css函数让你在声明css属性值时执行一些计算</p><ul><li>语法：</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/calc%E8%AF%AD%E6%B3%95.png" alt="calc语法"></p><ul><li>示例：</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/calc%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81.png" alt="calc示例代码"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/calc%E7%A4%BA%E4%BE%8B%E6%95%88%E6%9E%9C.png" alt="calc示例效果"></p><h3 id="五、过渡transition（重点）"><a href="#五、过渡transition（重点）" class="headerlink" title="五、过渡transition（重点）"></a>五、过渡transition（重点）</h3><ul><li><p>语法：<code>transition: 要设置过渡的属性 花费时间 运动曲线 何时开始;</code></p><ol><li><p>属性：想要变化的css属性，宽度、高度、背景颜色、内外边距都可以。如果想要所有的属性都变化过渡，写一个all就可以了</p></li><li><p>花费时间：单位是秒（必须写单位），比如0.5s</p></li><li><p>运动曲线：默认是ease（可以省略）</p></li><li><p>何时开始：单位是秒（必须写单位），可以设置延迟触发时间，默认是0s（可以省略）</p></li></ol></li><li><p>使用口诀：谁要过渡给谁加</p></li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/%E8%BF%87%E6%B8%A11.png" alt="过渡1"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/%E8%BF%87%E6%B8%A12.png" alt="过渡2"></p><h3 id="六、2D转换transform"><a href="#六、2D转换transform" class="headerlink" title="六、2D转换transform"></a>六、2D转换transform</h3><h4 id="1、移动translate"><a href="#1、移动translate" class="headerlink" title="1、移动translate"></a>1、移动translate</h4><p>2D移动是2D转换里面的一种功能，可以改变元素在页面中的位置，类似定位</p><h5 id="1-1、语法"><a href="#1-1、语法" class="headerlink" title="1.1、语法"></a>1.1、语法</h5><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(x, y); <br><span class="hljs-comment">/* 或者分开写 */</span><br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(n);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(n);<br></code></pre></td></tr></table></figure><h5 id="1-2、重点"><a href="#1-2、重点" class="headerlink" title="1.2、重点"></a>1.2、重点</h5><ul><li>定义2D转换中的移动，沿着X和Y轴移动元素</li><li>translate最大的优点：不会影响到其他元素的位置</li><li>translate中的百分比单位是相对于自身元素的 <code>transform: translate(50%, 50%)</code></li><li>对行内标签没有效果</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/transform_1.png" alt="transform_1"></p><h4 id="2、旋转rotate"><a href="#2、旋转rotate" class="headerlink" title="2、旋转rotate"></a>2、旋转rotate</h4><p>2D旋转指的是让元素在2维平面内顺时针旋转或者逆时针旋转</p><h5 id="2-1、语法"><a href="#2-1、语法" class="headerlink" title="2.1、语法"></a>2.1、语法</h5><p><code>transform: rotate(度数)</code></p><h5 id="2-2、重点"><a href="#2-2、重点" class="headerlink" title="2.2、重点"></a>2.2、重点</h5><ul><li>rotate里面跟度数，单位是deg，比如<code>rotate(45deg)</code></li><li>角度为正时，顺时针；为负时，逆时针</li><li>默认旋转的中心点是元素的中心点</li></ul><h4 id="3、转换中心点transform-origin"><a href="#3、转换中心点transform-origin" class="headerlink" title="3、转换中心点transform-origin"></a>3、转换中心点transform-origin</h4><p>我们可以设置元素转换的中心点</p><h5 id="3-1、语法"><a href="#3-1、语法" class="headerlink" title="3.1、语法"></a>3.1、语法</h5><p><code>transform-origin: x y;</code></p><h5 id="3-2、重点"><a href="#3-2、重点" class="headerlink" title="3.2、重点"></a>3.2、重点</h5><ul><li>注意后面的参数x和y用空格隔开</li><li>x y默认转换的中心点是元素的中心点（50% 50%）</li><li>还可以给x y设置像素或方位名词（top buttom left right center）</li></ul><h4 id="4、缩放scale"><a href="#4、缩放scale" class="headerlink" title="4、缩放scale"></a>4、缩放scale</h4><p>缩放，顾名思义可以放大和缩小。只要给元素添加了这个属性就能控制它放大还是缩小</p><h5 id="4-1、语法"><a href="#4-1、语法" class="headerlink" title="4.1、语法"></a>4.1、语法</h5><p><code>transform: scale(x, y);</code></p><h5 id="4-2、重点"><a href="#4-2、重点" class="headerlink" title="4.2、重点"></a>4.2、重点</h5><ul><li>注意其中的x和y用逗号分割</li><li><code>transform: scale(1, 1)</code>：宽和高都放大一倍，相当于没有放大</li><li><code>transform: scale(2, 2)</code>：宽和高都放大了2倍</li><li><code>transform: scale(2, 2)</code>：只写一个参数，第二个参数则和第一个参数一样，相当于scale(2, 2)</li><li><code>transform: scale(0.5, 0.5)</code>：缩小</li><li>scale缩放最大的优势：可以设置转换中心点缩放，默认以中心点缩放，而不影响其他盒子</li></ul><h4 id="5、2D转换综合写法"><a href="#5、2D转换综合写法" class="headerlink" title="5、2D转换综合写法"></a>5、2D转换综合写法</h4><ul><li>同时使用多个装换，其格式为：<code>transform: translate() rotate() scale()</code></li><li>其顺序会影响转换的效果（先旋转会改变坐标轴方向）</li><li>当我们同时有位移和其他属性时，要将位移放在最前面</li></ul><h3 id="七、动画animation"><a href="#七、动画animation" class="headerlink" title="七、动画animation"></a>七、动画animation</h3><p>动画（animation）是css3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。相比于过渡，动画可以实现更多变化，更多控制，连续自动播放等效果</p><h4 id="1、动画的基本使用"><a href="#1、动画的基本使用" class="headerlink" title="1、动画的基本使用"></a>1、动画的基本使用</h4><ul><li><p>制作动画分为两步：</p><ol><li>先定义动画</li><li>再使用（调用）动画<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 使用keyframes定义动画（类似定义类选择器） */</span><br><span class="hljs-keyword">@keyframes</span> 动画名称 &#123;<br>    <span class="hljs-number">0%</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    &#125;<br>    <span class="hljs-number">100%</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/* animation-name指定使用动画的名称，animation-duration指定动画执行总时长 */</span><br><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">animation-name</span>: move;<br>    <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">1s</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>动画序列</p><ul><li>0%是动画的开始，100%是动画的完成，这样的规则就是动画序列</li><li>在@keyframes中规定某项css样式，就能创建由当前样式逐渐改为新样式的动画效果</li><li>动画是使元素从一种样式逐渐变化为另一种样式的效果。我们可以改变任意多的样式，任意多的次数</li><li>请用百分比来规定变化发生的时间，或使用关键词“from”和“to”，等同于0%和100%</li></ul></li></ul><h4 id="2、动画常见属性"><a href="#2、动画常见属性" class="headerlink" title="2、动画常见属性"></a>2、动画常见属性</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/%E5%8A%A8%E7%94%BB%E5%B8%B8%E8%A7%81%E5%B1%9E%E6%80%A7.png" alt="动画常见属性"></p><h4 id="3、动画属性简写"><a href="#3、动画属性简写" class="headerlink" title="3、动画属性简写"></a>3、动画属性简写</h4><p>animation: 动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束状态<br><code>animation: move 5s linear 2s infinite alternate forwards;</code></p><ul><li>简写属性不包含<code>animation-play-state</code></li><li>暂停动画：<code>animation-play-state: puased;</code>经常和鼠标经过等其他配合使用</li><li>想要动画走回来，而不是直接跳回来：<code>animation-direction: alternate</code></li><li>盒子动画结束后，停在结束位置：<code>animation-fill-mode: forwards</code></li></ul><h4 id="4、速度曲线细节"><a href="#4、速度曲线细节" class="headerlink" title="4、速度曲线细节"></a>4、速度曲线细节</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/%E5%8A%A8%E7%94%BB%E9%80%9F%E5%BA%A6%E6%9B%B2%E7%BA%BF.png" alt="动画速度曲线"></p><ul><li>steps 就是分几步来完成我们的动画，有了steps就不要再写ease或者linear了</li></ul><h3 id="八、3D转换transform"><a href="#八、3D转换transform" class="headerlink" title="八、3D转换transform"></a>八、3D转换transform</h3><h4 id="1、三维坐标系"><a href="#1、三维坐标系" class="headerlink" title="1、三维坐标系"></a>1、三维坐标系</h4><p>三维坐标系其实就是指立体空间，立体空间是由3个轴共同组成的</p><ul><li>x轴：水平向右。x右边是正值，左边是负值</li><li>y轴：垂直向下。y下面是正值，上面是负值</li><li>z轴：垂直屏幕。往外面是正值，往里面是负值</li></ul><h4 id="2、3D移动translate3d"><a href="#2、3D移动translate3d" class="headerlink" title="2、3D移动translate3d"></a>2、3D移动translate3d</h4><p>3D移动是在2D的基础上多加了一个可以移动的方向，就是z轴方向</p><ul><li><code>transform: translateX(100px);</code>：仅仅是在x轴上移动</li><li><code>transform: translateY(100px);</code>：仅仅是在y轴上移动</li><li><code>transform: translateZ(100px);</code>：仅仅是在z轴上移动（注意：translateZ一般用px单位）</li><li><code>transform: translate3d(x, y, z);</code>：其中x、y、z指要移动的轴的方向、距离。不能省略，没有就写0</li></ul><h4 id="3、透视perspective"><a href="#3、透视perspective" class="headerlink" title="3、透视perspective"></a>3、透视perspective</h4><ul><li>透视可以理解为视距，值越小，用户与3D空间z平面越近，视觉效果更强；值越大，用户与3D空间z平面越远，视觉效果越小</li><li>透视写在被观察元素的父盒子上，单位是px</li><li>translateZ写在被观察的元素上，仅仅是在z轴上移动，有了透视才能看到translateZ引起的变化</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css3%E6%96%B0%E7%89%B9%E6%80%A7/%E9%80%8F%E8%A7%86perspective.png" alt="透视perspective"></p><h4 id="4、3D旋转rotate3d"><a href="#4、3D旋转rotate3d" class="headerlink" title="4、3D旋转rotate3d"></a>4、3D旋转rotate3d</h4><p>3D旋转指可以让元素在三维平面内沿着x轴、y轴、z轴或者自定义轴进行旋转</p><ul><li><p><code>transform: rotateX(45deg);</code>：沿着x轴正方向旋转45度</p></li><li><p><code>transform: rotateY(45deg);</code>：沿着y轴正方向旋转45度</p></li><li><p><code>transform: rotateZ(45deg);</code>：沿着z轴正方向旋转45度</p></li><li><p><code>transform: rotate3d(x, y, z, deg);</code>：沿着自定义轴旋转，deg为角度（了解）<code>transform: rotate3d(1, 0, 0, 45deg); 沿x轴旋转45度</code></p></li><li><p>判断元素旋转方向（左手法则）：</p><ul><li>左手的大拇指指向旋转轴的正方向</li><li>其余手指的弯曲方向就是该元素沿旋转轴的旋转方向</li></ul></li></ul><h4 id="5、3D呈现transform-style"><a href="#5、3D呈现transform-style" class="headerlink" title="5、3D呈现transform-style"></a>5、3D呈现transform-style</h4><ul><li>控制子元素是否开启三维立体环境</li><li><code>transform-style: flat;</code>子元素不开启3d立体空间，默认的</li><li><code>transform-style: preserve-3d;</code>子元素开启立体空间</li><li>代码写给父级，但影响的是子盒子</li><li>这个属性很重要，后面必用</li></ul><h3 id="九、浏览器私有前缀"><a href="#九、浏览器私有前缀" class="headerlink" title="九、浏览器私有前缀"></a>九、浏览器私有前缀</h3><p>浏览器私有前缀是为了兼容老版本的写法，比较新版本的浏览器无须添加</p><h4 id="1、私有前缀"><a href="#1、私有前缀" class="headerlink" title="1、私有前缀"></a>1、私有前缀</h4><ul><li><code>-moz-</code>：代表firefox浏览器私有属性</li><li><code>-ms-</code>：代表ie浏览器私有属性</li><li><code>-webkit-</code>：代表safari、chrome私有属性</li><li><code>-o-</code>：代表opera私有属性</li></ul><h4 id="2、提倡写法"><a href="#2、提倡写法" class="headerlink" title="2、提倡写法"></a>2、提倡写法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">-moz-<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>-webkit-<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>-o-<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br></code></pre></td></tr></table></figure><h3 id="十、translate与绝对定位"><a href="#十、translate与绝对定位" class="headerlink" title="十、translate与绝对定位"></a>十、translate与绝对定位</h3><ul><li>translate()是transform的一个值。改变transform或opacity不会触发浏览器重新布局（reflow）或重绘（repaint），只会触发复合（compositions）。而改变绝对定位会触发重新布局，进而触发重绘和复合。transform使浏览器为元素创建一个 GPU 图层，但改变绝对定位会使用到 CPU。 因此translate()更高效，可以缩短平滑动画的绘制时间。</li><li>当使用translate()时，元素仍然占据其原始空间（有点像position：relative），这与改变绝对定位不同。</li></ul><h3 id="十一、渐变"><a href="#十一、渐变" class="headerlink" title="十一、渐变"></a>十一、渐变</h3><h4 id="1、线性渐变"><a href="#1、线性渐变" class="headerlink" title="1、线性渐变"></a>1、线性渐变</h4><ul><li><p>语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(渐变方向, start-color, ..., end-color);<br><span class="hljs-comment">/* 从 右 到 左 渐变 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to left, red, blue);<br><span class="hljs-comment">/* 从 右下 到 左上 渐变 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to left top, red, blue);<br></code></pre></td></tr></table></figure></li><li><p>起始方向可以是：方位名词或者度数，如果省略默认就是从上到下</p></li></ul><h4 id="2、径向渐变"><a href="#2、径向渐变" class="headerlink" title="2、径向渐变"></a>2、径向渐变</h4><ul><li><p>语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(渐变形状，start-color, ..., end-color)<br>/* 颜色均匀 的 椭圆 径向渐变 */<br>background: <span class="hljs-built_in">radial-gradient</span>(red, yellow, green);<br><span class="hljs-comment">/* 颜色均匀 的 圆形 径向渐变 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(circle, red, yellow, green);<br><span class="hljs-comment">/* 颜色不均匀 的 椭圆 径向渐变 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(red <span class="hljs-number">5%</span>, yellow <span class="hljs-number">15%</span>, green <span class="hljs-number">60%</span>);<br></code></pre></td></tr></table></figure></li><li><p>渐变形状的值为 circle（圆形） 和 ellipse（椭圆，默认值） </p></li></ul>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css高级技巧</title>
    <link href="/2022/02/14/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/02/14/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="一、精灵图"><a href="#一、精灵图" class="headerlink" title="一、精灵图"></a>一、精灵图</h3><h4 id="1、为什么需要精灵图"><a href="#1、为什么需要精灵图" class="headerlink" title="1、为什么需要精灵图"></a>1、为什么需要精灵图</h4><p>一个网页中往往会应用很多小的背景图片作为修饰，当页面中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。因此<strong>为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度</strong>，出现了css精灵技术（也称CSS  Sprites）</p><p>核心原理：将网页中的一些小背景图像整合到一张大图中，这样服务器只需要一次请求就可以了</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/%E7%B2%BE%E7%81%B5%E5%9B%BE.png" alt="精灵图"></p><h4 id="2、精灵图的使用"><a href="#2、精灵图的使用" class="headerlink" title="2、精灵图的使用"></a>2、精灵图的使用</h4><p>将精灵图作为背景图片，通过background-position对精灵图位置进行调整。类似拿盒子去裁剪大图中的某个小图片</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/%E7%B2%BE%E7%81%B5%E5%9B%BE%E4%BD%BF%E7%94%A8.png" alt="精灵图使用"></p><h3 id="二、字体图标"><a href="#二、字体图标" class="headerlink" title="二、字体图标"></a>二、字体图标</h3><h4 id="1、字体图标的产生"><a href="#1、字体图标的产生" class="headerlink" title="1、字体图标的产生"></a>1、字体图标的产生</h4><p>字体图标使用场景：主要用于显示网页中通用、常用的一些小图标</p><p>精灵图缺点：</p><ol><li>图片文件还是比较大的</li><li>图片本身放大和缩小会失真</li><li>一旦图片制作完毕想要更换非常复杂</li></ol><p>此时有一种技术的出现很好的解决了以上问题，就是字体图标iconfont（展示的是图标，本质属于字体）</p><h4 id="2、字体图标的优点"><a href="#2、字体图标的优点" class="headerlink" title="2、字体图标的优点"></a>2、字体图标的优点</h4><ul><li>轻量级：一个字体图标要比一系列的图像要小，一旦字体加载了，图标就会马上渲染出来，减少了服务器请求</li><li>灵活性：本质其实是文字，可以随意的改变颜色、产生阴影、透明效果、旋转等</li><li>兼容性：几乎支持所有浏览器</li></ul><p>注意：字体图标不能代替精灵图技术，只是对工作中图标部分技术的提升和优化</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87.png" alt="字体图标"></p><h4 id="3、字体图标下载"><a href="#3、字体图标下载" class="headerlink" title="3、字体图标下载"></a>3、字体图标下载</h4><p>推荐网站：<br>icomoon<br>阿里iconfont</p><h4 id="4、字体图标使用"><a href="#4、字体图标使用" class="headerlink" title="4、字体图标使用"></a>4、字体图标使用</h4><ol><li><p>下载字体图标</p></li><li><p>将fonts文件夹（里面有四种字体文件，为了保证兼容性）放在页面根目录下<br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E4%BD%BF%E7%94%A81.png" alt="字体图标使用1"></p></li><li><p>在css样式中全局声明字体，把这些字体文件通过css引入我们的页面中。复制style.css文件中的<code>@font-face</code>样式<br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E4%BD%BF%E7%94%A82.png" alt="字体图标使用2"></p></li><li><p>打开demo.html文件，复制图标对应的文本<br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E4%BD%BF%E7%94%A83.png" alt="字体图标使用3"></p></li><li><p>为复制的文本添加字体样式<code>font-family</code>（属性值为font-face引入的字体）<br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E4%BD%BF%E7%94%A84.png" alt="字体图标使用4"></p></li></ol><h4 id="5、字体图标的追加"><a href="#5、字体图标的追加" class="headerlink" title="5、字体图标的追加"></a>5、字体图标的追加</h4><p>在图标网站中导入本地的字体图标（selection.json文件），选择需要追加的图标并重新下载，覆盖原来下载的图标文件</p><h3 id="三、css三角形"><a href="#三、css三角形" class="headerlink" title="三、css三角形"></a>三、css三角形</h3><h4 id="1、思路"><a href="#1、思路" class="headerlink" title="1、思路"></a>1、思路</h4><ul><li>将一个盒子高度和宽度都设置为0，并添加边框。当4个边框为不同颜色时，会出现4种不同颜色的三角形拼成的正方形</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/css%E4%B8%89%E8%A7%92%E5%BD%A21.png" alt="css三角形1"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/css%E4%B8%89%E8%A7%92%E5%BD%A22.png" alt="css三角形2"></p><ul><li>要实现三角形，可以将其余三个边框设置为透明色。三角的大小取决于边框大小</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/css%E4%B8%89%E8%A7%92%E5%BD%A23.png" alt="css三角形3"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/css%E4%B8%89%E8%A7%92%E5%BD%A24.png" alt="css三角形4"></p><ul><li>兼容性：</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/css%E4%B8%89%E8%A7%92%E5%BD%A2%E5%85%BC%E5%AE%B9%E6%80%A7.png" alt="css三角形兼容性"></p><ul><li>应用：</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/css%E4%B8%89%E8%A7%92%E5%BD%A2%E5%BA%94%E7%94%A8.png" alt="css三角形应用"></p><h3 id="四、css用户界面样式"><a href="#四、css用户界面样式" class="headerlink" title="四、css用户界面样式"></a>四、css用户界面样式</h3><h4 id="1、鼠标样式"><a href="#1、鼠标样式" class="headerlink" title="1、鼠标样式"></a>1、鼠标样式</h4><p>鼠标改为小手，其他参考css基础中cursor属性<br><code>cursor: pointer;</code></p><h4 id="2、取消表单轮廓"><a href="#2、取消表单轮廓" class="headerlink" title="2、取消表单轮廓"></a>2、取消表单轮廓</h4><p><code>outline: none;</code></p><h4 id="3、防止文本域拖拽"><a href="#3、防止文本域拖拽" class="headerlink" title="3、防止文本域拖拽"></a>3、防止文本域拖拽</h4><p><code>resize: none;</code></p><h3 id="五、vertical-align属性应用"><a href="#五、vertical-align属性应用" class="headerlink" title="五、vertical-align属性应用"></a>五、vertical-align属性应用</h3><h4 id="1、使用"><a href="#1、使用" class="headerlink" title="1、使用"></a>1、使用</h4><ul><li>使用场景：经常用于设置图片或者表单（行内块元素）和文字垂直对齐</li><li>官方解释：用于设置一个元素的垂直对齐方式，但是它只针对行内元素或者行内块元素有有效</li><li>语法：<code>vertical-align: baseline | top | middel | bottom</code>（默认基线对齐）</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/vertical-align%E5%B1%9E%E6%80%A7.png" alt="vertical-align属性"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/vertical-align%E5%AF%B9%E9%BD%90%E6%96%B9%E5%BC%8F.png" alt="vertical-align对齐方式"></p><ul><li>示例：</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/vertical-align%E7%A4%BA%E4%BE%8B.png" alt="vertical-align示例"></p><h4 id="2、解决图片底部默认空白缝隙问题"><a href="#2、解决图片底部默认空白缝隙问题" class="headerlink" title="2、解决图片底部默认空白缝隙问题"></a>2、解决图片底部默认空白缝隙问题</h4><p>bug：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐<br>主要解决方法有两种：</p><ol><li>给图片添加<code>vertical-align: middle | top | bottom</code>（提倡使用）</li><li>把图片转化为块级元素<code>display: block;</code></li></ol><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/%E5%9B%BE%E7%89%87%E5%BA%95%E9%83%A8%E7%A9%BA%E9%9A%99%E9%97%AE%E9%A2%98.png" alt="图片底部空隙问题"></p><h3 id="六、溢出的文字省略号显示"><a href="#六、溢出的文字省略号显示" class="headerlink" title="六、溢出的文字省略号显示"></a>六、溢出的文字省略号显示</h3><h4 id="1、单行文字溢出省略号显示"><a href="#1、单行文字溢出省略号显示" class="headerlink" title="1、单行文字溢出省略号显示"></a>1、单行文字溢出省略号显示</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/%E5%8D%95%E8%A1%8C%E6%96%87%E5%AD%97%E6%BA%A2%E5%87%BA%E7%9C%81%E7%95%A5%E5%8F%B7.png" alt="单行文字溢出省略号"></p><h4 id="2、多行文字溢出省略号显示"><a href="#2、多行文字溢出省略号显示" class="headerlink" title="2、多行文字溢出省略号显示"></a>2、多行文字溢出省略号显示</h4><p>多行文本溢出显示省略号，有较大的兼容性问题，适合于webKit浏览器或移动端（移动端大部分是webkit内核）</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/%E5%A4%9A%E8%A1%8C%E6%96%87%E5%AD%97%E6%BA%A2%E5%87%BA%E7%9C%81%E7%95%A5%E5%8F%B7.png" alt="多行文字溢出省略号"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/%E5%A4%9A%E8%A1%8C%E6%96%87%E5%AD%97%E6%BA%A2%E5%87%BA%E7%9C%81%E7%95%A5%E5%8F%B72.png" alt="多行文字溢出省略号2"></p><p>更推荐让后台人员来做这个效果，因为后台人员可以设置显示多少字，操作更简单</p><h3 id="七、常见布局技巧"><a href="#七、常见布局技巧" class="headerlink" title="七、常见布局技巧"></a>七、常见布局技巧</h3><h4 id="1、margin负值的运用"><a href="#1、margin负值的运用" class="headerlink" title="1、margin负值的运用"></a>1、margin负值的运用</h4><ul><li>实现效果： 每个盒子都有边框，且边框粗细相同。鼠标经过盒子时，盒子的四个边框变色</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/margin%E8%B4%9F%E5%80%BC%E5%BA%94%E7%94%A8.png" alt="margin负值应用"></p><ul><li>思路：<ol><li>让每个盒子margin往左侧移动-1px（如果边框为1px），正好压住相邻盒子边框</li><li>鼠标经过某个盒子的时候，提高当前盒子的层级（如果没有定位，则添加相对定位（保留位置），如果有定位，则加z-index）</li></ol></li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/margin%E8%B4%9F%E5%80%BC%E5%BA%94%E7%94%A82.png" alt="margin负值应用2"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/margin%E8%B4%9F%E5%80%BC%E5%BA%94%E7%94%A83.png" alt="margin负值应用3"></p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/margin%E8%B4%9F%E5%80%BC%E5%BA%94%E7%94%A84.png" alt="margin负值应用4"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/margin%E8%B4%9F%E5%80%BC%E5%BA%94%E7%94%A85.png" alt="margin负值应用5"></p><h4 id="2、文字围绕浮动元素"><a href="#2、文字围绕浮动元素" class="headerlink" title="2、文字围绕浮动元素"></a>2、文字围绕浮动元素</h4><ul><li>实现效果：文字环绕在图片右侧</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/%E6%96%87%E5%AD%97%E5%9B%B4%E7%BB%95%E6%B5%AE%E5%8A%A8%E5%85%83%E7%B4%A0.png" alt="文字围绕浮动元素"></p><ul><li>思路：为图片盒子添加左浮动，文本则会环绕在右侧</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/%E6%96%87%E5%AD%97%E5%9B%B4%E7%BB%95%E6%B5%AE%E5%8A%A8%E5%85%83%E7%B4%A02.png" alt="文字围绕浮动元素2"></p><h4 id="3、行内块的巧妙运用"><a href="#3、行内块的巧妙运用" class="headerlink" title="3、行内块的巧妙运用"></a>3、行内块的巧妙运用</h4><ul><li>实现效果：</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/%E8%A1%8C%E5%86%85%E5%9D%97%E5%A6%99%E7%94%A8.png" alt="行内块妙用"></p><ul><li>思路：<ol><li>行内块元素默认有间距</li><li>行内块元素添加<code>text-align: center;</code>属性，里面的行内元素和行内块元素都会水平居中</li></ol></li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/%E8%A1%8C%E5%86%85%E5%9D%97%E5%A6%99%E7%94%A82.png" alt="行内块妙用2"></p><h4 id="4、css三角强化"><a href="#4、css三角强化" class="headerlink" title="4、css三角强化"></a>4、css三角强化</h4><ul><li>实现效果：</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/css%E4%B8%89%E8%A7%92%E5%BD%A2%E5%BC%BA%E5%8C%96.png" alt="css三角形强化"></p><ul><li>思路：<ol><li>将border-bottom和border-left设置为0</li><li>将border-top大小增加</li><li>将border-top设置为透明</li><li>将三角与需要的盒子拼接</li></ol></li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/css%E4%B8%89%E8%A7%92%E5%BD%A2%E5%BC%BA%E5%8C%962.png" alt="css三角形强化2"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/css%E4%B8%89%E8%A7%92%E5%BD%A2%E5%BC%BA%E5%8C%963.png" alt="css三角形强化3"></p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/css%E4%B8%89%E8%A7%92%E5%BD%A2%E5%BC%BA%E5%8C%964.png" alt="css三角形强化4"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/css%E4%B8%89%E8%A7%92%E5%BD%A2%E5%BC%BA%E5%8C%965.png" alt="css三角形强化5"></p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/css%E4%B8%89%E8%A7%92%E5%BD%A2%E5%BC%BA%E5%8C%966.png" alt="css三角形强化6"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7/css%E4%B8%89%E8%A7%92%E5%BD%A2%E5%BC%BA%E5%8C%967.png" alt="css三角形强化7"></p><h3 id="八、css初始化（仅供参考）"><a href="#八、css初始化（仅供参考）" class="headerlink" title="八、css初始化（仅供参考）"></a>八、css初始化（仅供参考）</h3><p>不同浏览器对有些标签的默认值不同，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼容，需要对css初始化。以京东css初始化代码为例：</p><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><pre><code class="hljs css">* &#123;<br>  <span class="hljs-comment">/* 所有标签内外边距清零 */</span><br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-tag">em</span>, <span class="hljs-selector-tag">i</span> &#123;<br>  <span class="hljs-comment">/* em 和 i 斜体文字不倾斜 */</span><br>  <span class="hljs-attribute">font-style</span>: normal;<br>&#125;<br><br><span class="hljs-selector-tag">li</span> &#123;<br>  <span class="hljs-comment">/* 去掉 li 的小圆点 */</span><br>  <span class="hljs-attribute">list-style</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">img</span> &#123;<br>  <span class="hljs-comment">/* border: 0; 照顾低版本浏览器，图片外面包含了链接会有边框的问题 */</span><br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">/* 取消图片底部有空白缝隙的问题 */</span><br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>&#125;<br><br><span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-comment">/* 当鼠标经过 button 按钮的时候，鼠标变成小手 */</span><br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-comment">/* a 标签字体颜色为 #666 */</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>  <span class="hljs-comment">/* 清除 a 标签下划线 */</span><br>  <span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">button</span>, <span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-comment">/* \5B8B\4F53 就是宋体，这样写浏览器兼容性比较好 */</span><br>  <span class="hljs-attribute">font-family</span>: Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="hljs-string">&quot;\5B8B\4F53&quot;</span>, sans-serif;<br>&#125;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-comment">/* css3 抗锯齿，让文字显示的更加清晰 */</span><br>  -webkit-<span class="hljs-attribute">font-smoothing</span>: antialiased;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">font</span>: <span class="hljs-number">12px</span>/<span class="hljs-number">1.5</span> Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="hljs-string">&quot;\5B8B\4F53&quot;</span>, sans-serif;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>&#125;<br><br><span class="hljs-comment">/* 清除浮动 */</span><br><span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">visibility</span>: hidden;<br>  <span class="hljs-attribute">clear</span>: both;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;.&quot;</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span> &#123;<br>  <span class="hljs-comment">/* </span><br><span class="hljs-comment">    兼容 ie，以前使用 *zoom: 1;  css3中引入 zoom属性后可以直接使用 zoom: 1;</span><br><span class="hljs-comment">  */</span><br>  zoom: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>css基础</title>
    <link href="/2022/02/14/css%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/02/14/css%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="一、css基本用法"><a href="#一、css基本用法" class="headerlink" title="一、css基本用法"></a>一、css基本用法</h3><h4 id="1、css语法"><a href="#1、css语法" class="headerlink" title="1、css语法"></a>1、css语法</h4><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs css">选择器 &#123;<br>    属性名: 属性值;<br>    属性名: 属性值;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、css应用方式"><a href="#2、css应用方式" class="headerlink" title="2、css应用方式"></a>2、css应用方式</h4><h5 id="2-1、行内样式，使用HTML标签的style属性定义"><a href="#2-1、行内样式，使用HTML标签的style属性定义" class="headerlink" title="2.1、行内样式，使用HTML标签的style属性定义"></a>2.1、行内样式，使用HTML标签的style属性定义</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red;&quot;</span>&gt;</span>行内样式<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-2、内部样式，通过页面中的style标签定义"><a href="#2-2、内部样式，通过页面中的style标签定义" class="headerlink" title="2.2、内部样式，通过页面中的style标签定义"></a>2.2、内部样式，通过页面中的style标签定义</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">h2</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="css">    &#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-3、外部样式，引入外部css文件"><a href="#2-3、外部样式，引入外部css文件" class="headerlink" title="2.3、外部样式，引入外部css文件"></a>2.3、外部样式，引入外部css文件</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 方法一 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css文件路径&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 方法二 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;css文件路径&quot;</span>;</span><br><span class="css">    <span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;css文件路径&quot;</span>);</span><br><span class="css">&lt;style&gt;</span><br></code></pre></td></tr></table></figure><h3 id="二、选择器"><a href="#二、选择器" class="headerlink" title="二、选择器"></a>二、选择器</h3><h4 id="1、基础选择器"><a href="#1、基础选择器" class="headerlink" title="1、基础选择器"></a>1、基础选择器</h4><h5 id="1-1、标签选择器"><a href="#1-1、标签选择器" class="headerlink" title="1.1、标签选择器"></a>1.1、标签选择器</h5><ul><li>直接使用标签名称<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="1-2、类选择器"><a href="#1-2、类选择器" class="headerlink" title="1.2、类选择器"></a>1.2、类选择器</h5><ul><li>使用.<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.class1</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="1-3、ID选择器"><a href="#1-3、ID选择器" class="headerlink" title="1.3、ID选择器"></a>1.3、ID选择器</h5><ul><li>使用#，且唯一<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#id1</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="1-4、通配符选择器"><a href="#1-4、通配符选择器" class="headerlink" title="1.4、通配符选择器"></a>1.4、通配符选择器</h5><ul><li>使用*<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="2、复杂选择器"><a href="#2、复杂选择器" class="headerlink" title="2、复杂选择器"></a>2、复杂选择器</h4><h5 id="2-1、复合选择器"><a href="#2-1、复合选择器" class="headerlink" title="2.1、复合选择器"></a>2.1、复合选择器</h5><ul><li>标签选择器和类选择器、标签选择器和id选择器，一起使用（不用空格或逗号）</li><li>必须同时满足两个条件样式才生效<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span><span class="hljs-selector-class">.class1</span> &#123;<br>&#125;<br><span class="hljs-selector-tag">h1</span><span class="hljs-selector-id">#id1</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="2-2、多元素（并集）选择器"><a href="#2-2、多元素（并集）选择器" class="headerlink" title="2.2、多元素（并集）选择器"></a>2.2、多元素（并集）选择器</h5><ul><li>E,F</li><li>同时匹配所有E元素和F元素，E和F之间用逗号隔开</li></ul><h5 id="2-3、后代选择器"><a href="#2-3、后代选择器" class="headerlink" title="2.3、后代选择器"></a>2.3、后代选择器</h5><ul><li>E F</li><li>匹配所有属于E元素后代的F元素，E和F之间用空格隔开（匹配所有后代）</li></ul><h5 id="2-4、子元素选择器"><a href="#2-4、子元素选择器" class="headerlink" title="2.4、子元素选择器"></a>2.4、子元素选择器</h5><ul><li>E&gt;F</li><li>匹配所有E元素子代的F元素（只匹配子代）</li></ul><h5 id="2-5、兄弟元素选择器"><a href="#2-5、兄弟元素选择器" class="headerlink" title="2.5、兄弟元素选择器"></a>2.5、兄弟元素选择器</h5><ul><li>E~F<ul><li>一般兄弟选择器，匹配E元素只有所有的同级元素F</li></ul></li><li>E+F<ul><li>紧邻兄弟选择器，匹配紧随E元素之后的同级元素F</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">// 只匹配第四个<span class="hljs-selector-tag">p</span>标签</span><br><span class="css"><span class="hljs-selector-class">.p3</span>+<span class="hljs-selector-tag">p</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">&#125;</span><br><span class="css">// 匹配<span class="hljs-selector-class">.p3</span>之后的所有同级<span class="hljs-selector-tag">p</span>标签</span><br><span class="css"><span class="hljs-selector-class">.p3</span>~<span class="hljs-selector-tag">p</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css">// <span class="hljs-selector-class">.p3</span>之后的紧邻元素中没有<span class="hljs-selector-class">.p5</span>，所以没有匹配项</span><br><span class="css"><span class="hljs-selector-class">.p3</span>+<span class="hljs-selector-class">.p5</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">&#125;</span><br><span class="css">// 匹配<span class="hljs-selector-class">.p3</span>之后的所有同级<span class="hljs-selector-class">.p5</span></span><br><span class="css"><span class="hljs-selector-class">.p3</span>~<span class="hljs-selector-class">.p5</span> &#123;</span><br><span class="css">  <span class="hljs-attribute">background-color</span>: purple;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p5&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p3&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p5&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-6、属性选择器"><a href="#2-6、属性选择器" class="headerlink" title="2.6、属性选择器"></a>2.6、属性选择器</h5><ul><li>E[att=val]</li><li>匹配所有att属性等于“val”的E元素</li></ul><h5 id="2-7、伪类选择器（一般用于a标签）"><a href="#2-7、伪类选择器（一般用于a标签）" class="headerlink" title="2.7、伪类选择器（一般用于a标签）"></a>2.7、伪类选择器（一般用于a标签）</h5><ul><li>:link 未访问的链接</li><li>:visited 已访问的链接</li><li>:hover 鼠标悬浮在链接上</li><li>:active 选定的链接</li></ul><h5 id="2-8、伪元素选择器"><a href="#2-8、伪元素选择器" class="headerlink" title="2.8、伪元素选择器"></a>2.8、伪元素选择器</h5><ul><li>::first-letter 第一个字符的样式</li><li>::first-line 第一行的样式</li><li>::before 在元素内容最前面添加的内容，需要配合content属性使用</li><li>::after 在元素内容最后面添加的内容，需要配合content属性使用<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>:before &#123;<br>    content: <span class="hljs-string">&#x27;添加的内容&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="3、选择器优先级"><a href="#3、选择器优先级" class="headerlink" title="3、选择器优先级"></a>3、选择器优先级</h4><ul><li>行内样式&gt;id选择器&gt;类选择器&gt;标签选择器</li><li>!important，使某个样式有最高优先级（比行内样式还要高，一般用在css覆盖javascript设置上）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.class1</span> &#123;<br>    <span class="hljs-attribute">color</span>: red <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="三、常用css属性"><a href="#三、常用css属性" class="headerlink" title="三、常用css属性"></a>三、常用css属性</h3><h4 id="1、字体属性"><a href="#1、字体属性" class="headerlink" title="1、字体属性"></a>1、字体属性</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E5%AD%97%E4%BD%93%E5%B1%9E%E6%80%A7.png" alt="字体属性"></p><h4 id="2、文本属性"><a href="#2、文本属性" class="headerlink" title="2、文本属性"></a>2、文本属性</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E6%96%87%E6%9C%AC%E5%B1%9E%E6%80%A7.png" alt="文本属性"></p><h4 id="3、背景属性"><a href="#3、背景属性" class="headerlink" title="3、背景属性"></a>3、背景属性</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E8%83%8C%E6%99%AF%E5%B1%9E%E6%80%A7.png" alt="背景属性"></p><h4 id="4、列表属性"><a href="#4、列表属性" class="headerlink" title="4、列表属性"></a>4、列表属性</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E5%88%97%E8%A1%A8%E5%B1%9E%E6%80%A7.png" alt="列表属性"></p><h4 id="5、表格属性"><a href="#5、表格属性" class="headerlink" title="5、表格属性"></a>5、表格属性</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E8%A1%A8%E6%A0%BC%E5%B1%9E%E6%80%A7.png" alt="表格属性"></p><h3 id="四、元素实际占用空间"><a href="#四、元素实际占用空间" class="headerlink" title="四、元素实际占用空间"></a>四、元素实际占用空间</h3><p><strong>元素实际占用空间 = 宽/高 + 内边距 + 边框 + 外边距</strong></p><h3 id="五、定位position（重点）"><a href="#五、定位position（重点）" class="headerlink" title="五、定位position（重点）"></a>五、<a href="https://www.cnblogs.com/qianguyihao/p/8296748.html">定位position（重点）</a></h3><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E5%AE%9A%E4%BD%8D%E7%B1%BB%E5%9E%8B.png" alt="定位类型"></p><h4 id="1、相对定位relative（不脱标，占位置）"><a href="#1、相对定位relative（不脱标，占位置）" class="headerlink" title="1、相对定位relative（不脱标，占位置）"></a>1、相对定位relative（不脱标，占位置）</h4><ul><li>相对定位：让元素相对于自己原来的位置，进行位置调整（可用于盒子的位置微调）</li><li>相对定位特点：<ol><li>它是相对于自己原本的位置来移动的（移动位置的时候参照点是自己原来的位置）</li><li>在标准流中占有位置，后面的盒子仍然以标准流的方式对待它（不脱标，标准流中占有位置）</li></ol></li><li>相对定位用途：<ol><li>微调元素</li><li>做绝对定位的参考</li></ol></li><li>相对定位的定位值（值为正数，负数则相反）<ul><li>left：盒子右移</li><li>right：盒子左移</li><li>top：盒子下移</li><li>bottom：盒子上移</li></ul></li></ul><h4 id="2、绝对定位absolute（脱标，不占位置）"><a href="#2、绝对定位absolute（脱标，不占位置）" class="headerlink" title="2、绝对定位absolute（脱标，不占位置）"></a>2、绝对定位absolute（脱标，不占位置）</h4><ul><li>绝对定位：定义横纵坐标，原点在父容器的左上角或左下角。横坐标用left表示，纵坐标用top或者bottom表示。</li><li>绝对定位之后，标签就不区分所谓的行内元素、块级元素了，不需要display:block就可以设置宽高了</li></ul><h5 id="2-1、以浏览器为参考点（当祖先元素没有定位时）"><a href="#2-1、以浏览器为参考点（当祖先元素没有定位时）" class="headerlink" title="2.1、以浏览器为参考点（当祖先元素没有定位时）"></a>2.1、以浏览器为参考点（当祖先元素没有定位时）</h5><ul><li>横坐标用left描述</li><li>纵坐标如果用top描述，那参考点就是页面的左上角，而不是浏览器的左上角</li><li>纵坐标如果用bottom描述，那参考点就是浏览器首屏窗口尺寸<br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%8F%82%E8%80%83%E7%82%B91.png" alt="绝对定位参考点">  <img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%8F%82%E8%80%83%E7%82%B92.png" alt="绝对定位参考点"></li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%8F%82%E8%80%83%E7%82%B9%E9%97%AE%E9%A2%98.png" alt="绝对定位参考点问题"></p><h5 id="2-2、以盒子为参考点"><a href="#2-2、以盒子为参考点" class="headerlink" title="2.2、以盒子为参考点"></a>2.2、以盒子为参考点</h5><ul><li>一个绝对定位的元素，如果父辈元素中也出现了定位（无论是绝对定位、相对定位、固定定位）的元素，那将以该祖先元素为参考点<ul><li>最近的已定位的祖先元素，不一定是父亲</li><li>祖先元素不一定是相对定位</li><li>绝对定位的儿子，无视参考盒子的padding<br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E4%BB%A5%E7%9B%92%E5%AD%90%E4%B8%BA%E5%8F%82%E8%80%83%E7%82%B9.png" alt="绝对定位以盒子为参考点"></li></ul></li></ul><h5 id="2-3、让绝对定位的盒子居中"><a href="#2-3、让绝对定位的盒子居中" class="headerlink" title="2.3、让绝对定位的盒子居中"></a>2.3、让绝对定位的盒子居中</h5><ul><li>如果想让一个标准文档流中的盒子居中（水平方向看），可以将其设置margin: 0 auto;属性</li><li>可当盒子使用绝对定位时，它已经脱离了标准文档流，让它居中可以使用如下方法（left: 50%; margin-left: 负的宽度的一半）：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>    <span class="hljs-attribute">position</span>: absolute; <span class="hljs-comment">/* 绝对定位的盒子 */</span> <br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;            <span class="hljs-comment">/* 首先让左边线居中 */</span><br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">300px</span>; <span class="hljs-comment">/* 然后左移宽度（600px）的一半*/</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="3、固定定位fixed（脱标，不占位置）"><a href="#3、固定定位fixed（脱标，不占位置）" class="headerlink" title="3、固定定位fixed（脱标，不占位置）"></a>3、固定定位fixed（脱标，不占位置）</h4><ul><li>固定定位：相对浏览器窗口进行定位，无论页面怎么滚动，这个盒子显示的位置不变（IE6不兼容）</li><li>固定定位特点：<ol><li>以浏览器的可视窗口为参照点移动元素<ul><li>跟父元素没有任何关系</li><li>不随滚动条滚动</li></ul></li><li>固定定位不再占有原先的位置<ul><li>固定定位也是脱标的，其实固定定位也可以看做是一种特殊的绝对定位</li></ul></li></ol></li><li>用途：<ul><li>网页右下角的“返回顶部”</li><li>顶部导航条（假设顶部导航条的高度是60px，为了防止其他的内容被导航条覆盖，我们要给body标签设置60px的padding-top）</li></ul></li></ul><h5 id="3-1、固定定位小技巧（固定在版心右侧位置）"><a href="#3-1、固定定位小技巧（固定在版心右侧位置）" class="headerlink" title="3.1、固定定位小技巧（固定在版心右侧位置）"></a>3.1、固定定位小技巧（固定在版心右侧位置）</h5><p>小技巧：</p><ol><li>让固定定位的盒子<code>left: 50%;</code>，走到浏览器可视区（也可以看做版心）的一半位置</li><li>让固定定位的盒子<code>margin-left: 版心宽度的一半距离</code>，多走版心宽度的一半位置，就可以让固定定位的盒子贴着版心右侧对齐了</li></ol><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E5%9B%BA%E5%AE%9A%E5%AE%9A%E4%BD%8D%E5%B0%8F%E6%8A%80%E5%B7%A7.png" alt="固定定位小技巧"></p><h4 id="4、z-index属性"><a href="#4、z-index属性" class="headerlink" title="4、z-index属性"></a>4、z-index属性</h4><ul><li>z-index属性（不能加单位）：表示谁压着谁，数值大的压盖数值小的</li><li>特性：<ul><li>数值大的位于上层，数值小的位于下层</li><li>z-index值没有单位，就是一个正整数，默认值为auto</li><li>如果大家都没有z-index值，或z-index值一样，那么在HTML代码里写在后面就能在上面压住别人。定位了的元素永远能够压住没有定位的元素</li><li>只有定位了的元素才有z-index值</li><li>从父现象：如果父亲1比父亲2大，那么即使儿子1比儿子2小，儿子1也在上层</li></ul></li></ul><h4 id="5、粘性定位-sticky"><a href="#5、粘性定位-sticky" class="headerlink" title="5、粘性定位 sticky"></a>5、粘性定位 sticky</h4><ul><li>粘性定位可以被认为是相对定位和固定定位的混合。先相对定位，页面滚动到一定距离变为固定定位（一般使用js实现，而不是sticky）</li><li>粘性定位的特点：<ol><li>以浏览器的可视窗口为参照点移动元素（固定定位特点）</li><li>粘性定位占有原来的位置（相对定位的特点）</li><li>必须添加top、left、right、bottom其中一个才有效</li></ol></li><li>跟页面滚动搭配使用。兼容性较差，IE不支持</li></ul><h4 id="6、定位的拓展"><a href="#6、定位的拓展" class="headerlink" title="6、定位的拓展"></a>6、定位的拓展</h4><h5 id="6-1、定位特殊特性"><a href="#6-1、定位特殊特性" class="headerlink" title="6.1、定位特殊特性"></a>6.1、定位特殊特性</h5><p>绝对定位和固定定位也和浮动类似</p><ol><li>行内元素添加绝对或者固定定位，可以直接设置高度和宽度</li><li>块级元素添加绝对或者固定定位，如果不给宽度和高度，默认大小是内容的大小</li></ol><h5 id="6-2、脱标的盒子不会触发外边距塌陷"><a href="#6-2、脱标的盒子不会触发外边距塌陷" class="headerlink" title="6.2、脱标的盒子不会触发外边距塌陷"></a>6.2、脱标的盒子不会触发外边距塌陷</h5><ul><li>浮动元素、绝对定位（固定定位）元素都不会触发外边距合并的问题</li></ul><h5 id="6-3、绝对定位（固定定位）会完全压住盒子"><a href="#6-3、绝对定位（固定定位）会完全压住盒子" class="headerlink" title="6.3、绝对定位（固定定位）会完全压住盒子"></a>6.3、绝对定位（固定定位）会完全压住盒子</h5><ul><li>浮动元素只会压住它下面的标准流盒子，但是不会压住下面标准流盒子里面的文字（图片）<ul><li>浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的，文字会围绕浮动的元素</li></ul></li><li>绝对定位（固定定位）会压住下面标准流所有的内容</li></ul><h5 id="6-4、如果一个盒子有left属性也有right属性，则默认会执行left属性（top和buttom会执行top属性）"><a href="#6-4、如果一个盒子有left属性也有right属性，则默认会执行left属性（top和buttom会执行top属性）" class="headerlink" title="6.4、如果一个盒子有left属性也有right属性，则默认会执行left属性（top和buttom会执行top属性）"></a>6.4、如果一个盒子有left属性也有right属性，则默认会执行left属性（top和buttom会执行top属性）</h5><h3 id="六、浮动（重点）"><a href="#六、浮动（重点）" class="headerlink" title="六、浮动（重点）"></a>六、<a href="https://www.cnblogs.com/qianguyihao/p/7297736.html">浮动（重点）</a></h3><h4 id="1、标准文档流"><a href="#1、标准文档流" class="headerlink" title="1、标准文档流"></a>1、标准文档流</h4><h5 id="1-1、标准文档流的特性"><a href="#1-1、标准文档流的特性" class="headerlink" title="1.1、标准文档流的特性"></a>1.1、标准文档流的特性</h5><ul><li>1）空白折叠现象，无论多少个空格、换行、tab，都会折叠为一个空格</li><li>2）高低不齐，底边对齐（如文字和图片高度不同时，采用底部对齐）</li><li>3）自动换行</li></ul><h5 id="1-2、行内元素和块级元素的区别"><a href="#1-2、行内元素和块级元素的区别" class="headerlink" title="1.2、行内元素和块级元素的区别"></a>1.2、行内元素和块级元素的区别</h5><ul><li>行内元素：<ul><li>与其他行内元素并排</li><li>不能设置宽高，默认的宽度就是文字的宽度</li></ul></li><li>块级元素：<ul><li>独占一行，不能与其他元素并列</li><li>可以设置宽高，默认宽度为父元素的100%</li></ul></li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E4%B8%8E%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0.png" alt="行内元素与块级元素"></p><h5 id="1-3、行内元素和块级元素的相互转换"><a href="#1-3、行内元素和块级元素的相互转换" class="headerlink" title="1.3、行内元素和块级元素的相互转换"></a>1.3、行内元素和块级元素的相互转换</h5><ul><li>块级元素转行内元素：display: inline;</li><li>行内元素转块级元素：display: block;</li></ul><h5 id="1-4、脱离标准流三种方式"><a href="#1-4、脱离标准流三种方式" class="headerlink" title="1.4、脱离标准流三种方式"></a>1.4、脱离标准流三种方式</h5><ul><li>浮动</li><li>绝对定位</li><li>固定定位</li></ul><h4 id="2、浮动的性质（不占位置）"><a href="#2、浮动的性质（不占位置）" class="headerlink" title="2、浮动的性质（不占位置）"></a>2、浮动的性质（不占位置）</h4><h5 id="2-1、浮动元素会脱标"><a href="#2-1、浮动元素会脱标" class="headerlink" title="2.1、浮动元素会脱标"></a>2.1、浮动元素会脱标</h5><ul><li>脱离标准文档流的控制（浮）移动到指定位置（动），俗称脱标</li><li>浮动的盒子不再保留原先的位置</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E6%B5%AE%E5%8A%A8%E6%BC%94%E7%A4%BA1.png" alt="浮动演示1"></p><h5 id="2-2、浮动元素一行显示且元素顶部对齐"><a href="#2-2、浮动元素一行显示且元素顶部对齐" class="headerlink" title="2.2、浮动元素一行显示且元素顶部对齐"></a>2.2、浮动元素一行显示且元素顶部对齐</h5><p>如果多个盒子都设置了浮动，则它们会按照属性值一行内显示且顶端对齐排列</p><p><strong>注意</strong>：浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E6%B5%AE%E5%8A%A8%E6%BC%94%E7%A4%BA2.png" alt="浮动演示2"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E6%B5%AE%E5%8A%A8%E6%BC%94%E7%A4%BA3.png" alt="浮动演示3"></p><h5 id="2-3、浮动元素具有行内块元素特性"><a href="#2-3、浮动元素具有行内块元素特性" class="headerlink" title="2.3、浮动元素具有行内块元素特性"></a>2.3、浮动元素具有行内块元素特性</h5><p>任何元素都可以浮动，不管原先是什么模式的元素，添加浮动后具有行内块元素相似的特性</p><ul><li>如果块级元素没有设置宽度，默认宽度和父元素一样宽，但是添加浮动后，它的大小根据内容决定</li><li>浮动的元素中间没有缝隙，是紧挨在一起的</li><li>行内元素同理</li></ul><h4 id="3、浮动的清除（清除浮动元素造成的影响）"><a href="#3、浮动的清除（清除浮动元素造成的影响）" class="headerlink" title="3、浮动的清除（清除浮动元素造成的影响）"></a>3、浮动的清除（清除浮动元素造成的影响）</h4><h5 id="3-0、为什么要清除浮动"><a href="#3-0、为什么要清除浮动" class="headerlink" title="3.0、为什么要清除浮动"></a>3.0、为什么要清除浮动</h5><ul><li>由于父级盒子很多情况下不方便给高度，但是子盒子浮动又不占用位置，最后父级盒子高度为0时，就会影响下面的标准流盒子</li><li>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8.png" alt="清除浮动"></p><h5 id="3-1、清除浮动本质"><a href="#3-1、清除浮动本质" class="headerlink" title="3.1、清除浮动本质"></a>3.1、清除浮动本质</h5><ul><li>清除浮动的本质是清除浮动元素造成的影响</li><li>如果父盒子本身有高度，则不需要清除浮动</li><li>清除浮动后，父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</li></ul><h5 id="3-2、方法一：额外标签法（不常用）"><a href="#3-2、方法一：额外标签法（不常用）" class="headerlink" title="3.2、方法一：额外标签法（不常用）"></a>3.2、方法一：额外标签法（不常用）</h5><p>额外标签法也称为隔墙法。</p><ul><li>使用：在浮动元素末尾添加一个空标签，添加样式<code>clear: both</code>，例如<code>&lt;div style=&quot;clear: both&quot;&gt;&lt;/div&gt;</code>，或者其他标签（如<br/>等）</li><li>优点：通俗易懂，书写方便</li><li>缺点：添加许多无意义的标签，结构化较差</li></ul><p><strong>注意</strong>：要求这个新的空标签必须是块级元素</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E9%A2%9D%E5%A4%96%E6%A0%87%E7%AD%BE%E6%B3%951.png" alt="额外标签法1"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E9%A2%9D%E5%A4%96%E6%A0%87%E7%AD%BE%E6%B3%952.png" alt="额外标签法2"></p><h5 id="3-3、方法二：父元素overflow（重点）"><a href="#3-3、方法二：父元素overflow（重点）" class="headerlink" title="3.3、方法二：父元素overflow（重点）"></a>3.3、方法二：父元素overflow（重点）</h5><ul><li>使用：给父元素添加overflow属性，将其属性值设置为hidden（常用）、auto或scroll</li><li>优点：代码简介</li><li>缺点：无法显示溢出的部分</li><li>overflow:hidden能够清除浮动的原因是开启了BFC,利用BFC计算高度时浮动元素也参与计算的特性</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E7%88%B6%E5%85%83%E7%B4%A0overflow1.png" alt="父元素overflow1"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E7%88%B6%E5%85%83%E7%B4%A0overflow2.png" alt="父元素overflow2"></p><h5 id="3-4、方法三：-after伪元素法（重点，代表网站：百度、淘宝、网易等）"><a href="#3-4、方法三：-after伪元素法（重点，代表网站：百度、淘宝、网易等）" class="headerlink" title="3.4、方法三：:after伪元素法（重点，代表网站：百度、淘宝、网易等）"></a>3.4、方法三：:after伪元素法（重点，代表网站：百度、淘宝、网易等）</h5><p>:after方式是额外标签法的升级版</p><ul><li>使用：给父元素添加如下属性<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearflix</span>:after &#123;<br>    content: <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">clear</span>: both;<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>&#125;<br><span class="hljs-comment">/* 兼容IE6、7 */</span><br><span class="hljs-selector-class">.clearfix</span> &#123;<br>    *zoom: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>原理：通过css在子元素末尾添加一个块级空标签，并设置<code>clear: both;</code>属性</li><li>优点：没有增加标签，结构更简单</li><li>缺点：照顾低版本浏览器</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/after%E4%BC%AA%E5%85%83%E7%B4%A0%E6%B3%951.png" alt="after伪元素法1"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/after%E4%BC%AA%E5%85%83%E7%B4%A0%E6%B3%952.png" alt="after伪元素法2"></p><h5 id="3-5、方法四：双伪元素（重点，代表网站：小米、腾讯等）"><a href="#3-5、方法四：双伪元素（重点，代表网站：小米、腾讯等）" class="headerlink" title="3.5、方法四：双伪元素（重点，代表网站：小米、腾讯等）"></a>3.5、方法四：双伪元素（重点，代表网站：小米、腾讯等）</h5><ul><li>使用：给父元素添加如下属性<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.clearfix</span>:before, .clearfix:after &#123;<br>    content: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">display</span>: table;<br>&#125;<br><span class="hljs-selector-class">.clearfix</span>:after &#123;<br>    clear: both;<br>&#125;<br><span class="hljs-comment">/* 兼容IE6、7 */</span><br><span class="hljs-selector-class">.clearfix</span> &#123;<br>    *zoom: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>原理：通过css在子元素的起始和末尾都添加一个空标签，并设置<code>clear: both;</code>属性</li><li>优点：代码更简介</li><li>缺点：照顾低版本浏览器</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E5%8F%8C%E4%BC%AA%E5%85%83%E7%B4%A01.png" alt="双伪元素1"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E5%8F%8C%E4%BC%AA%E5%85%83%E7%B4%A02.png" alt="双伪元素2"></p><h4 id="4、IE6兼容性问题"><a href="#4、IE6兼容性问题" class="headerlink" title="4、IE6兼容性问题"></a>4、IE6兼容性问题</h4><h5 id="4-1、IE6不支持height小于12px的盒子"><a href="#4-1、IE6不支持height小于12px的盒子" class="headerlink" title="4.1、IE6不支持height小于12px的盒子"></a>4.1、IE6不支持height小于12px的盒子</h5><ul><li><p>问题：设置一个height为5px、width为200px，IE 8和IE 6的显示效果如下：</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/ie%E5%85%BC%E5%AE%B91.png" alt="ie兼容1"></p></li><li><p>解决方法：将盒子的字号大小设置为小于盒子的高，比如：盒子高为5px，就把_font-size（给css属性前加上下划线，就是IE6的专有属性）设置为0px（0px&lt;5px）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">5px</span>;<br>    _font-size: <span class="hljs-number">0px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="4-2、IE6不支持overflow-hidden-清除浮动"><a href="#4-2、IE6不支持overflow-hidden-清除浮动" class="headerlink" title="4.2、IE6不支持overflow: hidden;清除浮动"></a>4.2、IE6不支持overflow: hidden;清除浮动</h5><ul><li>问题：<code>overflow: hidden;</code>让溢出盒子border的内容隐藏，这个功能IE6是支持的，不兼容的是用它来清除浮动</li><li>解决方法：追加一条<code>_zoom: 1;</code>属性，<code>_zoom: 1;</code>能触发浏览器的hasLayout机制（这个机制只有IE6有，不用深究）。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    _zoom: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="4-3、IE6的双倍margin的bug"><a href="#4-3、IE6的双倍margin的bug" class="headerlink" title="4.3、IE6的双倍margin的bug"></a>4.3、IE6的双倍margin的bug</h5><ul><li><p>问题：当出现连续浮动的元素，携带与浮动方向相同的margin时，队首的元素会出现双倍margin。</p><p>  <img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/ie%E5%85%BC%E5%AE%B93.png" alt="ie兼容3"></p></li><li><p>解决方法：</p><ul><li>1）使浮动方向与margin方向相反（推荐，作为习惯）</li><li>2）单独给队首元素设置一半的margin<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 方法一 */</span><br><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">40px</span><br>&#125;<br><br><span class="hljs-comment">/* 方法二 */</span><br><span class="hljs-selector-tag">div</span> &#123;<br>    _margin-<span class="hljs-attribute">left</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="4-4、IE6-3px的bug"><a href="#4-4、IE6-3px的bug" class="headerlink" title="4.4、IE6 3px的bug"></a>4.4、IE6 3px的bug</h5><ul><li><p>问题：儿子右浮动，且设置margin-right为10px，结果变为13px。</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/ie%E5%85%BC%E5%AE%B94.png" alt="ie兼容4"></p></li><li><p>解决方法：出现3px的bug说明代码不标准，在描述父子间的距离时，使用padding，而不是margin</p></li></ul><h4 id="5、margin相关问题"><a href="#5、margin相关问题" class="headerlink" title="5、margin相关问题"></a>5、margin相关问题</h4><h5 id="5-1、margin塌陷-margin重叠"><a href="#5-1、margin塌陷-margin重叠" class="headerlink" title="5.1、margin塌陷/margin重叠"></a>5.1、margin塌陷/margin重叠</h5><ul><li><p>标准文档流中，垂直方向的margin不叠加，取较大的值作为margin（水平方向的margin可以叠加，即水平方向没有塌陷现象）。如下图所示：</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/margin%E5%A1%8C%E9%99%B7.png" alt="margin塌陷"></p></li><li><p>如果不在标准文档流中，如盒子都浮动了，那两个盒子之间就没有塌陷现象。</p></li></ul><h5 id="5-2、盒子居中margin-0-auto"><a href="#5-2、盒子居中margin-0-auto" class="headerlink" title="5.2、盒子居中margin: 0 auto;"></a>5.2、盒子居中<code>margin: 0 auto;</code></h5><ul><li>上下的margin为0，左右的margin都尽可能的大，于是就居中了</li><li>注意：<ul><li>1）只有标准流的盒子才能使用<code>margin: 0 auto;</code>居中。当盒子浮动、绝对定位、固定定位都不能使用</li><li>2）使用<code>margin: 0 auto;</code>的盒子，必须有明确的width</li><li>3）<code>margin: 0 auto;</code>是让盒子居中，不是让盒子中的文本居中。文本居中要使用<code>text-align: center;</code></li></ul></li></ul><h5 id="5-3、描述父子之间距离时，善用父亲的padding，而不是儿子的margin"><a href="#5-3、描述父子之间距离时，善用父亲的padding，而不是儿子的margin" class="headerlink" title="5.3、描述父子之间距离时，善用父亲的padding，而不是儿子的margin"></a>5.3、描述父子之间距离时，善用父亲的padding，而不是儿子的margin</h5><ul><li><p>margin这个属性，本质上描述的是兄弟和兄弟之间的距离；最好不要用这个marign表达父子之间的距离。</p></li><li><p>问题：通过儿子的margin-top属性让其与父亲保持一定的上边距（父亲为设置border属性），却让父亲也有了margin-top属性。如下例所示：</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E5%AD%90%E5%85%83%E7%B4%A0%E8%AE%BE%E7%BD%AEmargin.png" alt="子元素设置margin"> <img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E7%88%B6%E5%85%83%E7%B4%A0%E8%AE%BE%E7%BD%AEborder%E5%AD%90%E5%85%83%E7%B4%A0%E5%86%8D%E8%AE%BE%E7%BD%AEmargin.png" alt="父元素设置border子元素再设置margin"></p></li></ul><h4 id="6、浮动元素布局注意点"><a href="#6、浮动元素布局注意点" class="headerlink" title="6、浮动元素布局注意点"></a>6、浮动元素布局注意点</h4><h5 id="6-1、浮动和标准流的父盒子搭配"><a href="#6-1、浮动和标准流的父盒子搭配" class="headerlink" title="6.1、浮动和标准流的父盒子搭配"></a>6.1、浮动和标准流的父盒子搭配</h5><ul><li>先用标准流的父元素排列上下位置，之后内部的子元素采用浮动排列左右位置</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E6%B5%AE%E5%8A%A8%E5%92%8C%E6%A0%87%E5%87%86%E6%B5%81%E7%88%B6%E7%9B%92%E5%AD%90.png" alt="浮动和标准流父盒子"></p><h5 id="6-2、一个元素浮动了，理论上其余的兄弟元素也要浮动"><a href="#6-2、一个元素浮动了，理论上其余的兄弟元素也要浮动" class="headerlink" title="6.2、一个元素浮动了，理论上其余的兄弟元素也要浮动"></a>6.2、一个元素浮动了，理论上其余的兄弟元素也要浮动</h5><ul><li>一个盒子里面有多个子盒子，其中一个盒子浮动了，那么其他的兄弟元素也应该浮动，以防止引起问题</li><li>浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E4%B8%80%E4%B8%AA%E7%9B%92%E5%AD%90%E6%B5%AE%E5%8A%A8.png" alt="一个盒子浮动"><br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E5%A4%9A%E4%B8%AA%E7%9B%92%E5%AD%90%E6%B5%AE%E5%8A%A8.png" alt="多个盒子浮动"></p><h3 id="七、其他css属性"><a href="#七、其他css属性" class="headerlink" title="七、其他css属性"></a>七、其他css属性</h3><h4 id="1、元素的显示和隐藏"><a href="#1、元素的显示和隐藏" class="headerlink" title="1、元素的显示和隐藏"></a>1、元素的显示和隐藏</h4><h5 id="1-1、display（设置元素是否显示，以及是否独占一行）"><a href="#1-1、display（设置元素是否显示，以及是否独占一行）" class="headerlink" title="1.1、display（设置元素是否显示，以及是否独占一行）"></a>1.1、display（设置元素是否显示，以及是否独占一行）</h5><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/display%E5%B1%9E%E6%80%A7.png" alt="display属性"></p><h5 id="1-2、-visibility（设置元素的显示和隐藏）"><a href="#1-2、-visibility（设置元素的显示和隐藏）" class="headerlink" title="1.2、 visibility（设置元素的显示和隐藏）"></a>1.2、 visibility（设置元素的显示和隐藏）</h5><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/visibility%E5%B1%9E%E6%80%A7.png" alt="visibility属性"></p><h5 id="1-3、区别"><a href="#1-3、区别" class="headerlink" title="1.3、区别"></a>1.3、区别</h5><ul><li>display隐藏时不再占据页面的空间，后面的元素会占用其位置</li><li>visibility隐藏时会占据页面中的空间，位置还保留在页面中，只是不显示</li></ul><h4 id="2、轮廓属性outline"><a href="#2、轮廓属性outline" class="headerlink" title="2、轮廓属性outline"></a>2、轮廓属性outline</h4><h5 id="2-1、简介"><a href="#2-1、简介" class="headerlink" title="2.1、简介"></a>2.1、简介</h5><ul><li>轮廓outline用于在元素周围绘制一个轮廓，位于border外围，可以突出显示元素</li><li>在浏览器中，当鼠标点击或使用tab键让一个表单或链接获取焦点时，该元素会有一个轮廓outline</li></ul><h5 id="2-2、常用属性"><a href="#2-2、常用属性" class="headerlink" title="2.2、常用属性"></a>2.2、常用属性</h5><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/outline%E5%B1%9E%E6%80%A7.png" alt="outline属性"></p><h5 id="2-3、outline和border的区别"><a href="#2-3、outline和border的区别" class="headerlink" title="2.3、outline和border的区别"></a>2.3、outline和border的区别</h5><ul><li>border可以引用与所有html元素，而outline主要用于表单元素、超链接元素</li><li>当元素获取焦点时会自动出现outline轮廓效果，当失去焦点时会自动消失，这是浏览器默认行为</li><li>outline不影响元素的尺寸和位置，而border会影响</li></ul><h4 id="3、最大-最小宽高"><a href="#3、最大-最小宽高" class="headerlink" title="3、最大/最小宽高"></a>3、最大/最小宽高</h4><ul><li>max-height：设置元素的最大高度</li><li>max-width：设置元素的最大宽度</li><li>min-height：设置元素的最小高度</li><li>min-width：设置元素的最小宽度</li></ul><h4 id="4、overflow属性（元素内容溢出时如何处理）"><a href="#4、overflow属性（元素内容溢出时如何处理）" class="headerlink" title="4、overflow属性（元素内容溢出时如何处理）"></a>4、overflow属性（元素内容溢出时如何处理）</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/overflow%E5%B1%9E%E6%80%A7.png" alt="overflow属性"></p><h4 id="5、cursor属性（设置光标形状）"><a href="#5、cursor属性（设置光标形状）" class="headerlink" title="5、cursor属性（设置光标形状）"></a>5、cursor属性（设置光标形状）</h4><ul><li>default：默认光标，一般为箭头</li><li>pointer：手形，光标移动超链接上时一般显示为手形</li><li>move：可移动</li><li>text：文本</li><li>wait：等待</li><li>help：帮助<br><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/cursor%E5%B1%9E%E6%80%A7.png" alt="cursor属性"></li></ul><h4 id="6、阴影"><a href="#6、阴影" class="headerlink" title="6、阴影"></a>6、阴影</h4><h5 id="6-1、盒子阴影"><a href="#6-1、盒子阴影" class="headerlink" title="6.1、盒子阴影"></a>6.1、盒子阴影</h5><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E7%9B%92%E5%AD%90%E9%98%B4%E5%BD%B1.png" alt="盒子阴影"></p><h5 id="6-2、文字阴影"><a href="#6-2、文字阴影" class="headerlink" title="6.2、文字阴影"></a>6.2、文字阴影</h5><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E6%96%87%E5%AD%97%E9%98%B4%E5%BD%B1.png" alt="文字阴影"></p><h3 id="八、css属性书写顺序"><a href="#八、css属性书写顺序" class="headerlink" title="八、css属性书写顺序"></a>八、css属性书写顺序</h3><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/css%E5%B1%9E%E6%80%A7%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F.png" alt="css属性书写顺序"></p><h3 id="九、外边距合并"><a href="#九、外边距合并" class="headerlink" title="九、外边距合并"></a>九、外边距合并</h3><p>使用margin定义块元素的垂直外边距时，可能会出现外边距合并</p><h4 id="1、相邻块元素垂直外边距的合并"><a href="#1、相邻块元素垂直外边距的合并" class="headerlink" title="1、相邻块元素垂直外边距的合并"></a>1、相邻块元素垂直外边距的合并</h4><p>当上下相邻的两个块元素（兄弟元素）相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则<strong>它们之间的垂直间距不是margin-bottom与margin-top之和，而是取两个值中的较大者</strong>，这种现象被称为相邻块元素垂直外边距的合并</p><p><strong>解决方案：</strong></p><ol><li>尽量只给一个盒子添加margin值</li><li>display: inline-block</li><li>float属性值不是”none”的元素</li><li>绝对定位</li></ol><p><img src="https://gitee.com/huqian025/my-images/raw/master/css/css%E5%9F%BA%E7%A1%80/%E5%A4%96%E8%BE%B9%E8%B7%9D%E5%90%88%E5%B9%B6.png" alt="外边距合并"></p><h4 id="2、嵌套块元素垂直外边距的塌陷"><a href="#2、嵌套块元素垂直外边距的塌陷" class="headerlink" title="2、嵌套块元素垂直外边距的塌陷"></a>2、嵌套块元素垂直外边距的塌陷</h4><p>对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值</p><p><strong>解决方案：</strong></p><ol><li>可以为父元素定义上边框</li><li>可以为父元素定义上内边距</li><li>可以为父元素添加<code>overflow: hidden;</code></li><li>浮动、固定、绝对定位的盒子不会有塌陷问题</li></ol><blockquote><p>参考资料：</p><p><a href="https://www.cnblogs.com/qianguyihao/p/8296748.html">CSS属性：定位属性（图文详解）</a></p><p><a href="https://www.cnblogs.com/qianguyihao/p/7297736.html">CSS样式—-浮动（图文详解）</a></p><p><a href="https://www.bilibili.com/video/BV14J4114768">pink老师前端视频</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>grid网格布局</title>
    <link href="/2022/02/14/grid%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/"/>
    <url>/2022/02/14/grid%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h4 id="一、容器属性"><a href="#一、容器属性" class="headerlink" title="一、容器属性"></a>一、容器属性</h4><h5 id="1-display：是否开启grid布局"><a href="#1-display：是否开启grid布局" class="headerlink" title="1. display：是否开启grid布局"></a>1. display：是否开启grid布局</h5><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    grid：指定容器采用grid布局，容器元素默认为块级元素</span><br><span class="hljs-comment">    inline-grid：指定容器采用grid布局，容器元素设为行内元素</span><br><span class="hljs-comment">*/</span><br><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid | inline-grid;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-grid-template-columns属性、grid-template-rows属性"><a href="#2-grid-template-columns属性、grid-template-rows属性" class="headerlink" title="2. grid-template-columns属性、grid-template-rows属性"></a>2. grid-template-columns属性、grid-template-rows属性</h5><ul><li>gird-template-columns属性用来定义每一列的列宽</li><li>grid-template-rows属性用来定义每一行的行高</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    <span class="hljs-comment">/* 使用绝对单位，定义三列，每列列宽为100px */</span><br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">100px</span> <span class="hljs-number">100px</span> <span class="hljs-number">100px</span>;<br>    <span class="hljs-comment">/* 使用百分比，定义三列，每列列宽为33.33% */</span><br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">33.33%</span> <span class="hljs-number">33.33%</span> <span class="hljs-number">33.33%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>**repeact()**：简化重复的值。该函数接受两个参数，第一个是重复的次数，第二个是要重复的值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    <span class="hljs-comment">/* 定义三列，每列列宽为100px */</span><br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">100px</span>);<br>    <span class="hljs-comment">/* 定义六列，第一、四列列宽为100px，第二、五列列宽为30px，第三、六列列宽为70px */</span><br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">2</span>, <span class="hljs-number">100px</span> <span class="hljs-number">30px</span> <span class="hljs-number">70px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>auto-fill关键字</strong>：自动填充，让一行/列中尽可能容纳多的单元格</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    <span class="hljs-comment">/* 每列列宽为100px，自动填充直到容器不能放置更多的列，列数视容器宽度而定 */</span><br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(auto-fill, <span class="hljs-number">100px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>fr关键字</strong>：表示多行/列之间的比例关系</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    <span class="hljs-comment">/* 定义两列，列宽相同 */</span><br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr;<br>    <span class="hljs-comment">/* 定义三列，第一列列宽为150px，第三列列宽为第二列列宽的两倍 */</span><br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">150px</span> <span class="hljs-number">1</span>fr <span class="hljs-number">2</span>fr;<br>&#125;<br></code></pre></td></tr></table></figure><p>**minmax()**：产生一个长度范围，表示长度在范围之中。该函数接受两个参数，分别为最小值和最大值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-comment">/* 定义三列，第一列和第二列列宽相等，第三列列宽不小于100px，不大于1fr */</span><br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr <span class="hljs-built_in">minmax</span>(<span class="hljs-number">100px</span>, <span class="hljs-number">1</span>fr);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>auto关键字</strong>：由浏览器决定长度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-comment">/* 定义三列，第一列和第三列列宽为100px，第二列列宽由浏览器决定，基本等于该列单元格的最大宽度 */</span><br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-number">100px</span> auto <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-grid-row-gap属性、grid-column-gap属性、grid-gap属性"><a href="#3-grid-row-gap属性、grid-column-gap属性、grid-gap属性" class="headerlink" title="3. grid-row-gap属性、grid-column-gap属性、grid-gap属性"></a>3. grid-row-gap属性、grid-column-gap属性、grid-gap属性</h5><ul><li>grid-row-gap 属性设置行与行的间隔（行间距）</li><li>grid-column-gap 属性设置列与列的间隔（列间距）</li><li>grid-gap 属性是 grid-column-gap 和 grid-row-gap 的合并简写形式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-comment">/* 行间距为20px */</span><br>    grid-row-gap: <span class="hljs-number">20px</span>;<br>    <span class="hljs-comment">/* 列间距为20px */</span><br>    grid-<span class="hljs-attribute">column-gap</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-comment">/* 行间距为20px，列间距为20px */</span><br>    grid-gap: <span class="hljs-number">20px</span> <span class="hljs-number">20px</span>;<br>    <span class="hljs-comment">/* 如果省略第二个值，浏览器认为第二个值等于第一个值 */</span><br>    grid-gap: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>根据最新标准，以上三个属性名的 grid- 前缀已经删除，grid-column-gap 写成 column-gap，grid-row-gap 写成 row-gap，grid-gap 写成 gap</p></blockquote><h5 id="4-grid-template-areas属性"><a href="#4-grid-template-areas属性" class="headerlink" title="4. grid-template-areas属性"></a>4. grid-template-areas属性</h5><ul><li>grid-template-areas属性用于定义一个区域，一个区域由单个或多个单元格组成</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    grid-gap: <span class="hljs-number">10px</span>;<br>    grid-template-<span class="hljs-attribute">columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">120px</span>);<br>    <span class="hljs-comment">/* 划分六个单元格，小数点代表空的单元格，也就是没有用到该单元格 */</span><br>    grid-template-areas: <span class="hljs-string">&quot;. header header&quot;</span><br>                                <span class="hljs-string">&quot;sidebar content content&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">/* 将类 .header .sidebar .content 所在的元素放在上面 grid-template-areas 中定义的 header sidebar content 区域中 */</span><br><span class="hljs-selector-class">.header</span> &#123;<br>    grid-area: header;<br>&#125;<br><span class="hljs-selector-class">.sidebar</span> &#123;<br>    grid-area: sidebar;<br>&#125;<br><span class="hljs-selector-class">.content</span> &#123;<br>    grid-area: content;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-grid-auto-flow属性"><a href="#5-grid-auto-flow属性" class="headerlink" title="5. grid-auto-flow属性"></a>5. grid-auto-flow属性</h5><ul><li>grid-auto-flow 属性指定容器子元素的排列方式。默认顺序是“先行后列”，即先填满第一行，再开始放入第二行</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    row：先行后列</span><br><span class="hljs-comment">    row dense：先行后列，尽可能紧密排布，尽量不出现空格</span><br><span class="hljs-comment">    column：先列后行</span><br><span class="hljs-comment">    column dense：先列后行，尽可能紧密排布，尽量不出现空格</span><br><span class="hljs-comment">*/</span><br><span class="hljs-selector-class">.container</span> &#123;<br>    grid-autp-flow: row | row dense | column | column dense;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="6-justify-items属性、align-items属性、place-items属性"><a href="#6-justify-items属性、align-items属性、place-items属性" class="headerlink" title="6. justify-items属性、align-items属性、place-items属性"></a>6. justify-items属性、align-items属性、place-items属性</h5><ul><li>justify-items 属性设置单元格内容的水平位置</li><li>align-items 属性设置单元格内容的垂直位置</li><li>place-items 属性是 align-items 属性和 justify-items 属性的合并简写形式。如果省略第二个值，浏览器会认为两个属性值相同</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    start：对齐单元格的起始边缘</span><br><span class="hljs-comment">    end：对齐单元格的结束边缘</span><br><span class="hljs-comment">    center：单元格内部居中</span><br><span class="hljs-comment">    stretch：拉伸，占满单元格的整个宽度（默认值）</span><br><span class="hljs-comment">*/</span><br><span class="hljs-selector-class">.container</span> &#123;<br>    justify-items: start | end | center | stretch;<br>    <span class="hljs-attribute">align-items</span>: start | end | center | stretch;<br>    place-items: &lt;align-items&gt; &lt;justify-items&gt;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="7-justify-content属性、align-content属性、place-content属性"><a href="#7-justify-content属性、align-content属性、place-content属性" class="headerlink" title="7. justify-content属性、align-content属性、place-content属性"></a>7. justify-content属性、align-content属性、place-content属性</h5><ul><li>justify-content 属性是整个内容区域在容器里面的水平位置</li><li>align-content 属性是整个内容区域在容器里面的垂直位置</li><li>place-content 属性是 align-content 属性和 justify-content 属性的合并简写形式。如果省略第二个值，浏览器会认为两个属性值相同</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    start：对齐容器的起始边框</span><br><span class="hljs-comment">    end：对齐容器的结束边框</span><br><span class="hljs-comment">    center：容器内部居中</span><br><span class="hljs-comment">    stretch：项目大小没有指定时，拉伸占据整个网格容器</span><br><span class="hljs-comment">    space-around：每个项目两侧的间隔相等，项目之间的间隔比项目与容器边框的间隔大一倍</span><br><span class="hljs-comment">    space-between：项目与项目的间隔相等，项目与容器边框之间没有间隔</span><br><span class="hljs-comment">    space-evenly：项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔</span><br><span class="hljs-comment">*/</span><br><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;<br>    <span class="hljs-attribute">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;<br>    place-<span class="hljs-attribute">content</span>: &lt;align-content&gt; &lt;justify-content&gt;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="8-grid-auto-columns属性、grid-auto-rows属性"><a href="#8-grid-auto-columns属性、grid-auto-rows属性" class="headerlink" title="8. grid-auto-columns属性、grid-auto-rows属性"></a>8. grid-auto-columns属性、grid-auto-rows属性</h5><ul><li>grid-auto-columns 属性和 grid-auto-rows 属性用来设置浏览器自动创建的多余网格的列宽和行高。它们的写法与 grid-template-columns 和 grid-template-rows 完全相同。如果不指定这两个属性，浏览器会根据单元格内容的大小，决定新增网格的列宽和行高</li></ul><h5 id="9-grid-template属性、grid属性（简写形式，不建议使用）"><a href="#9-grid-template属性、grid属性（简写形式，不建议使用）" class="headerlink" title="9. grid-template属性、grid属性（简写形式，不建议使用）"></a>9. grid-template属性、grid属性（简写形式，不建议使用）</h5><ul><li>grid-template 属性是 grid-template-columns、grid-template-rows 和 grid-template-areas 三个属性的合并简写形式</li><li>grid 属性是 grid-template-rows、grid-template-columns、grid-template-areas、grid-auto-rows、grid-auto-columns、grid-auto-flow 六个属性的合并简写形式</li></ul><h4 id="二、项目属性"><a href="#二、项目属性" class="headerlink" title="二、项目属性"></a>二、项目属性</h4><h5 id="1-grid-column-start属性、grid-column-end属性、grid-row-start属性、grid-row-end属性"><a href="#1-grid-column-start属性、grid-column-end属性、grid-row-start属性、grid-row-end属性" class="headerlink" title="1. grid-column-start属性、grid-column-end属性、grid-row-start属性、grid-row-end属性"></a>1. grid-column-start属性、grid-column-end属性、grid-row-start属性、grid-row-end属性</h5><ul><li>grid-column-start 属性表示项目左边框所在的垂直网格线</li><li>grid-column-end 属性表示项目右边框所在的垂直网格线</li><li>grid-row-start 属性表示项目上边框所在的水平网格线</li><li>grid-row-end 属性表示项目下边框所在的水平网格线</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br>    grid-column-start: <span class="hljs-number">1</span>;<br>    grid-column-end: <span class="hljs-number">2</span>;<br>    grid-row-start: <span class="hljs-number">1</span>;<br>    grid-row-end: <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-grid-column属性、grid-row属性"><a href="#2-grid-column属性、grid-row属性" class="headerlink" title="2. grid-column属性、grid-row属性"></a>2. grid-column属性、grid-row属性</h5><ul><li>grid-column 属性是 grid-column-start 和 grid-column-end 的合并简写形式</li><li>grid-row 属性是 grid-row-start 和 grid-row-end 的合并简写形式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span>&#123;<br>    grid-column: &lt;grid-column-start&gt; / &lt;grid-column-end&gt;;<br>    grid-row: &lt;grid-row-start&gt; / &lt;grid-row-end&gt;;<br>    <br>    <span class="hljs-comment">/* 例如 */</span><br>    grid-column: <span class="hljs-number">1</span> / <span class="hljs-number">2</span>;<br>    grid-row: <span class="hljs-number">1</span> / <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-grid-area属性"><a href="#3-grid-area属性" class="headerlink" title="3. grid-area属性"></a>3. grid-area属性</h5><ul><li>grid-area 属性指定项目放在哪个区域（在容器属性 grid-template-areas 中提及）</li><li>grid-area 属性还可以用作 grid-column-start、grid-column-end、grid-row-start、grid-row-end 的合并简写形式，直接指定项目的位置</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;<br>    grid-area: &lt;grid-row-start&gt; / &lt;grid-column-start&gt; / &lt;grid-row-end&gt; / &lt;grid-column-end&gt;;<br>    <br>    <span class="hljs-comment">/* 例如 */</span><br>    <span class="hljs-comment">/* header 为 grid-template-areas 中定义的区域 */</span><br>    grid-area: header;<br>    <span class="hljs-comment">/* 简写形式，直接指定项目位置 */</span><br>    grid-area: <span class="hljs-number">1</span> / <span class="hljs-number">1</span> / <span class="hljs-number">2</span> / <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-justify-self属性、align-self属性、place-self属性"><a href="#4-justify-self属性、align-self属性、place-self属性" class="headerlink" title="4. justify-self属性、align-self属性、place-self属性"></a>4. justify-self属性、align-self属性、place-self属性</h5><ul><li>justify-self 属性设置单元格内容的水平位置。跟 justify-items 属性的用法完全一致，但只作用于单个项目</li><li>align-self 属性设置单元格内容的垂直位置。跟 align-items 属性的用法完全一致，但之作用于单个项目</li><li>place-self 属性是 align-self 属性和 justify-self 属性的合并简写形式。如果忽略第二个值，浏览器会认为两个属性值相等</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    start：对齐单元格的起始边缘</span><br><span class="hljs-comment">    end：对齐单元格的结束边缘</span><br><span class="hljs-comment">    center：单元格内容居中</span><br><span class="hljs-comment">    stretch：拉伸，占满单元格的整个宽度（默认值）</span><br><span class="hljs-comment">*/</span><br><span class="hljs-selector-class">.item</span> &#123;<br>    justify-self: start | end | center | stretch;<br>    <span class="hljs-attribute">align-self</span>: start | end | center | stretch;<br>    place-self: &lt;align-self&gt; / &lt;justify-self&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>参考文档：<br><a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">阮一峰老师的grid布局教程</a><br><a href="https://juejin.cn/post/6854573220306255880#heading-7">掘金grid布局文章</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>flex弹性布局</title>
    <link href="/2022/02/14/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/"/>
    <url>/2022/02/14/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h4 id="一、容器属性"><a href="#一、容器属性" class="headerlink" title="一、容器属性"></a>一、容器属性</h4><h5 id="1-display：是否采用flex布局"><a href="#1-display：是否采用flex布局" class="headerlink" title="1. display：是否采用flex布局"></a>1. display：是否采用flex布局</h5><ul><li>flex：指定容器采用flex布局，容器元素默认为块级元素</li><li>inline-flex：指定容器采用flex布局，容器元素为行内元素</li></ul><h5 id="2-flex-direction：主轴的方向，及项目的排列方向"><a href="#2-flex-direction：主轴的方向，及项目的排列方向" class="headerlink" title="2. flex-direction：主轴的方向，及项目的排列方向"></a>2. flex-direction：主轴的方向，及项目的排列方向</h5><ul><li>row（默认值）：主轴为水平方向，起点在左端</li><li>row-reverse：主轴为水平方向，起点在右端</li><li>column：主轴为垂直方向，起点在上沿</li><li>column-reverse：主轴为垂直方向，起点在下沿</li></ul><h5 id="3-flex-wrap：项目如何换行"><a href="#3-flex-wrap：项目如何换行" class="headerlink" title="3. flex-wrap：项目如何换行"></a>3. flex-wrap：项目如何换行</h5><ul><li>nowrap（默认）：不换行</li><li>wrap：换行，第一行在上方</li><li>wrap-reverse：换行，第一行在下方</li></ul><h5 id="4-flex-flow：flex-direction，flex-wrap属性的简写"><a href="#4-flex-flow：flex-direction，flex-wrap属性的简写" class="headerlink" title="4. flex-flow：flex-direction，flex-wrap属性的简写"></a>4. flex-flow：flex-direction，flex-wrap属性的简写</h5><ul><li>例如：flex-flow: row wrap;</li></ul><h5 id="5-justify-content：主轴上的对齐方式"><a href="#5-justify-content：主轴上的对齐方式" class="headerlink" title="5. justify-content：主轴上的对齐方式"></a>5. justify-content：主轴上的对齐方式</h5><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</li><li>space-evenly：主轴所有间隔相等。项目之间、项目与边框之间的间隔都相等</li></ul><h5 id="6-align-items：项目在交叉轴上的对齐方式"><a href="#6-align-items：项目在交叉轴上的对齐方式" class="headerlink" title="6. align-items：项目在交叉轴上的对齐方式"></a>6. align-items：项目在交叉轴上的对齐方式</h5><ul><li>flex-start：交叉轴的起点对齐</li><li>flex-end：交叉轴的终点对齐</li><li>center：交叉轴的中点对齐</li><li>baseline: 项目的第一行文字的基线对齐</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度</li><li>normal：在flex布局中，效果和stretch一样</li></ul><h5 id="7-align-content：决定多行的flex-items在交叉轴上的对齐方式，即多根轴线的对齐方式（如果项目只有一根轴线，该属性不起作用）"><a href="#7-align-content：决定多行的flex-items在交叉轴上的对齐方式，即多根轴线的对齐方式（如果项目只有一根轴线，该属性不起作用）" class="headerlink" title="7. align-content：决定多行的flex-items在交叉轴上的对齐方式，即多根轴线的对齐方式（如果项目只有一根轴线，该属性不起作用）"></a>7. align-content：决定多行的flex-items在交叉轴上的对齐方式，即多根轴线的对齐方式（如果项目只有一根轴线，该属性不起作用）</h5><ul><li>flex-start：与交叉轴的起点对齐</li><li>flex-end：与交叉轴的终点对齐</li><li>center：与交叉轴的中点对齐</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍</li><li>space-evenly：主轴所有间隔相等。项目之间、项目与边框之间的间隔都相等</li><li>stretch（默认值）：轴线占满整个交叉轴</li></ul><h5 id="8-align-items-和-align-content-区别"><a href="#8-align-items-和-align-content-区别" class="headerlink" title="8. align-items 和 align-content 区别"></a>8. align-items 和 align-content 区别</h5><ul><li>都是设置侧轴（交叉轴，非主轴）上的对齐方式</li><li>align-items适用于单行情况下，只有上对齐、下对齐、居中和拉伸</li><li>align-content适用于换行（多行）的情况下（单行情况无效），可以设置上对齐、下对齐、居中、拉伸以及平均分配剩余空间等属性</li><li>总结就是单行找align-items，多行找align-content</li></ul><h4 id="二、项目属性"><a href="#二、项目属性" class="headerlink" title="二、项目属性"></a>二、项目属性</h4><h5 id="1-order：项目的排列顺序"><a href="#1-order：项目的排列顺序" class="headerlink" title="1. order：项目的排列顺序"></a>1. order：项目的排列顺序</h5><ul><li>order数值越小，排列越靠前，默认为0，-1比0小</li></ul><h5 id="2-flex-grow：项目的放大比例"><a href="#2-flex-grow：项目的放大比例" class="headerlink" title="2. flex-grow：项目的放大比例"></a>2. flex-grow：项目的放大比例</h5><ul><li>默认为0，即如果存在剩余空间也不放大，可以设置任意非负数字（正小数、正整数、0）。当flex-container在max axis方向上有剩余size时，flex-grow属性才会生效。flex-items扩展后的最终size不能超过max-width/max-height</li><li>如果所有flex-items的flex-grow总和sum超过1，每个flex-items扩展的size为：flex-container的剩余size * flex-grow / sum</li><li>如果所有flex-items的flex-grow总和sum不超过1，每个flex-items扩展的size为：flex-container的剩余size * flex-grow</li></ul><h5 id="3-flex-shrink：项目的缩小比例"><a href="#3-flex-shrink：项目的缩小比例" class="headerlink" title="3. flex-shrink：项目的缩小比例"></a>3. flex-shrink：项目的缩小比例</h5><ul><li>默认为1，即如果空间不足，将该项目缩小，可以设置任意非负数字（正小数、正整数、0）。当flex-items在max axis方向上超过了flex-container的size，flex-shrink属性才会生效。flex-items收缩后的最终size不能小于min-width/min-height</li><li>如果所有flex-items的flex-shrink总和sum超过1，每个flex-items收缩的size为：flex-items超出flex-container的size * flex-shrink / sum</li><li>如果所有flex-items的flex-shrink总和sum不超过1，每个flex-items收缩的size为：flex-items超出flex-container的size * flex-shrink</li></ul><h5 id="4-flex-basis：在分配多余空间之前，项目占据的主轴空间"><a href="#4-flex-basis：在分配多余空间之前，项目占据的主轴空间" class="headerlink" title="4. flex-basis：在分配多余空间之前，项目占据的主轴空间"></a>4. flex-basis：在分配多余空间之前，项目占据的主轴空间</h5><ul><li>浏览器根据这个属性，计算主轴是否有多余空间，默认值为auto，即项目本来的大小</li><li>决定flex-items最终base size的因素，从优先级高到低：max-width/max-height/min-width/min-height -&gt; flex-basis -&gt; width/height -&gt; 内容本身的size</li></ul><h5 id="5-flex：flex-grow，flex-shrink，flex-basis属性的简写"><a href="#5-flex：flex-grow，flex-shrink，flex-basis属性的简写" class="headerlink" title="5. flex：flex-grow，flex-shrink，flex-basis属性的简写"></a>5. flex：flex-grow，flex-shrink，flex-basis属性的简写</h5><ul><li>默认值为0 1 auto，后两个属性可选</li><li>该属性有两个快捷值：auto -&gt; 1 1 auto，none -&gt; 0 0 auto</li><li>优先使用该属性，而不是单独写三个分离的属性，因为浏览器会推算相关值</li></ul><h5 id="6-align-self：单个项目与其他项目不一样的对齐方式，可覆盖align-items属性"><a href="#6-align-self：单个项目与其他项目不一样的对齐方式，可覆盖align-items属性" class="headerlink" title="6. align-self：单个项目与其他项目不一样的对齐方式，可覆盖align-items属性"></a>6. align-self：单个项目与其他项目不一样的对齐方式，可覆盖align-items属性</h5><ul><li>默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch</li><li>该属性可能取6个值，除了auto，其他都与align-items属性完全一致</li></ul><blockquote><p>参考文档：<a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">阮一峰老师的flex布局教程</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用vscode构建uniapp项目</title>
    <link href="/2022/01/26/%E4%BD%BF%E7%94%A8vscode%E6%9E%84%E5%BB%BAuniapp%E9%A1%B9%E7%9B%AE/"/>
    <url>/2022/01/26/%E4%BD%BF%E7%94%A8vscode%E6%9E%84%E5%BB%BAuniapp%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="1-全局安装vue-cli"><a href="#1-全局安装vue-cli" class="headerlink" title="1. 全局安装vue-cli"></a>1. 全局安装vue-cli</h4><figure class="highlight powershell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs powershell">npm install <span class="hljs-literal">-g</span> @vue/<span class="hljs-built_in">cli</span><br></code></pre></td></tr></table></figure><h4 id="2-通过vue-cli创建uniapp项目"><a href="#2-通过vue-cli创建uniapp项目" class="headerlink" title="2. 通过vue-cli创建uniapp项目"></a>2. 通过vue-cli创建uniapp项目</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># my-project为项目名称</span><br>vue create <span class="hljs-literal">-p</span> dcloudio/uni<span class="hljs-literal">-preset</span><span class="hljs-literal">-vue</span> my<span class="hljs-literal">-project</span><br></code></pre></td></tr></table></figure><p>项目创建过程中，会提示选择模板，选择默认模板即可</p><h4 id="3-安装语法提示"><a href="#3-安装语法提示" class="headerlink" title="3. 安装语法提示"></a>3. 安装语法提示</h4><ol><li>vscode插件商店中搜索并安装vue语法提示插件vetur</li><li>安装uniapp框架提供的组件语法提示</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 安装uniapp框架提供的组件语法提示</span><br>npm i @dcloudio/uni<span class="hljs-literal">-helper</span><span class="hljs-literal">-json</span><br></code></pre></td></tr></table></figure><h4 id="4-导入hbuildx自带的代码块"><a href="#4-导入hbuildx自带的代码块" class="headerlink" title="4. 导入hbuildx自带的代码块"></a>4. 导入hbuildx自带的代码块</h4><p>从 github 下载 <a href="https://github.com/zhetengbiji/uniapp-snippets-vscode">uni-app 代码块</a>，放到项目目录下的 .vscode 目录即可拥有和 HBuilderX 一样的代码块</p><h4 id="5-运行发布项目"><a href="#5-运行发布项目" class="headerlink" title="5. 运行发布项目"></a>5. 运行发布项目</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 运行项目</span><br>npm run dev:%PLATFORM%<br><br><span class="hljs-comment"># npm run serve指令实际执行的是npm run dev:h5，即将项目运行至浏览器</span><br>npm run serve<br><br><span class="hljs-comment"># 发布项目</span><br>npm run build:%PLATFORM%<br></code></pre></td></tr></table></figure><p>%PLATFORM% 可取值如下：<br>| 值         | 平台         |<br>| ———- | ———— |<br>| h5         | H5           |<br>| mp-alipay  | 支付宝小程序 |<br>| mp-baidu   | 百度小程序   |<br>| mp-weixin  | 微信小程序   |<br>| mp-toutiao | 头条小程序   |<br>| mp-qq      | qq小程序     |</p><p><a href="https://ask.dcloud.net.cn/article/36286">参考文档</a></p>]]></content>
    
    
    <categories>
      
      <category>uniapp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
      <tag>uniapp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git操作汇总</title>
    <link href="/2022/01/26/git%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/"/>
    <url>/2022/01/26/git%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="一、命令汇总"><a href="#一、命令汇总" class="headerlink" title="一、命令汇总"></a>一、命令汇总</h3><h4 id="1-git-init"><a href="#1-git-init" class="headerlink" title="1. git init"></a>1. git init</h4><figure class="highlight powershell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 初始化仓库</span><br>git init<br></code></pre></td></tr></table></figure><h4 id="2-git-pull"><a href="#2-git-pull" class="headerlink" title="2. git pull"></a>2. git pull</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 从远程仓库拉取代码并合并到本地，可简写为 git pull 等同于 git fetch &amp;&amp; git merge </span><br>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;<br></code></pre></td></tr></table></figure><h4 id="3-git-fetch"><a href="#3-git-fetch" class="headerlink" title="3. git fetch"></a>3. git fetch</h4><ul><li>git fetch 与 git pull 不同在于，git fetch 只是获取远程仓库的更改，不会自动进行合并操作</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 获取远程仓库指定分支的更新</span><br>git fetch &lt;远程主机名&gt; &lt;分支名&gt;<br><span class="hljs-comment"># 获取远程仓库所有分支的更新</span><br>git fetch -<span class="hljs-literal">-all</span><br></code></pre></td></tr></table></figure><h4 id="4-git-add"><a href="#4-git-add" class="headerlink" title="4. git add"></a>4. git add</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 添加一个或多个文件修改文件至暂存区</span><br>git add xxx<br><span class="hljs-comment"># 不加参数默认为将修改操作的文件和未跟踪新添加的文件添加到git系统的暂存区，注意不包括删除</span><br>git add .<br><span class="hljs-comment"># -u 表示将已跟踪文件中的修改和删除的文件添加到暂存区，不包括新增加的文件，注意这些被删除的文件被加入到暂存区再被提交并推送到服务器的版本库之后这个文件就会从git系统中消失了</span><br>git add <span class="hljs-literal">-u</span> .<br><span class="hljs-comment"># -A 表示将所有的已跟踪的文件的修改与删除和新增的未跟踪的文件都添加到暂存区</span><br>git add <span class="hljs-literal">-A</span> .<br></code></pre></td></tr></table></figure><h4 id="5-git-commit"><a href="#5-git-commit" class="headerlink" title="5. git commit"></a>5. git commit</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># -m 参数表示可以直接输入后面的“message”，如果不加 -m参数，那么是不能直接输入message的，而是会调用一个编辑器一般是vim来让你输入这个message，message即是我们用来简要说明这次提交的语句</span><br>git commit <span class="hljs-literal">-m</span> <span class="hljs-string">&quot;xxx&quot;</span><br><span class="hljs-comment"># -a 参数可以将所有已跟踪文件中的执行修改或删除操作的文件都提交到本地仓库，即使它们没有经过git add添加到暂存区，注意: 新加的文件（即没有被git系统管理的文件）是不能被提交到本地仓库的，-am等同于-a -m</span><br>git commit <span class="hljs-literal">-am</span> <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></td></tr></table></figure><h4 id="6-git-push"><a href="#6-git-push" class="headerlink" title="6. git push"></a>6. git push</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建</span><br>git push &lt;远程主机名&gt; &lt;分支名&gt;<br><span class="hljs-comment"># 如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支</span><br>git push &lt;远程主机名&gt;<br><span class="hljs-comment"># 如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名</span><br>git push<br></code></pre></td></tr></table></figure><h4 id="7-git-branch"><a href="#7-git-branch" class="headerlink" title="7. git branch"></a>7. git branch</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 新建本地分支，但不切换</span><br>git branch &lt;分支名&gt; <br><span class="hljs-comment"># 查看本地分支</span><br>git branch<br><span class="hljs-comment"># 查看远程分支</span><br>git branch <span class="hljs-literal">-r</span><br><span class="hljs-comment"># 查看本地和远程分支</span><br>git branch <span class="hljs-literal">-a</span><br><span class="hljs-comment"># 删除本地分支</span><br>git branch <span class="hljs-literal">-D</span> &lt;分支名&gt;<br><span class="hljs-comment"># 重新命名分支</span><br>git branch <span class="hljs-literal">-m</span> &lt;旧分支名&gt; &lt;新分支名&gt;<br></code></pre></td></tr></table></figure><h4 id="8-git-tag"><a href="#8-git-tag" class="headerlink" title="8. git tag"></a>8. git tag</h4><p><strong>V1.0为tag版本号</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 创建本地tag</span><br>git tag <span class="hljs-literal">-a</span> V1.<span class="hljs-number">0</span> <span class="hljs-literal">-m</span> <span class="hljs-string">&#x27;附加信息&#x27;</span><br><span class="hljs-comment"># 将本地tag同步到远程仓库</span><br>git push origin -<span class="hljs-literal">-tags</span><br><span class="hljs-comment"># 删除本地tag</span><br>git tag <span class="hljs-literal">-d</span> V1.<span class="hljs-number">0</span><br><span class="hljs-comment"># 同步删除线上tag</span><br>git push origin :refs/tags/V1.<span class="hljs-number">0</span>  <br><span class="hljs-comment"># 查看tag</span><br>git tag  <br><span class="hljs-comment"># 查看tag详情</span><br>git show V1.<span class="hljs-number">0</span>  <br></code></pre></td></tr></table></figure><h4 id="9-git-remote"><a href="#9-git-remote" class="headerlink" title="9. git remote"></a>9. git remote</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 显示关联的远程仓库别名</span><br>git remote<br><span class="hljs-comment"># 显示关联的远程仓库信息，仓库别名 + 远程仓库 url</span><br>git remote <span class="hljs-literal">-v</span><br><span class="hljs-comment"># 添加远程仓库关联，可关联多个远程（设置不同别名）</span><br>git remote add &lt;仓库别名&gt; &lt;远程仓库 url&gt;<br><span class="hljs-comment"># 删除远程仓库与本地仓库关联</span><br>git remote <span class="hljs-built_in">rm</span> &lt;仓库别名&gt;<br><span class="hljs-comment"># 修改远程仓库名别名</span><br>git remote rename &lt;旧仓库别名&gt; &lt;新仓库别名&gt;<br></code></pre></td></tr></table></figure><h3 id="二、报错汇总"><a href="#二、报错汇总" class="headerlink" title="二、报错汇总"></a>二、报错汇总</h3><h4 id="1、Reinitialized-existing-Git-repository"><a href="#1、Reinitialized-existing-Git-repository" class="headerlink" title="1、Reinitialized existing Git repository"></a>1、Reinitialized existing Git repository</h4><ul><li>将当前目录下的.git文件夹删除后重新执行<code>git init</code></li></ul><h4 id="2、The-current-branch-master-has-no-upstream-branch"><a href="#2、The-current-branch-master-has-no-upstream-branch" class="headerlink" title="2、The current branch master has no upstream branch"></a>2、The current branch master has no upstream branch</h4><ul><li>没有将本地仓库分支与远程仓库分支关联</li><li>方法一：使用<code>git push --set-upstream origin master</code>命令（<a href="https://careerkarma.com/blog/git-no-upstream-branch/">最好不用</a>）</li><li>方法二：使用<code>git push -u origin master</code>命令</li></ul><h4 id="3、failed-to-push-some-refs-to"><a href="#3、failed-to-push-some-refs-to" class="headerlink" title="3、failed to push some refs to"></a>3、failed to push some refs to</h4><ul><li>远程仓库与本地仓库代码不一致，使用<code>git pull --rebase origin master</code>将远程仓库合并到本地仓库中</li><li>–rebase的作用是取消本地仓库刚提交的commit，并将其合并至新的本地仓库中</li><li>再使用<code>git push -u origin master</code>将本地仓库提交至远程仓库</li></ul><h3 id="三、生成ssh公钥"><a href="#三、生成ssh公钥" class="headerlink" title="三、生成ssh公钥"></a>三、生成ssh公钥</h3><p>执行<code>ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot;</code>命令后三次回车，在**~/.ssh（windows为对应用户文件夹下的.ssh目录）**目录下会生成<code>id_rsa</code>（ssh私钥）和<code>id_rsa.pub</code>（ssh公钥）两个文件</p><blockquote><p>注意：这里的 <a href="mailto:&#x78;&#x78;&#120;&#120;&#x78;&#x40;&#x78;&#x78;&#120;&#x78;&#120;&#46;&#x63;&#111;&#x6d;">&#x78;&#x78;&#120;&#120;&#x78;&#x40;&#x78;&#x78;&#120;&#x78;&#120;&#46;&#x63;&#111;&#x6d;</a> 只是生成的 sshkey 的名称，并不约束或要求具体命名为某个邮箱。现网的大部分教程均讲解的使用邮箱生成，其一开始的初衷仅仅是为了便于辨识所以使用了邮箱。</p></blockquote><ul><li>补充：将ssh公钥添加至github/gitee后，可以使用<code>ssh -T git@github.com</code>或<code>ssh -T git@gitee.com</code>来测试ssh是否添加成功。首次使用需要确认并添加主机到本机SSH可信列表。若返回 Hi XXX! You’ve successfully authenticated, but Gitee.com does not provide shell access. 内容，则证明添加成功。</li></ul><blockquote><p>参考文档：<br><a href="https://juejin.cn/post/6974184935804534815">掘金：我在工作中是如何使用 git 的</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次使用Hexo + GitHub Pages搭建blog</title>
    <link href="/2022/01/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BAblog/"/>
    <url>/2022/01/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BAblog/</url>
    
    <content type="html"><![CDATA[<p>前几天在掘金摸鱼看到首页推荐了一个Hexo+GitHub Pages自己搭建博客的文章，于是开始自己摸索去搭建的试一下。按照<a href="https://hexo.io/zh-cn/docs/">官网的步骤</a>初始化了一个Hexo项目，并根据官方的GitHub Pages部署文档尝试着部署项目。</p><hr><p>本地项目搭建完成，github pages搭建完成，ssh配置完成后：</p><h4 id="1-修改-config-yml配置文件"><a href="#1-修改-config-yml配置文件" class="headerlink" title="1. 修改_config.yml配置文件"></a>1. 修改_config.yml配置文件</h4><p>在项目根目录下的_config.yml配置文件最后改为</p><figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">远程仓库地址</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h4 id="2-安装hexo-deployer-git插件"><a href="#2-安装hexo-deployer-git插件" class="headerlink" title="2. 安装hexo-deployer-git插件"></a>2. 安装hexo-deployer-git插件</h4><p>安装部署插件hexo-deployer-git，必须安装不然会报错，<a href="https://github.com/hexojs/hexo/issues/1040">详情可以看官方这个issues</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install hexo<span class="hljs-literal">-deployer</span><span class="hljs-literal">-git</span> -<span class="hljs-literal">-save</span><br></code></pre></td></tr></table></figure><h4 id="3-部署"><a href="#3-部署" class="headerlink" title="3. 部署"></a>3. 部署</h4><p>执行部署上传命令即可访问线上博客项目，g 是 generate 缩写，d 是 deploy 缩写。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 生成静态文件</span><br>hexo g<br><span class="hljs-comment"># 启动本地服务</span><br>hexo server<br><span class="hljs-comment"># 部署网站</span><br>hexo d<br><span class="hljs-comment"># 文件生成后立即部署网站</span><br>hexo g <span class="hljs-literal">-d</span><br><span class="hljs-comment"># 清除缓存，建议每次部署前先清除缓存</span><br>hexo clean<br></code></pre></td></tr></table></figure><h4 id="4-新建文章"><a href="#4-新建文章" class="headerlink" title="4. 新建文章"></a>4. 新建文章</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 新建一篇文章</span><br>hexo new [<span class="hljs-type">layout</span>] &lt;title&gt;<br><span class="hljs-comment"># 例如</span><br>hexo new <span class="hljs-string">&quot;post title with whitespace&quot;</span><br></code></pre></td></tr></table></figure><p>如果没有设置 layout 的话，默认使用_config.yml 中的 default_layout 参数代替。如果标题包含空格的话，需要使用引号括起来。<strong>title必须设置</strong>。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-p, –path</td><td>自定义新文章的路径</td></tr><tr><td>-r, –replace</td><td>如果存在同名文章，将其替换</td></tr><tr><td>-s, –slug</td><td>文章的Slug，作为新文章的文件名和发布后的URL</td></tr></tbody></table><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 创建一个 source/about/me.md 文件，且标题为 About me</span><br>hexo new page -<span class="hljs-literal">-path</span> about/me <span class="hljs-string">&quot;About me&quot;</span><br></code></pre></td></tr></table></figure><h4 id="5-分类"><a href="#5-分类" class="headerlink" title="5. 分类"></a>5. 分类</h4><p><strong>分类具有顺序性和层次性，例如Foo, Bar 不等于 Bar, Foo</strong></p><ol><li><p>子分类</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">categories:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Diary</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Life</span><br></code></pre></td></tr></table></figure><p>分类 Life 会成为 Diary 的子分类，而不是并列分类</p></li><li><p>并列分类</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">categories:</span><br>    <span class="hljs-bullet">-</span> [<span class="hljs-string">Diary</span>]<br>    <span class="hljs-bullet">-</span> [<span class="hljs-string">Life</span>]<br></code></pre></td></tr></table></figure><p>Diary 和 Life 为并列分类</p></li><li><p>并列+子分类</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">categories:</span><br>    <span class="hljs-bullet">-</span> [<span class="hljs-string">Diary</span>, <span class="hljs-string">PlayStation</span>]<br>    <span class="hljs-bullet">-</span> [<span class="hljs-string">Diary</span>, <span class="hljs-string">Games</span>]<br>    <span class="hljs-bullet">-</span> [<span class="hljs-string">Life</span>]<br></code></pre></td></tr></table></figure><p>PlayStation 和 Games 分别都是父分类 Diary 的子分类，同时 Life 是一个没有子分类的分类</p></li></ol><h4 id="6-标签"><a href="#6-标签" class="headerlink" title="6. 标签"></a>6. 标签</h4><p><strong>标签没有顺序和层次</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">PS3</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Games</span><br></code></pre></td></tr></table></figure><p>PS3 和 Games 是两个独立的标签，没有层级和顺序</p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>官方部署文档如下：</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/%E5%85%B6%E4%BB%96/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BAblog/hexo%E5%AE%98%E6%96%B9%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.png" alt="官方部署文档"></p><p>再使用Travis CI时，官方提示需要添加一个plan才能使用，但添加plan<strong>需要stripe信用卡信息</strong>，直接劝退。</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/%E5%85%B6%E4%BB%96/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BAblog/Travis_CI%E6%B7%BB%E5%8A%A0plan.png" alt="Travis CI添加plan"><br><img src="https://gitee.com/huqian025/my-images/raw/master/%E5%85%B6%E4%BB%96/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BAblog/Travis_CI%E6%B7%BB%E5%8A%A0plan-%E4%B8%AD%E6%96%87.png" alt="Travis CI添加plan-中文"></p><p>最后参照了一下<a href="https://segmentfault.com/a/1190000017986794#item-9">大佬的文章</a>，本来都想记录分享一下搭建过程的，但是大佬写的真的太细了。。</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Array.apply(null, { length: 2 })是什么意思</title>
    <link href="/2022/01/26/Array-apply-null-length-2-%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/"/>
    <url>/2022/01/26/Array-apply-null-length-2-%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</url>
    
    <content type="html"><![CDATA[<p>看到vue文档的示例中，使用以下代码创建了2个相同的段落</p><blockquote><p>注：文档中length的值为20，这里方便演示改为了2</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs js">render: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">createElement</span>) </span>&#123; <br>    <span class="hljs-keyword">return</span> createElement(<span class="hljs-string">&#x27;div&#x27;</span>, <br>        <span class="hljs-built_in">Array</span>.apply(<span class="hljs-literal">null</span>, &#123; <span class="hljs-attr">length</span>: <span class="hljs-number">2</span> &#125;).map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <br>            <span class="hljs-keyword">return</span> createElement(<span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;hi&#x27;</span>) <br>        &#125;) <br>    ) <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-apply方法中第二个参数-length-2-是什么意思"><a href="#1-apply方法中第二个参数-length-2-是什么意思" class="headerlink" title="1. apply方法中第二个参数{length: 2}是什么意思"></a>1. apply方法中第二个参数{length: 2}是什么意思</h4><p><strong>对象{length: 2}是一个类数组对象，因为没有初始化下标0，1的值，所以获取0，1下标的值得到的都是undefined。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 类数组对象可以转成真正的数组</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-built_in">Array</span>.prototype.slice.call(&#123;<span class="hljs-attr">length</span>: <span class="hljs-number">2</span>&#125;);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Array</span>.isArray(a)) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="2-Array-apply-null-length-2-是什么意思"><a href="#2-Array-apply-null-length-2-是什么意思" class="headerlink" title="2. Array.apply(null, { length: 2 })是什么意思"></a>2. Array.apply(null, { length: 2 })是什么意思</h4><p><strong>ES5开始apply函数的第二个参数除了可以是数组外，还可以是类数组对象（即包含length属性，且length属性值是个数字的对象）</strong></p><p>直接调用Array函数和new方式调用是等价的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">cosnt a = <span class="hljs-built_in">Array</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// 等价于const a = new Array(2)</span><br></code></pre></td></tr></table></figure><p>因此Array.apply(null, { length: 2 })就是创建一个存储两个undefined的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Array</span>.apply(<span class="hljs-literal">null</span>, &#123; <span class="hljs-attr">length</span>: <span class="hljs-number">2</span> &#125;)<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-built_in">Array</span>.apply(<span class="hljs-literal">null</span>, [<span class="hljs-literal">undefined</span>, <span class="hljs-literal">undefined</span>])<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-built_in">Array</span>(<span class="hljs-literal">undefined</span>, <span class="hljs-literal">undefined</span>)<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-literal">undefined</span>, <span class="hljs-literal">undefined</span>)<br></code></pre></td></tr></table></figure><h4 id="3-Array-2-与Array-apply-null-length-2-的区别"><a href="#3-Array-2-与Array-apply-null-length-2-的区别" class="headerlink" title="3. Array(2)与Array.apply(null, { length: 2 })的区别"></a>3. Array(2)与Array.apply(null, { length: 2 })的区别</h4><ul><li>相同点：都是创建一个长度为2的数组</li><li>不同点：<strong>Array(2)创建的数组元素没有被初始化，Array.apply(null, { length: 2 })创建的数组每个元素都被赋值为undefined。</strong></li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/js/Array.apply(null,%20%7B%20length%202%20%7D)%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84.png" alt="创建数组"></p><h4 id="4-vue文档中为什么用Array-apply-null-length-2"><a href="#4-vue文档中为什么用Array-apply-null-length-2" class="headerlink" title="4. vue文档中为什么用Array.apply(null, { length: 2 })"></a>4. vue文档中为什么用Array.apply(null, { length: 2 })</h4><p><strong>map函数不会遍历数组中没有初始化或者被delete的元素</strong>（有相同限制还有forEach, reduce方法），根据上述“Array(2)与Array.apply(null, { length: 2 })的区别”可以得知，Array(2)创建的数组map的回调函数不会执行，Array.apply(null, { length: 2 })创建的数组map的回调函数才会执行两次</p><p><img src="https://gitee.com/huqian025/my-images/raw/master/js/Array.apply(null,%20%7B%20length%202%20%7D)%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/%E8%B0%83%E7%94%A8map.png" alt="调用map"></p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>按位取反(~)</title>
    <link href="/2022/01/10/%E6%8C%89%E4%BD%8D%E5%8F%96%E5%8F%8D/"/>
    <url>/2022/01/10/%E6%8C%89%E4%BD%8D%E5%8F%96%E5%8F%8D/</url>
    
    <content type="html"><![CDATA[<p><strong>二进制数在内存中是以补码的形式存放的</strong></p><h3 id="1、原码、反码、补码"><a href="#1、原码、反码、补码" class="headerlink" title="1、原码、反码、补码"></a>1、原码、反码、补码</h3><h4 id="1-1、正数"><a href="#1-1、正数" class="headerlink" title="1.1、正数"></a>1.1、正数</h4><ul><li>原码：符号位0（代表+号），加上数字的二进制形式</li><li>正数原码、反码、补码相等</li></ul><h4 id="1-2、负数"><a href="#1-2、负数" class="headerlink" title="1.2、负数"></a>1.2、负数</h4><ul><li>原码：符号位1（代表-号），加上数字的二进制形式</li><li>反码：相对于原码符号位不变，数值位依次取反（0变1,1变0）</li><li>补码：相对于原码符号位不变，数值位依次取反，再加1（即补码=反码+1）</li></ul><h4 id="1-2、零"><a href="#1-2、零" class="headerlink" title="1.2、零"></a>1.2、零</h4><ul><li>0有+0和-0两种形式，分别按照上面的计算即可</li></ul><figure class="highlight subunit"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-string">+0</span>:<br>    1. 计算原码：0000<br>    2. 计算补码：0000（正数原码与补码相同）<br>    3. 对补码依次取反：1111（取反后数字的补码，由符号位可知为负数）<br>    4. 取反后数字反码：1110（负数的反码=补码<span class="hljs-string">-1</span>）<br>    5. 取反后数字原码：1001（相对于反码符号位不变，数值位依次取反）<br>    6. 转化为十进制：<span class="hljs-string">-1</span><br>    <br><span class="hljs-string">-0</span>:<br>    1. 计算原码：1000<br>    2. 计算反码：1111（相对于原码符号位不变，数值位依次取反）<br>    3. 计算补码：0000（负数补码=反码<span class="hljs-string">+1</span>）<br>    4. 对补码依次取反：1111（取反后数字的补码，由符号位可知为负数）<br>    5. 取反后数字反码：1110（负数的反码=补码<span class="hljs-string">-1</span>）<br>    6. 取反后数字原码：1001（相对于反码符号位不变，数值位依次取反）<br>    7. 转化为十进制：<span class="hljs-string">-1</span><br></code></pre></td></tr></table></figure><p><strong>为什么-0的补码是0000？</strong></p><p><img src="https://gitee.com/huqian025/my-images/raw/master/%E5%85%B6%E4%BB%96/%E6%8C%89%E4%BD%8D%E5%8F%96%E5%8F%8D/-0%E7%9A%84%E8%A1%A5%E7%A0%81.png" alt="-0的补码"></p><h3 id="2、按位取反原理"><a href="#2、按位取反原理" class="headerlink" title="2、按位取反原理"></a>2、按位取反原理</h3><ul><li>对数字的补码（即内存中的存储形式），进行依次取反，得到取反后数字的补码，然后将补码转换为原码，再转为10进制数即为按位取反后的数值</li></ul><p><strong>示例（以四位二进制为例）</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">+5:<br><span class="hljs-bullet">    1.</span> 计算原码：0101<br><span class="hljs-bullet">    2.</span> 计算补码：0101（正数原码与补码相同）<br><span class="hljs-bullet">    3.</span> 对补码依次取反：1010（取反后数字的补码，由符号位可知为负数）<br><span class="hljs-bullet">    4.</span> 取反后数字反码：1001（负数的反码=补码-1）<br><span class="hljs-bullet">    5.</span> 取反后数字原码：1110（相对于反码符号位不变，数值位依次取反）<br><span class="hljs-bullet">    6.</span> 转化为十进制：-6<br><span class="hljs-code">    </span><br><span class="hljs-code">-4:</span><br><span class="hljs-code">    1. 计算原码：1100</span><br><span class="hljs-code">    2. 计算反码：1011（相对于原码符号位不变，数值位依次取反）</span><br><span class="hljs-code">    3. 计算补码：1100（负数补码=反码+1）</span><br><span class="hljs-code">    4. 对补码依次取反：0011（取反后数字的补码，由符号位可知为正数）</span><br><span class="hljs-code">    5. 取反后数字原码：0011（正数原码、反码、补码相同）</span><br><span class="hljs-code">    6. 转化为十进制：+3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gulp基本使用（版本3.9.1）</title>
    <link href="/2022/01/06/gulp%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%EF%BC%88%E7%89%88%E6%9C%AC3-9-1%EF%BC%89/"/>
    <url>/2022/01/06/gulp%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%EF%BC%88%E7%89%88%E6%9C%AC3-9-1%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><strong>以3.9.1版本为例，4.x版本使用参照官方文档。3.9.1不支持ES6</strong></p><h3 id="一、入门介绍"><a href="#一、入门介绍" class="headerlink" title="一、入门介绍"></a>一、入门介绍</h3><ul><li><p>gulp介绍</p><ul><li>gulp是与grunt功能类似的前端项目构建工具，也是基于nodejs的自动任务运行器</li><li>能自动化地完成javascript/coffee/sass/less/html/img/css等文件的合并、压缩、检查、监听文件变化、浏览器自动刷新、测试等任务</li><li>gulp相对于grunt更高效（异步多任务），更易于使用，插件高质量</li></ul></li><li><p>gulp特点：任务化、基于流（I/O数据流）、异步/同步</p></li></ul><p>使用：</p><ul><li><p>安装nodejs，查看版本：node -v</p></li><li><p>创建一个简单应用gulp_test<br><img src="https://gitee.com/huqian025/my-images/raw/master/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/gulp%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/gulp_test%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="gulp_test目录结构"></p></li><li><p>安装gulp：</p><ul><li>全局安装gulp：<code>npm install gulp -g</code></li><li>局部安装gulp：<code>npm install gulp --save-dev</code></li></ul></li><li><p>配置：gulpfile.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入gulp模块</span><br><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>);<br><span class="hljs-comment">// 注册任务，注册任务后可以通过 `gulp 任务名` 执行任务</span><br>gulp.task(<span class="hljs-string">&#x27;任务名&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 配置任务操作</span><br>&#125;)<br><span class="hljs-comment">// 注册默认任务，可以将多个任务放在数组中，通过 `gulp` 执行多个任务</span><br>gulp.task(<span class="hljs-string">&#x27;default&#x27;</span>, [<span class="hljs-string">&#x27;任务名&#x27;</span>])<br></code></pre></td></tr></table></figure></li></ul><h3 id="二、任务构建"><a href="#二、任务构建" class="headerlink" title="二、任务构建"></a>二、任务构建</h3><h4 id="1、构建js任务（gulp-uglify）"><a href="#1、构建js任务（gulp-uglify）" class="headerlink" title="1、构建js任务（gulp-uglify）"></a>1、构建js任务（gulp-uglify）</h4><ul><li>下载插件：<code>npm install gulp-concat gulp-uglify gulp-rename --save-dev</code></li><li>配置编码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入gulp模块</span><br><span class="hljs-keyword">var</span> gulp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>);<br><span class="hljs-comment">// 引入gulp插件，需要先npm安装，它们都是一个方法，直接在名称后面加括号进行调用，不用通过gulp对象调用</span><br><span class="hljs-keyword">var</span> concat = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-concat&#x27;</span>);<br><span class="hljs-keyword">var</span> uglify = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-uglify&#x27;</span>);<br><span class="hljs-keyword">var</span> rename = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-rename&#x27;</span>);<br><span class="hljs-comment">// 注册合并压缩js的任务</span><br>gulp.task(<span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;src/js/*.js&#x27;</span>) <span class="hljs-comment">// 找到目标源文件，将数据读取到gulp内存中</span><br>        .pipe(concat(<span class="hljs-string">&#x27;build.js&#x27;</span>)) <span class="hljs-comment">// 合并文件</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/js/&#x27;</span>)) <span class="hljs-comment">// 临时输出文件到本地</span><br>        .pipe(uglify()) <span class="hljs-comment">// 压缩文件</span><br>        .pipe(rename(&#123;<span class="hljs-attr">suffix</span>: <span class="hljs-string">&#x27;.min&#x27;</span>&#125;)) <span class="hljs-comment">// 重命名，也可以不用对象直接写文件名</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/js/&#x27;</span>))<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h4 id="2、构建less任务（gulp-less）"><a href="#2、构建less任务（gulp-less）" class="headerlink" title="2、构建less任务（gulp-less）"></a>2、构建less任务（gulp-less）</h4><ul><li>下载插件：<code>npm install gulp-less --save-dev</code></li><li>配置编码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> less = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-less&#x27;</span>)<br><br><span class="hljs-comment">// 注册转换less的任务</span><br>gulp.task(<span class="hljs-string">&#x27;less&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;src/less/*.less&#x27;</span>)<br>        .pipe(less()) <span class="hljs-comment">// 编译less文件为css文件</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;src/css/&#x27;</span>)) <span class="hljs-comment">// 文件名不重复可以不用重命名</span><br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h4 id="3、构建css任务（gulp-clean-css）"><a href="#3、构建css任务（gulp-clean-css）" class="headerlink" title="3、构建css任务（gulp-clean-css）"></a>3、构建css任务（gulp-clean-css）</h4><ul><li>下载插件：<code>npm installl gulp-clean-css --save-dev</code></li><li>配置编码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> cleanCss = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-clean-css&#x27;</span>)<br><br><span class="hljs-comment">// 注册合并压缩css文件</span><br>gulp.task(<span class="hljs-string">&#x27;css&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;src/css/*.css&#x27;</span>)<br>        .pipe(concat(<span class="hljs-string">&#x27;build.css&#x27;</span>))<br>        .pipe(rename(&#123;<span class="hljs-attr">suffix</span>: <span class="hljs-string">&#x27;.min&#x27;</span>&#125;))<br>        .pipe(cleanCss(&#123;<span class="hljs-attr">compatibility</span>: <span class="hljs-string">&#x27;ie8&#x27;</span>&#125;)) <span class="hljs-comment">// 兼容到ie8</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/css/&#x27;</span>))<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h4 id="4、构建压缩html任务（gulp-htmlmin）"><a href="#4、构建压缩html任务（gulp-htmlmin）" class="headerlink" title="4、构建压缩html任务（gulp-htmlmin）"></a>4、构建压缩html任务（gulp-htmlmin）</h4><ul><li>下载插件：<code>npm install gulp-htmlmin --save-dev</code></li><li>配置编码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> htmlmin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-htmlmin&#x27;</span>)<br><br><span class="hljs-comment">// 注册压缩html任务</span><br>gulp.task(<span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br>        .pipe(htmlmin(&#123;<span class="hljs-attr">collapseWhitespace</span>: <span class="hljs-literal">true</span>&#125;)) <span class="hljs-comment">// 清除空格</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/&#x27;</span>)) <span class="hljs-comment">// 注意html中引入css和js路径变化，以前是引入src下的</span><br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h4 id="5、执行任务异步-同步，任务之间依赖"><a href="#5、执行任务异步-同步，任务之间依赖" class="headerlink" title="5、执行任务异步/同步，任务之间依赖"></a>5、执行任务异步/同步，任务之间依赖</h4><ul><li><p>使用默认任务执行多个任务：在注册任务时，不使用return多个任务是同步执行的，使用return是异步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 注册默认任务</span><br>gulp.task(<span class="hljs-string">&#x27;default&#x27;</span>, [<span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-string">&#x27;less&#x27;</span>, <span class="hljs-string">&#x27;css&#x27;</span>]) <span class="hljs-comment">// 直接通过 `gulp` 命名执行js、less、css三个任务</span><br></code></pre></td></tr></table></figure></li><li><p>任务之间的依赖，例如：less和css异步执行，css任务要在less任务执行完成后，再执行</p></li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/gulp%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E4%BB%BB%E5%8A%A1%E4%B9%8B%E9%97%B4%E4%BE%9D%E8%B5%96.png" alt="任务依赖"></p><h3 id="三、自动刷新"><a href="#三、自动刷新" class="headerlink" title="三、自动刷新"></a>三、自动刷新</h3><h4 id="1、半自动（仅改动时，自动调用相应任务gulp-livereload）"><a href="#1、半自动（仅改动时，自动调用相应任务gulp-livereload）" class="headerlink" title="1、半自动（仅改动时，自动调用相应任务gulp-livereload）"></a>1、半自动（仅改动时，自动调用相应任务gulp-livereload）</h4><ul><li>下载插件：<code>npm install gulp-livereload --save-dev</code></li><li>配置编码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> livereload = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-livereload&#x27;</span>)<br><br><span class="hljs-comment">// 注册监视任务（半自动）</span><br>gulp.task(<span class="hljs-string">&#x27;watch&#x27;</span>, [<span class="hljs-string">&#x27;default&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 开启监听</span><br>    livereload.listen();<br>    <span class="hljs-comment">// 确认监听的目标以及绑定相应的任务</span><br>    gulp.watch(<span class="hljs-string">&#x27;src/js/*.js&#x27;</span>, [<span class="hljs-string">&#x27;js&#x27;</span>]); <span class="hljs-comment">// 监听js文件的变化，变化时启动js任务</span><br>    gulp.watch([<span class="hljs-string">&#x27;src/css/*.css&#x27;</span>, <span class="hljs-string">&#x27;src/less/*.less&#x27;</span>], [<span class="hljs-string">&#x27;css&#x27;</span>]);<br>&#125;)<br><br><span class="hljs-comment">// 在每个任务后添加.pipe(livereload())，以js任务为例</span><br>gulp.task(<span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;src/js/*.js&#x27;</span>) <span class="hljs-comment">// 找到目标源文件，将数据读取到gulp内存中</span><br>        .pipe(concat(<span class="hljs-string">&#x27;build.js&#x27;</span>)) <span class="hljs-comment">// 合并文件</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/js/&#x27;</span>)) <span class="hljs-comment">// 临时输出文件到本地</span><br>        .pipe(uglify()) <span class="hljs-comment">// 压缩文件</span><br>        .pipe(rename(&#123;<span class="hljs-attr">suffix</span>: <span class="hljs-string">&#x27;.min&#x27;</span>&#125;)) <span class="hljs-comment">// 重命名，也可以不用对象直接写文件名</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/js/&#x27;</span>))<br>        .pipe(livereload()) <span class="hljs-comment">// 实时刷新</span><br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h4 id="2、全自动（自动刷新gulp-connect，自动打开链接open）"><a href="#2、全自动（自动刷新gulp-connect，自动打开链接open）" class="headerlink" title="2、全自动（自动刷新gulp-connect，自动打开链接open）"></a>2、全自动（自动刷新gulp-connect，自动打开链接open）</h4><h5 id="2-1、页面自动刷新，不用f5"><a href="#2-1、页面自动刷新，不用f5" class="headerlink" title="2.1、页面自动刷新，不用f5"></a>2.1、页面自动刷新，不用f5</h5><ul><li>下载插件：<code>npm install gulp-connect --save-dev</code></li><li>编码配置：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> connect = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-connect&#x27;</span>)<br><br><span class="hljs-comment">// 注册监视任务（全自动），跟半自动没有任何关系</span><br>gulp.task(<span class="hljs-string">&#x27;server&#x27;</span>, [<span class="hljs-string">&#x27;default&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 配置服务器的选项</span><br>    connect.server(&#123;<br>        <span class="hljs-attr">root</span>: <span class="hljs-string">&#x27;dist/&#x27;</span>,<br>        <span class="hljs-attr">livereload</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 实时刷新</span><br>        <span class="hljs-attr">port</span>: <span class="hljs-number">5000</span><br>    &#125;)<br>    <span class="hljs-comment">// 确认监听的目标以及绑定相应的任务</span><br>    gulp.watch(<span class="hljs-string">&#x27;src/js/*.js&#x27;</span>, [<span class="hljs-string">&#x27;js&#x27;</span>]); <span class="hljs-comment">// 监听js文件的变化，变化时启动js任务</span><br>    gulp.watch([<span class="hljs-string">&#x27;src/css/*.css&#x27;</span>, <span class="hljs-string">&#x27;src/less/*.less&#x27;</span>], [<span class="hljs-string">&#x27;css&#x27;</span>]);<br>&#125;)<br><br><span class="hljs-comment">// 在每个任务后添加.pipe(connect.reload())，以js任务为例</span><br>gulp.task(<span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;src/js/*.js&#x27;</span>) <span class="hljs-comment">// 找到目标源文件，将数据读取到gulp内存中</span><br>        .pipe(concat(<span class="hljs-string">&#x27;build.js&#x27;</span>)) <span class="hljs-comment">// 合并文件</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/js/&#x27;</span>)) <span class="hljs-comment">// 临时输出文件到本地</span><br>        .pipe(uglify()) <span class="hljs-comment">// 压缩文件</span><br>        .pipe(rename(&#123;<span class="hljs-attr">suffix</span>: <span class="hljs-string">&#x27;.min&#x27;</span>&#125;)) <span class="hljs-comment">// 重命名，也可以不用对象直接写文件名</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/js/&#x27;</span>))<br>        .pipe(connect.reload()) <span class="hljs-comment">// 实时刷新</span><br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h5 id="2-2、链接自动打开，不用手动输入地址"><a href="#2-2、链接自动打开，不用手动输入地址" class="headerlink" title="2.2、链接自动打开，不用手动输入地址"></a>2.2、链接自动打开，不用手动输入地址</h5><ul><li>下载插件：<code>npm install open --save-dev</code></li><li>编码配置：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> open = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;open&#x27;</span>)<br><br><span class="hljs-comment">// 注册监视任务（全自动），跟半自动没有任何关系</span><br>gulp.task(<span class="hljs-string">&#x27;server&#x27;</span>, [<span class="hljs-string">&#x27;default&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 配置服务器的选项</span><br>    connect.server(&#123;<br>        <span class="hljs-attr">root</span>: <span class="hljs-string">&#x27;dist/&#x27;</span>,<br>        <span class="hljs-attr">livereload</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 实时刷新</span><br>        <span class="hljs-attr">port</span>: <span class="hljs-number">5000</span><br>    &#125;)<br>    <br>    <span class="hljs-comment">// open可以自动打开指定的链接</span><br>    open(<span class="hljs-string">&#x27;http://localhost:5000/&#x27;</span>);<br>    <br>    <span class="hljs-comment">// 确认监听的目标以及绑定相应的任务</span><br>    gulp.watch(<span class="hljs-string">&#x27;src/js/*.js&#x27;</span>, [<span class="hljs-string">&#x27;js&#x27;</span>]); <span class="hljs-comment">// 监听js文件的变化，变化时启动js任务</span><br>    gulp.watch([<span class="hljs-string">&#x27;src/css/*.css&#x27;</span>, <span class="hljs-string">&#x27;src/less/*.less&#x27;</span>], [<span class="hljs-string">&#x27;css&#x27;</span>]);<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h3 id="四、扩展插件"><a href="#四、扩展插件" class="headerlink" title="四、扩展插件"></a>四、扩展插件</h3><h4 id="1、gulp-load-plugins（打包基于gulp的所有插件，不用一个个单独引入）"><a href="#1、gulp-load-plugins（打包基于gulp的所有插件，不用一个个单独引入）" class="headerlink" title="1、gulp-load-plugins（打包基于gulp的所有插件，不用一个个单独引入）"></a>1、gulp-load-plugins（打包基于gulp的所有插件，不用一个个单独引入）</h4><ul><li>下载插件：<code>npm install gulp-load-plugins --save-dev</code></li><li>配置编码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> $ = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp-load-plugins&#x27;</span>)();<br><br><span class="hljs-comment">// 任务中的每个插件通过 `$.插件名`的方式引入，以js任务为例</span><br><span class="hljs-comment">// 插件名为 `gulp-`后面的部分，短横线改为驼峰。如：gulp-htmlmin插件名为htmlmin，gulp-clean-css插件名为cleanCss</span><br>gulp.task(<span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> gulp.src(<span class="hljs-string">&#x27;src/js/*.js&#x27;</span>) <span class="hljs-comment">// 找到目标源文件，将数据读取到gulp内存中</span><br>        .pipe($.concat(<span class="hljs-string">&#x27;build.js&#x27;</span>)) <span class="hljs-comment">// 合并文件</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/js/&#x27;</span>)) <span class="hljs-comment">// 临时输出文件到本地</span><br>        .pipe($.uglify()) <span class="hljs-comment">// 压缩文件</span><br>        .pipe($.rename(&#123;<span class="hljs-attr">suffix</span>: <span class="hljs-string">&#x27;.min&#x27;</span>&#125;)) <span class="hljs-comment">// 重命名，也可以不用对象直接写文件名</span><br>        .pipe(gulp.dest(<span class="hljs-string">&#x27;dist/js/&#x27;</span>))<br>        .pipe($.connect.reload()) <span class="hljs-comment">// 实时刷新</span><br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h3 id="五、4-x版本使用差异（支持ES6）"><a href="#五、4-x版本使用差异（支持ES6）" class="headerlink" title="五、4.x版本使用差异（支持ES6）"></a>五、4.x版本使用差异（支持ES6）</h3><ul><li><ol><li>创建任务不在使用task()方法，而是直接写执行函数，并将其导出</li></ol></li><li><ol start="2"><li>组合任务有两种方法：series()和parallel()，允许将多个独立的任务组合为一个更大的操作。这两个方法都可以接受任意数量的任务函数或以组合的操作，并可以互相嵌套至任意深度</li></ol><ul><li>如果需要让任务按顺序执行，使用series()方法</li><li>如果希望以最大并发来运行任务，使用parallel()方法</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; series &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;gulp&#x27;</span>);<br><br><span class="hljs-comment">// `clean` 函数并未被导出（export），因此被认为是私有任务（private task）。</span><br><span class="hljs-comment">// 它仍然可以被用在 `series()` 组合中。 </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">clean</span>(<span class="hljs-params">cb</span>) </span>&#123; <br>    <span class="hljs-comment">// body omitted </span><br>    cb(); <br>&#125; <br><span class="hljs-comment">// `build` 函数被导出（export）了，因此它是一个公开任务（public task），并且可以被 `gulp` 命令直接调用。</span><br><span class="hljs-comment">// 它也仍然可以被用在 `series()` 组合中。 </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">build</span>(<span class="hljs-params">cb</span>) </span>&#123;<br>    <span class="hljs-comment">// body omitted </span><br>    cb();<br>&#125;<br><br><span class="hljs-built_in">exports</span>.build = build; <br><span class="hljs-built_in">exports</span>.default = series(clean, build);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>打包工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>glup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack性能优化</title>
    <link href="/2022/01/06/webpack%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2022/01/06/webpack%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="一、开发环境性能优化"><a href="#一、开发环境性能优化" class="headerlink" title="一、开发环境性能优化"></a>一、开发环境性能优化</h3><h4 id="1、优化打包构建速度"><a href="#1、优化打包构建速度" class="headerlink" title="1、优化打包构建速度"></a>1、优化打包构建速度</h4><h5 id="1-1、HMR"><a href="#1-1、HMR" class="headerlink" title="1.1、HMR"></a>1.1、HMR</h5><p>HMR：hot module replacement 热模块替换 / 模块热替换。</p><ul><li>作用：一个模块发生变化，只会重新打包这一模块，而不是重新打包所有模块，极大提升构建速度。<ul><li>样式文件：可以使用 HMR 功能，因为style-loader内部实现了。</li><li>js文件：默认不能使用 HMR 功能 -&gt; 需要修改js代码，添加支持 HMR 功能的代码。<ul><li>注意：HMR 功能对 js 的处理，只能处理非入口 js 文件的其他文件。</li></ul></li><li>html文件：默认不能使用 HMR 功能，同时会导致问题： html文件不能热更新了（修改后不会重新编译，刷新浏览器）。<ul><li>解决：修改entry入口，将html文件引入。</li><li>由于html文件只有一个，因此不用做 HMR 功能。</li></ul></li></ul></li></ul><h5 id="1-2、source-map"><a href="#1-2、source-map" class="headerlink" title="1.2、source-map"></a>1.2、source-map</h5><p>source-map：一种提供源代码到构建后代码映射的技术（如果构建后代码出错了，通过映射可以追踪源代码错误）</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 直接在 webpack.config.js 中添加 devtool 即可开启source-map</span><br><span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;source-map&#x27;</span><br></code></pre></td></tr></table></figure><p>devtool 取值为 <code>[ inline- | hidden- | eval- ] [ nosources- ] [ cheap- [ module- ] ] source-map</code></p><hr><ul><li>内联和外部的区别：<ul><li>1、外部生成了文件，内联没有</li><li>2、内联构建速度更快    </li></ul></li></ul><hr><ul><li>source-map：外部<ul><li>错误代码准确信息 和 源代码的错误位置</li></ul></li><li>inline-source-map：内联<ul><li>只生成一个内联source-map</li><li>错误代码准确信息 和 源代码的错误位置</li></ul></li><li>hidden-source-map：外部<ul><li>错误代码的错误原因，但是没有源代码错误位置，只能提示到构建后代码的错误位置</li></ul></li><li>eval-source-map：内联<ul><li>每一个文件都生成对应的source-map，都在eval</li><li>错误代码准确信息 和 源代码的错误位置</li></ul></li><li>nosources-source-map：外部<ul><li>错误代码的错误信息，但没有任何源代码信息</li></ul></li><li>cheap-source-map：外部<ul><li>错误代码准确信息 和 源代码的错误位置</li><li>只能精确到行（当错误代码与正确代码在同一行时，整行标志整行，包含正确代码）</li></ul></li><li>cheap-module-source-map：外部<ul><li>错误代码准确信息 和 源代码的错误位置</li><li>module会将 loader 的 source map 加入</li></ul></li></ul><hr><ul><li>开发环境：要求速度快，调试更友好<ul><li>速度快（eval &gt; inline &gt; cheap &gt; …）<ul><li>eval-cheap-source-map</li><li>eval-source-map</li></ul></li><li>调试更友好<ul><li>source-map</li><li>cheap-module-source-map</li><li>cheap-source-map</li></ul></li><li>–&gt; eval-source-map / eval-cheap-module-source-map</li></ul></li><li>生产环境：源代码是否隐藏？调试是否要友好？<ul><li>内联会让代码体积变大，所以生产环境不用内联</li><li>nosources-source-map 源代码和构建后代码全部隐藏</li><li>hidden-source-map 只隐藏源代码，会提示构建后代码错误信息</li><li>–&gt; source-map / cheap-module-source-map</li></ul></li></ul><h5 id="1-3、oneOf"><a href="#1-3、oneOf" class="headerlink" title="1.3、oneOf"></a>1.3、oneOf</h5><h5 id="1-4、缓存"><a href="#1-4、缓存" class="headerlink" title="1.4、缓存"></a>1.4、缓存</h5><ul><li>babel缓存（让第二次打包构建速度更快）<ul><li>cacheDirectory: true</li></ul></li><li>文件资源缓存（让代码上线运行缓存，加快相应速度）<ul><li>hash：每次 webpack 构建时会生成一个唯一的 hash 值。<ul><li>问题：因为 js 和 css 同时使用一个 hash 值，如果重新打包，会导致所有缓存失效。（可能只改动一个文件）</li></ul></li><li>chunkhash：根据 chunk 生成的 hash 值。如果打包来源于同一个 chunk，那么 hash 值就一样。<ul><li>问题：js 和 css 的 hash 值还是一样的，因为 css 是在 js 中被引入的，所以同属于一个chunk</li></ul></li><li>contenthash：根据文件的内容生成 hash 值，不同文件 hash 值一定不一样 </li></ul></li></ul><h5 id="1-5、tree-shaking"><a href="#1-5、tree-shaking" class="headerlink" title="1.5、tree shaking"></a>1.5、tree shaking</h5><p>tree shaking：去除应用程序中没有使用的代码，让代码体积更小</p><ul><li>前提：1、必须使用 ES6 模块化    2、开启 production 环境</li><li>作用：减少代码体积</li></ul><hr><ul><li>可能由于 webpack 版本问题，将 css 等文件去除，在 package.json 中配置 “sideEffects”: false 模拟：<ul><li>“sideEffects”: false 所有代码都没有副作用（都可以进行tree shaking）</li><li>问题：可能会把 css / @babel/polyfill 等（副作用）文件去除 </li><li>解决：”sideEffects”: [“*.css”, “*.less”]，最好添加该配置，否则可能因为 webpack 版本问题去除 css 等文件</li></ul></li></ul><h5 id="1-6、code-split"><a href="#1-6、code-split" class="headerlink" title="1.6、code split"></a>1.6、code split</h5><p>code split：将打包生成的一个文件分割为多个文件</p><ul><li>方案一：单入口 / 多入口文件，每个入口打包成一个文件</li><li>方案二：webpack.config.js 配置中添加 optimization（一般都是单入口文件，该方案使用较少）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1、可以将node_modules中代码单独打包一个chunk最终输出</span><br><span class="hljs-comment">// 2、自动分析多入口chunk中，有没有公共的文件。如果有，会打包成一个单独chunk</span><br><span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">splitChunks</span>: &#123;<br>        <span class="hljs-attr">chunks</span>: <span class="hljs-string">&#x27;all&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>方案三：单入口，配置中添加 optimization，并通过js代码，让某个文件被单独打包成一个chunk</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// import动态导入语法，能让某个文件单独打包</span><br><span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &#x27;test&#x27; */</span><span class="hljs-string">&#x27;.test&#x27;</span>)<br>    .then(<span class="hljs-function">(<span class="hljs-params">&#123; mul, count&#125;</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 文件加载成功</span><br>        <span class="hljs-built_in">console</span>.log(mul(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>));<br>    &#125;)<br>    .catch(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// 文件加载失败</span><br>    &#125;);<br></code></pre></td></tr></table></figure><h5 id="1-7、懒加载和预加载"><a href="#1-7、懒加载和预加载" class="headerlink" title="1.7、懒加载和预加载"></a>1.7、懒加载和预加载</h5><ul><li>懒加载：当文件需要使用时才加载</li><li>预加载 prefetch（会有兼容性问题）：会在使用之前，提前加载js文件</li><li>正常加载可以认为是并行加载（同一时间加载多个文件），而预加载是等其他资源加载完毕，浏览器空闲了，再偷偷加载资源</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;btn&#x27;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 点击时，动态引入为懒加载，设置 webpackPrefetch: true 为预加载</span><br>    <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &#x27;test&#x27;, webpackPrefetch: true */</span><span class="hljs-string">&#x27;./test&#x27;</span>)<br>        .then(<span class="hljs-function">(<span class="hljs-params">&#123; mul &#125;</span>) =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(mul(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>));<br>        &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="1-8、PWA"><a href="#1-8、PWA" class="headerlink" title="1.8、PWA"></a>1.8、PWA</h5><p>PWA：渐进式网络开发应用程序（离线可访问）。webpack中使用workbox-webpack-plugin插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在webpack中使用workbox-webpack-plugin插件</span><br><span class="hljs-keyword">const</span> WorkboxWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;workbox-webpack-plugin&#x27;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> WorkboxWebpackPlugin.GenerateSW(&#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">                1、帮助 serviceworker 快速启动</span><br><span class="hljs-comment">                2、删除旧的 serviceworker</span><br><span class="hljs-comment">                </span><br><span class="hljs-comment">                打包时会自动生成一个 serviceworker 配置文件</span><br><span class="hljs-comment">            */</span><br>            <span class="hljs-attr">clientsClain</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">skipWaiting</span>: <span class="hljs-literal">true</span><br>        &#125;)<br>    ]<br>&#125;<br><br><span class="hljs-comment">// 在入口文件中注册 serviceworker</span><br><span class="hljs-comment">// 注册 serviceworker，并处理兼容性问题</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    注意： </span><br><span class="hljs-comment">    1、eslint不认识 window、navigator 全局变量</span><br><span class="hljs-comment">        解决：需要修改 package.json 中 eslintConfig 配置</span><br><span class="hljs-comment">        &quot;env&quot;: &#123;</span><br><span class="hljs-comment">            // 支持浏览器端全局变量</span><br><span class="hljs-comment">            &quot;browser&quot;: true</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    2、sw代码必须运行在服务器上</span><br><span class="hljs-comment">        --&gt; 快速创建服务器库 serve</span><br><span class="hljs-comment">            npm i serve -g</span><br><span class="hljs-comment">            serve -s build 启动服务器，将build目录下所有资源作为静态资源暴露出去    </span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;serviceWorker&#x27;</span> <span class="hljs-keyword">in</span> navigator) &#123;<br>    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        navigator.serviceWorker<br>            .register(<span class="hljs-string">&#x27;/service-worker.js&#x27;</span>)<br>            .then(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sw注册成功了&#x27;</span>);<br>            &#125;)<br>            .catch(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sw注册失败了&#x27;</span>);<br>            &#125;);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-9、多进程打包"><a href="#1-9、多进程打包" class="headerlink" title="1.9、多进程打包"></a>1.9、多进程打包</h5><p>使用 thread-loader 插件</p><h5 id="1-10、externals"><a href="#1-10、externals" class="headerlink" title="1,10、externals"></a>1,10、externals</h5><h5 id="1-11、dll"><a href="#1-11、dll" class="headerlink" title="1.11、dll"></a>1.11、dll</h5><h4 id="2、优化代码调试"><a href="#2、优化代码调试" class="headerlink" title="2、优化代码调试"></a>2、优化代码调试</h4><h3 id="二、生产环境性能优化"><a href="#二、生产环境性能优化" class="headerlink" title="二、生产环境性能优化"></a>二、生产环境性能优化</h3><h4 id="1、优化打包构建速度-1"><a href="#1、优化打包构建速度-1" class="headerlink" title="1、优化打包构建速度"></a>1、优化打包构建速度</h4><h4 id="2、优化代码运行的性能"><a href="#2、优化代码运行的性能" class="headerlink" title="2、优化代码运行的性能"></a>2、优化代码运行的性能</h4>]]></content>
    
    
    <categories>
      
      <category>打包工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dos修改默认编码格式</title>
    <link href="/2022/01/06/dos%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/"/>
    <url>/2022/01/06/dos%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h4 id="1、临时修改"><a href="#1、临时修改" class="headerlink" title="1、临时修改"></a>1、临时修改</h4><ul><li><code>chcp</code> 查看当前编码，936（简体中文），65001（UTF-8）</li><li><code>chcp 65001</code> 将当前窗口的编码改为65001</li></ul><h4 id="2、永久修改"><a href="#2、永久修改" class="headerlink" title="2、永久修改"></a>2、永久修改</h4><h5 id="2-1、powershell"><a href="#2-1、powershell" class="headerlink" title="2.1、powershell"></a>2.1、powershell</h5><ol><li>打开注册表，win+R =&gt; regedit</li><li>进入HKEY_CURRENT_USER\Console%SystemRoot%_System32_WindowsPowerShell_v1.0_powershell.exe，将CodePage的十进制值修改为65001。如果没有CodePage选项，右键新建DWORD(32位)，修改十进制值为65001</li><li>重新打开powershell，输入chcp显示65001，说明修改成功</li></ol><h5 id="2-2、cmd"><a href="#2-2、cmd" class="headerlink" title="2.2、cmd"></a>2.2、cmd</h5><ol><li>打开注册表，win+R =&gt; regedit</li><li>进入HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Command Processor，添加一个叫autorun的字符串值，值是chcp 65001</li><li>重新打开cmd，输入chcp显示65001，说明修改成功</li></ol>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>canvas实现简易签字板</title>
    <link href="/2022/01/06/canvas%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%AD%BE%E5%AD%97%E6%9D%BF/"/>
    <url>/2022/01/06/canvas%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%AD%BE%E5%AD%97%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<p>最近看到有些在线文档可以进行签名，以防以后项目中会用到，提前用canvas练习一下，先看下最后实现的效果：<br><img src="https://gitee.com/huqian025/my-images/raw/master/demos/canvas%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%AD%BE%E5%AD%97%E6%9D%BF/%E7%AD%BE%E5%AD%97%E6%9D%BF%E6%95%88%E6%9E%9C.gif"></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol><li>在canva中监听鼠标按下事件（<code>mousedown</code>），获取按下时鼠标到canvas左上角的距离</li><li>以鼠标按下的点为canvas画笔的起点，监听鼠标移动事件（<code>mousemove</code>），根据鼠标移动到的位置实时绘制线条</li><li>监听鼠标弹起事件（<code>mouseup</code>），移除对mousemove事件的监听，防止鼠标弹起继续绘制</li></ol><h4 id="搭建html结构"><a href="#搭建html结构" class="headerlink" title="搭建html结构"></a>搭建html结构</h4><p>html结构比较简单，直接使用一个canvas标签，设置其背景色，宽度和高度。背景色是为了方便看效果，宽度默认300px，高度默认150px，设置宽高时不用带单位px</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>简易签名板<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: skyblue;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./canvas.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="在canvas-js中实现功能"><a href="#在canvas-js中实现功能" class="headerlink" title="在canvas.js中实现功能"></a>在canvas.js中实现功能</h4><ol><li>获取canvas对象，获取2D画笔<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> canvas = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#canvas&#x27;</span>)<br><span class="hljs-keyword">if</span> (canvas.getContext) &#123;<br>  <span class="hljs-keyword">const</span> ctx = canvas.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>根据鼠标移动绘制路径<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 监听鼠标按下事件</span><br>canvas.onmousedown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">mousedownEvent</span>) </span>&#123;<br>  <span class="hljs-comment">// 获取绘制起点，即鼠标点击到canvas元素左上角的距离</span><br>  <span class="hljs-keyword">const</span> startX = mousedownEvent.offsetX;<br>  <span class="hljs-keyword">const</span> startY = mousedownEvent.offsetY;<br>  ctx.beginPath();<br>  <span class="hljs-comment">// 将画笔移动到起点</span><br>  ctx.moveTo(startX, startY);<br><br>  <span class="hljs-comment">// 监听鼠标移动事件</span><br>  canvas.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">mousemoveEvent</span>) </span>&#123;<br>    <span class="hljs-comment">// 跟随鼠标移动来移动画笔</span><br>    ctx.lineTo(mousemoveEvent.offsetX, mousemoveEvent.offsetY);<br>    <span class="hljs-comment">// 实时绘制</span><br>    ctx.stroke();<br>  &#125;<br><br>  <span class="hljs-comment">// 监听鼠标弹起事件</span><br>  canvas.onmouseup = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    canvas.onmousemove = <span class="hljs-literal">null</span><br>    <span class="hljs-comment">// 闭合路径，使用之后线条起点和终点会自动连起来</span><br>    <span class="hljs-comment">// ctx.closePath();</span><br>    <span class="hljs-comment">// 鼠标弹起时再绘制</span><br>    <span class="hljs-comment">// ctx.stroke();</span><br>  &#125;<br><br>  <span class="hljs-comment">// 监听鼠标移出canvas区域事件</span><br>  canvas.onmouseout = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 鼠标移出时，停止对mousemove事件的监听，否则在移出时鼠标弹起事件监听失效</span><br>    canvas.onmousemove = <span class="hljs-literal">null</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>注意点clientX/Y和offsetX/Y</strong><br><img src="https://gitee.com/huqian025/my-images/raw/master/demos/canvas%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%AD%BE%E5%AD%97%E6%9D%BF/offsetX%E3%80%81clientX%E3%80%81screenX.png"></p><h4 id="扩展：将canvas转化为图片"><a href="#扩展：将canvas转化为图片" class="headerlink" title="扩展：将canvas转化为图片"></a>扩展：将canvas转化为图片</h4><ul><li>方法一：使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL">HTMLCanvasElement.toDataURL()</a>获取canvas图片的dataURL</li><li>方法二：使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toBlob">HTMLCanvasElement.toBlob()</a>创建Blob对象，再使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL">URL.createObjectURL()</a>获取指向该Blob对象的URL<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 按钮点击事件</span><br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 方法一</span><br>  <span class="hljs-keyword">const</span> canvasData = canvas.toDataURL()<br>  <span class="hljs-keyword">const</span> img = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;img&#x27;</span>)<br>  img.src=canvasData;<br>  body.appendChild(img)<br><br>  <span class="hljs-comment">// 方法二</span><br>  <span class="hljs-comment">// canvas.toBlob(function(blob) &#123;</span><br>  <span class="hljs-comment">//   var url = URL.createObjectURL(blob);</span><br>  <span class="hljs-comment">//   const img = document.createElement(&#x27;img&#x27;)</span><br>  <span class="hljs-comment">//   img.src=url;</span><br>  <span class="hljs-comment">//   // 图片加载成功后清除url，避免占用内存</span><br>  <span class="hljs-comment">//   img.onload = function() &#123;</span><br>  <span class="hljs-comment">//     URL.revokeObjectURL(url)</span><br>  <span class="hljs-comment">//   &#125;;</span><br>  <span class="hljs-comment">//   body.appendChild(img)</span><br>  <span class="hljs-comment">// &#125;)</span><br>&#125;<br></code></pre></td></tr></table></figure><img src="https://gitee.com/huqian025/my-images/raw/master/demos/canvas%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%AD%BE%E5%AD%97%E6%9D%BF/%E7%AD%BE%E5%AD%97%E6%9D%BF%E5%AF%BC%E5%87%BA%E4%B8%BA%E5%9B%BE%E7%89%87.gif"></li></ul>]]></content>
    
    
    <categories>
      
      <category>canvas</category>
      
    </categories>
    
    
    <tags>
      
      <tag>canvas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue计算属性computed和侦听器watch</title>
    <link href="/2022/01/06/vue%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7computed%E5%92%8C%E4%BE%A6%E5%90%AC%E5%99%A8watch/"/>
    <url>/2022/01/06/vue%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7computed%E5%92%8C%E4%BE%A6%E5%90%AC%E5%99%A8watch/</url>
    
    <content type="html"><![CDATA[<h3 id="一、计算属性-computed"><a href="#一、计算属性-computed" class="headerlink" title="一、计算属性 computed"></a>一、计算属性 computed</h3><h4 id="1、计算属性的-setter-和-getter"><a href="#1、计算属性的-setter-和-getter" class="headerlink" title="1、计算属性的 setter 和 getter"></a>1、计算属性的 setter 和 getter</h4><ul><li>每个计算属性都包含一个 setter 和一个 getter</li><li>计算属性一般没有 set 方法，只读属性</li><li>计算属性在使用时作为一个属性，不用加()</li><li>注意：如果计算属性使用了箭头函数，则 this 不会指向这个组件的实例，不过仍然可以将其实例作为函数的第一个参数来访问</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-attr">data</span>: &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;,<br>    <span class="hljs-attr">computed</span>: &#123;<br>        <span class="hljs-comment">// 仅读取</span><br>        <span class="hljs-attr">aDouble</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.a * <span class="hljs-number">2</span> <br>        &#125;, <br>        <span class="hljs-comment">// 读取和设置 </span><br>        <span class="hljs-attr">aPlus</span>: &#123; <br>            <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.a + <span class="hljs-number">1</span><br>            &#125;, <br>            <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">v</span>) </span>&#123; <br>                <span class="hljs-built_in">this</span>.a = v - <span class="hljs-number">1</span> <br>            &#125;<br>        &#125; <br>    &#125;<br>&#125;)<br>vm.aPlus <span class="hljs-comment">// =&gt; 2</span><br>vm.aPlus = <span class="hljs-number">3</span> <br>vm.a <span class="hljs-comment">// =&gt; 2 </span><br>vm.aDouble <span class="hljs-comment">// =&gt; 4</span><br></code></pre></td></tr></table></figure><h4 id="2、计算属性的缓存"><a href="#2、计算属性的缓存" class="headerlink" title="2、计算属性的缓存"></a>2、计算属性的缓存</h4><ul><li>计算属性的结果会被缓存，除非依赖的响应式 property 变化才会重新计算</li><li>注意：如果某个依赖 (比如非响应式 property) 在该实例范畴之外，则计算属性是不会被更新的</li></ul><h3 id="二、侦听器-watch"><a href="#二、侦听器-watch" class="headerlink" title="二、侦听器 watch"></a>二、侦听器 watch</h3><ul><li>watch 为一个对象，键是需要观察的表达式，值为对应的回调函数。值也可以是方法名，或者包含选项的对象</li><li>注意：不能使用箭头函数来定义 watcher 函数，this 指向会有问题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>    <span class="hljs-attr">data</span>: &#123; <br>        <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">c</span>: &#123;<br>            <span class="hljs-attr">d</span>: <span class="hljs-number">3</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">watch</span>: &#123;<br>        <span class="hljs-comment">// 值为一个函数</span><br>        <span class="hljs-attr">a</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val, oldVal</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`newVal: <span class="hljs-subst">$&#123;val&#125;</span>, oldVal: <span class="hljs-subst">$&#123;oldVal&#125;</span>`</span>)<br>        &#125;,<br>        <span class="hljs-comment">// 值可以为一个方法名</span><br>        <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;someMethod&#x27;</span>,<br>        <span class="hljs-comment">// 值为一个对象，可以配置 deep 和 immediate 属性值</span><br>        <span class="hljs-attr">c</span>: &#123;<br>            <span class="hljs-attr">handler</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val, oldVal</span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`newVal: <span class="hljs-subst">$&#123;val&#125;</span>, oldVal: <span class="hljs-subst">$&#123;oldVal&#125;</span>`</span>)<br>            &#125;,<br>            <span class="hljs-comment">// 深度监听，回调会在被监听对象任何属性改变时调用，不论嵌套多深</span><br>            <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-comment">// 立即监听，回调会在监听开始时就调用一次。否则回调只在数据变化时调用</span><br>            <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span><br>        &#125;,<br>        <span class="hljs-comment">// 用于监听 c.d 的值变化</span><br>        <span class="hljs-string">&#x27;c.d&#x27;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">val, oldVal</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`newVal: <span class="hljs-subst">$&#123;val&#125;</span>, oldVal: <span class="hljs-subst">$&#123;oldVal&#125;</span>`</span>)<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>参考文档：<br><a href="https://cn.vuejs.org/v2/api/#watch">vue2 官方 API 选项 computed 和 watch</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue常用指令</title>
    <link href="/2022/01/06/vue%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2022/01/06/vue%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="一、v-text"><a href="#一、v-text" class="headerlink" title="一、v-text"></a>一、v-text</h3><ul><li>与 Mustache比较相似：都用于将数据显示在界面中（没有Mustache灵活）</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-text.png" alt="v-text"></p><h3 id="二、v-html"><a href="#二、v-html" class="headerlink" title="二、v-html"></a>二、v-html</h3><ul><li>会将string的html解析出来并进行渲染</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-html.png" alt="v-html"></p><h3 id="三、v-show"><a href="#三、v-show" class="headerlink" title="三、v-show"></a>三、v-show</h3><ul><li>用法与v-if相似，也用于决定一个元素是否渲染</li></ul><h4 id="1、v-if和v-show对比"><a href="#1、v-if和v-show对比" class="headerlink" title="1、v-if和v-show对比"></a>1、v-if和v-show对比</h4><ul><li>v-if：当条件为false时，包含v-if指令的元素，根本就不会存在于dom中</li><li>v-show：当条件为false时，v-show只是给我们的元素添加一个行内样式 display：none</li></ul><h4 id="2、如何选择"><a href="#2、如何选择" class="headerlink" title="2、如何选择"></a>2、如何选择</h4><ul><li>需要在显示与隐藏之间频繁切换时，使用v-show</li><li>只有一次切换时，使用v-if（根据服务器传入数据决定是否渲染，大量使用）</li></ul><h3 id="四、v-if"><a href="#四、v-if" class="headerlink" title="四、v-if"></a>四、v-if</h3><ul><li>与js中if类似</li><li>Vue的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件</li><li>原理：v-if后面的条件为false时，对应的元素以及其子元素不会渲染，根本没有不会有对应的标签出现在DOM中</li></ul><h3 id="五、-v-else"><a href="#五、-v-else" class="headerlink" title="五、 v-else"></a>五、 v-else</h3><ul><li>与js中else类似</li><li>Vue的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件</li></ul><h3 id="六、v-else-if"><a href="#六、v-else-if" class="headerlink" title="六、v-else-if"></a>六、v-else-if</h3><ul><li>与js中else if类似</li><li>Vue的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件</li></ul><h3 id="七、v-for"><a href="#七、v-for" class="headerlink" title="七、v-for"></a>七、v-for</h3><h4 id="1、遍历数组"><a href="#1、遍历数组" class="headerlink" title="1、遍历数组"></a>1、遍历数组</h4><h5 id="1-1、不含索引"><a href="#1-1、不含索引" class="headerlink" title="1.1、不含索引"></a>1.1、不含索引</h5><ul><li><code>&lt;li v-for=&quot;item in names&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</code></li></ul><h5 id="1-2、含索引"><a href="#1-2、含索引" class="headerlink" title="1.2、含索引"></a>1.2、含索引</h5><ul><li><code>&lt;li v-for=&quot;(item, index) in names&quot;&gt;&#123;&#123; index+1 &#125;&#125;.&#123;&#123; item &#125;&#125;&lt;/li&gt;</code></li></ul><h4 id="2、遍历对象"><a href="#2、遍历对象" class="headerlink" title="2、遍历对象"></a>2、遍历对象</h4><h5 id="2-1、获取value"><a href="#2-1、获取value" class="headerlink" title="2.1、获取value"></a>2.1、获取value</h5><ul><li><code>&lt;li v-for=&quot;item in info&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</code></li></ul><h5 id="2-2、获取value和key"><a href="#2-2、获取value和key" class="headerlink" title="2.2、获取value和key"></a>2.2、获取value和key</h5><ul><li><code>&lt;li v-for=&quot;(value, key) in info&quot;&gt;&#123;&#123; value &#125;&#125;-&#123;&#123; key &#125;&#125;&lt;/li&gt;</code></li></ul><h5 id="2-3、获取value、key和index"><a href="#2-3、获取value、key和index" class="headerlink" title="2.3、获取value、key和index"></a>2.3、获取value、key和index</h5><ul><li><code>&lt;li v-for=&quot;(value, key, index) in info&quot;&gt;&#123;&#123; value &#125;&#125;-&#123;&#123; key &#125;&#125;-&#123;&#123; index &#125;&#125;&lt;/li&gt;</code></li></ul><h4 id="3、v-for绑定key和不绑定key的区别"><a href="#3、v-for绑定key和不绑定key的区别" class="headerlink" title="3、v-for绑定key和不绑定key的区别"></a>3、v-for绑定key和不绑定key的区别</h4><ul><li>主要在于虚拟dom的复用，绑定key可以更好的复用</li><li>不推荐使用index作为key（在最后插入输入，重新渲染最后一条，使用index没有问题。但在中间插入时，后面数据的index都会发生改变，都会重新进行渲染，与不绑定key效果一样）</li><li>有相同父元素的子元素必须有独特的key，重复的key会造成渲染错误</li><li>官方示例：<code>&lt;li v-for=&quot;item in items&quot; :key=&quot;item.id&quot;&gt;&#123;&#123; item.text &#125;&#125;&lt;/li&gt;</code></li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-for.png" alt="v-for"></p><h3 id="八、v-on"><a href="#八、v-on" class="headerlink" title="八、v-on"></a>八、v-on</h3><ul><li>绑定事件监听器</li><li>语法糖 @</li></ul><h4 id="1、v-on参数"><a href="#1、v-on参数" class="headerlink" title="1、v-on参数"></a>1、v-on参数</h4><h5 id="1-1、情况一（方法不需参数）"><a href="#1-1、情况一（方法不需参数）" class="headerlink" title="1.1、情况一（方法不需参数）"></a>1.1、情况一（方法不需参数）</h5><ul><li>调用方法时可以加()，也可以不加()</li></ul><h5 id="1-2、情况二（方法需要一个参数）"><a href="#1-2、情况二（方法需要一个参数）" class="headerlink" title="1.2、情况二（方法需要一个参数）"></a>1.2、情况二（方法需要一个参数）</h5><ul><li>调用方法时不加()：该形参被赋值为原生事件event</li><li>调用方法时加()：()中传入形参对应的实参。如果不传参数，形参会被赋值为undefined</li></ul><h5 id="1-3、情况三（方法需要其他参数和event）"><a href="#1-3、情况三（方法需要其他参数和event）" class="headerlink" title="1.3、情况三（方法需要其他参数和event）"></a>1.3、情况三（方法需要其他参数和event）</h5><ul><li>调用方法时不加()：第一个形参被赋值为event，其他参数为undefined</li><li>调用方法时加()：()中传入形参对应的实参。如果传入参数个数少于方法需要的参数个数（包含不传），其他形参会被赋值为undefined。可以通过$event传入event事件</li></ul><h4 id="2、修饰符"><a href="#2、修饰符" class="headerlink" title="2、修饰符"></a>2、修饰符</h4><h5 id="2-1、-stop"><a href="#2-1、-stop" class="headerlink" title="2.1、.stop"></a>2.1、.stop</h5><ul><li>调用event.stopPropagation()</li><li>停止冒泡</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-on.stop.png" alt="v-on.stop"></p><h5 id="2-2、-prevent"><a href="#2-2、-prevent" class="headerlink" title="2.2、.prevent"></a>2.2、.prevent</h5><ul><li>调用event.prevenDefault</li><li>阻止默认行为（如点击按钮表单自动提交）</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-on.prevent.png" alt="v-on.prevent"></p><h5 id="2-3、-keyCode-keyAlias"><a href="#2-3、-keyCode-keyAlias" class="headerlink" title="2.3、.{keyCode | keyAlias}"></a>2.3、.{keyCode | keyAlias}</h5><ul><li>只当事件是从特定键触发时才触发回调</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-on.keyCode.png" alt="v-on.keyCode"></p><h5 id="2-4、-once"><a href="#2-4、-once" class="headerlink" title="2.4、.once"></a>2.4、.once</h5><ul><li>只触发一次回调</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-on.once.png" alt="v-on.once"></p><h5 id="2-5、-native"><a href="#2-5、-native" class="headerlink" title="2.5、.native"></a>2.5、.native</h5><ul><li>监听组件根元素的原生事件，不限于click事件（例如：调用组件时，直接使用@click无法监听到点击事件）<ul><li><code>&lt;cpn @click=&quot;btnClick&quot;&gt;&lt;/cpn&gt; // 无法监听click</code></li><li><code>&lt;cpn @click.native=&quot;btnClick&quot;&gt;&lt;/cpn&gt; // 可以监听click</code></li></ul></li></ul><h3 id="九、v-bind"><a href="#九、v-bind" class="headerlink" title="九、v-bind"></a>九、v-bind</h3><ul><li>动态绑定数据</li><li>语法糖 :</li></ul><h4 id="1、绑定基本属性"><a href="#1、绑定基本属性" class="headerlink" title="1、绑定基本属性"></a>1、绑定基本属性</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-bind-base.png" alt="v-bind-base"></p><h4 id="2、绑定class"><a href="#2、绑定class" class="headerlink" title="2、绑定class"></a>2、绑定class</h4><h5 id="2-1、对象语法"><a href="#2-1、对象语法" class="headerlink" title="2.1、对象语法"></a>2.1、对象语法</h5><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-bind-classObj.png" alt="v-bind-classObj"></p><h5 id="2-2、数组语法（了解）"><a href="#2-2、数组语法（了解）" class="headerlink" title="2.2、数组语法（了解）"></a>2.2、数组语法（了解）</h5><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-bind-classArr.png" alt="v-bind-classArr"></p><h4 id="3、绑定style"><a href="#3、绑定style" class="headerlink" title="3、绑定style"></a>3、绑定style</h4><h5 id="3-1、对象语法"><a href="#3-1、对象语法" class="headerlink" title="3.1、对象语法"></a>3.1、对象语法</h5><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-bind-styleObj.png" alt="v-bind-styleObj"></p><h5 id="3-2、数组语法（了解）"><a href="#3-2、数组语法（了解）" class="headerlink" title="3.2、数组语法（了解）"></a>3.2、数组语法（了解）</h5><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-bind-styleArr.png" alt="v-bind-styleArr"></p><h3 id="十、v-model"><a href="#十、v-model" class="headerlink" title="十、v-model"></a>十、v-model</h3><h4 id="1、修饰符"><a href="#1、修饰符" class="headerlink" title="1、修饰符"></a>1、修饰符</h4><h5 id="1-1、lazy"><a href="#1-1、lazy" class="headerlink" title="1.1、lazy"></a>1.1、lazy</h5><ul><li>默认情况下，v-model默认是在input事件中同步输入框的数据的，也就是说，一旦有数据发生改变对应的data中的数据就会自动发生改变</li><li> lazy修饰符可以让数据在失去焦点或者回车时才会更新<br><code>&lt;input type=&quot;text&quot; v-model.lazy=&quot;message&quot;&gt;</code></li></ul><h5 id="1-2、number"><a href="#1-2、number" class="headerlink" title="1.2、number"></a>1.2、number</h5><ul><li>默认情况下，在输入框中无论我们输入的是字母还是数字，都会被当做字符串类型进行处理，但如果我们希望处理的是数字类型，那么最好直接将内容当做数字处理</li><li>number修饰符可以让输入框中输入的内容自动转成数字类型<br><code>&lt;input type=&quot;number&quot; v-model.number=&quot;age&quot;&gt;&lt;h2&gt;&#123;&#123;typeof age&#125;&#125;&lt;/h2&gt;</code></li></ul><h5 id="1-3、trim"><a href="#1-3、trim" class="headerlink" title="1.3、trim"></a>1.3、trim</h5><ul><li>如果输入的内容首尾有很多空格，通常我们希望将其去除，trim修饰符可以过滤内容左右两边的空格</li></ul><h4 id="2、v-model原理"><a href="#2、v-model原理" class="headerlink" title="2、v-model原理"></a>2、v-model原理</h4><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 等同于下面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">v-on:input</span>=<span class="hljs-string">&quot;message = $event.target.value&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3、v-model结合radio类型"><a href="#3、v-model结合radio类型" class="headerlink" title="3、v-model结合radio类型"></a>3、v-model结合radio类型</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-model%E7%BB%93%E5%90%88radio.png" alt="v-model结合radio"></p><h4 id="4、v-model结合checkbox类型"><a href="#4、v-model结合checkbox类型" class="headerlink" title="4、v-model结合checkbox类型"></a>4、v-model结合checkbox类型</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-model%E7%BB%93%E5%90%88checkbox.png" alt="v-model结合checkbox"></p><h4 id="5、v-model结合select类型"><a href="#5、v-model结合select类型" class="headerlink" title="5、v-model结合select类型"></a>5、v-model结合select类型</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-model%E7%BB%93%E5%90%88select1.png" alt="v-model结合select1"><br><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-model%E7%BB%93%E5%90%88select2.png" alt="v-model结合select2"></p><h3 id="十一、v-slot"><a href="#十一、v-slot" class="headerlink" title="十一、v-slot"></a>十一、v-slot</h3><h4 id="1、插槽类型"><a href="#1、插槽类型" class="headerlink" title="1、插槽类型"></a>1、插槽类型</h4><h5 id="1-1、匿名插槽（隐含name-“default”）"><a href="#1-1、匿名插槽（隐含name-“default”）" class="headerlink" title="1.1、匿名插槽（隐含name=“default”）"></a>1.1、匿名插槽（隐含name=“default”）</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>匿名插槽默认内容<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-2、具名插槽"><a href="#1-2、具名插槽" class="headerlink" title="1.2、具名插槽"></a>1.2、具名插槽</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-3、作用域插槽（父组件替换插槽的标签，但是内容由子组件来提供）"><a href="#1-3、作用域插槽（父组件替换插槽的标签，但是内容由子组件来提供）" class="headerlink" title="1.3、作用域插槽（父组件替换插槽的标签，但是内容由子组件来提供）"></a>1.3、作用域插槽（父组件替换插槽的标签，但是内容由子组件来提供）</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 子组件中定义插槽，name为top（插槽名），data（属性名自己取）为items（子组件中的数据） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;top&quot;</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;items&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 父组件调用子组件，子组件名以cpn为例，slotProps（名称自定义） .data（调用子组件中绑定的data自定义属性）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;top&quot;</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span>&#123;&#123; slotProps.data &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>作用域插槽示例：子组件中包括一组数据，比如：pLanguages: [‘JavaScript’, ‘Python’, ‘Swift’, ‘Go’, ‘C++’]，需要在多个界面进行展示（某些界面是以水平方向一一展示的，某些界面是以列表形式展示的）</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-slot1.png" alt="v-slot1"><br><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-slot2.png" alt="v-slot2"></p><h4 id="2、v-slot"><a href="#2、v-slot" class="headerlink" title="2、v-slot"></a>2、v-slot</h4><ul><li>在vue2.6及已上版本，slot 和slot-scope已经开始废弃， 有了新的替代: v-slot，v-slot只能用在template 上，和组件标签上</li><li>语法糖 #</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 子组件中定义插槽方式不变 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;top&quot;</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;items&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 父组件调用子组件，使用v-slot代替slot和slot-scope --&gt;</span><br><span class="hljs-comment">&lt;!-- #top为v-slot:top的简写 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> #<span class="hljs-attr">top</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span>&#123;&#123; slotProps.data &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="十二、v-pre（不需要表达式）"><a href="#十二、v-pre（不需要表达式）" class="headerlink" title="十二、v-pre（不需要表达式）"></a>十二、v-pre（不需要表达式）</h3><ul><li>v-pre用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustache语法</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-pre.png" alt="v-pre"></p><h3 id="十三、-v-cloak（不需要表达式）"><a href="#十三、-v-cloak（不需要表达式）" class="headerlink" title="十三、 v-cloak（不需要表达式）"></a>十三、 v-cloak（不需要表达式）</h3><ul><li>这个指令保持在元素上直到关联实例结束编译（vue解析完成后，元素上的v-cloak属性消失）</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-cloak.png" alt="v-cloak"></p><h3 id="十四、v-once（不需要表达式）"><a href="#十四、v-once（不需要表达式）" class="headerlink" title="十四、v-once（不需要表达式）"></a>十四、v-once（不需要表达式）</h3><ul><li>元素和组件只渲染一次，不会随着数据的改变而改变</li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/vue/vueDirectives+computed/v-once.png" alt="v-once"></p>]]></content>
    
    
    <categories>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux中安装nginx</title>
    <link href="/2022/01/06/linux%E4%B8%AD%E5%AE%89%E8%A3%85nginx/"/>
    <url>/2022/01/06/linux%E4%B8%AD%E5%AE%89%E8%A3%85nginx/</url>
    
    <content type="html"><![CDATA[<h4 id="1、安装nginx依赖包"><a href="#1、安装nginx依赖包" class="headerlink" title="1、安装nginx依赖包"></a>1、安装nginx依赖包</h4><figure class="highlight powershell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 安装gcc-c++编译器</span><br>yum install gcc<span class="hljs-literal">-c</span>++<br>yum install <span class="hljs-literal">-y</span> openssl openssl<span class="hljs-literal">-devel</span><br><span class="hljs-comment"># 安装pcre包</span><br>yum install <span class="hljs-literal">-y</span> pcre pcre<span class="hljs-literal">-devel</span><br><span class="hljs-comment"># 安装zlib包</span><br>yum install <span class="hljs-literal">-y</span> zlib zlib<span class="hljs-literal">-devel</span><br></code></pre></td></tr></table></figure><h4 id="2、下载并解压安装包"><a href="#2、下载并解压安装包" class="headerlink" title="2、下载并解压安装包"></a>2、下载并解压安装包</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 安装wget命令</span><br>yum <span class="hljs-literal">-y</span> install <span class="hljs-built_in">wget</span><br><span class="hljs-comment"># 新建文件夹</span><br>mkdir /usr/local/nginx<br><span class="hljs-built_in">cd</span> /usr/local/nginx<br><span class="hljs-comment"># 下载tar包，下载地址可在官网查看 </span><br><span class="hljs-built_in">wget</span> http://nginx.org/download/nginx<span class="hljs-literal">-1</span>.<span class="hljs-number">20.2</span>.tar.gz<br><span class="hljs-comment"># 解压</span><br>tar <span class="hljs-literal">-zxvf</span> nginx<span class="hljs-literal">-1</span>.<span class="hljs-number">20.2</span>.tar.gz// 进入解压后目录<span class="hljs-built_in">cd</span> nginx<span class="hljs-literal">-1</span>.<span class="hljs-number">20.2</span><br></code></pre></td></tr></table></figure><h4 id="3、安装nginx"><a href="#3、安装nginx" class="headerlink" title="3、安装nginx"></a>3、安装nginx</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 使用nginx默认配置</span><br>./configure<br><span class="hljs-comment"># 编译安装</span><br>make<br>make install<br><span class="hljs-comment"># 查找安装路径</span><br>whereis nginx<br><span class="hljs-comment"># 进入sbin目录，可以看到有一个可执行文件nginx，直接./nginx执行就OK了。</span><br><span class="hljs-built_in">cd</span> sbin<br>./nginx<br><span class="hljs-comment"># 查看是否启动成功</span><br><span class="hljs-built_in">ps</span> <span class="hljs-literal">-ef</span> | grep nginx<br></code></pre></td></tr></table></figure><h4 id="4、将nginx路径配置到系统环境变量"><a href="#4、将nginx路径配置到系统环境变量" class="headerlink" title="4、将nginx路径配置到系统环境变量"></a>4、将nginx路径配置到系统环境变量</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 编辑系统环境变量</span><br>vim /etc/profile<br><span class="hljs-comment"># 将 nginx 路径添加至环境变量</span><br><span class="hljs-comment"># 添加路径并使用 NGINX_HOME 接收</span><br>export NGINX_HOME=/usr/local/nginx/sbin<br><span class="hljs-comment"># 将 NGINX_HOME 添加至环境变量 PATH</span><br>export PATH=<span class="hljs-variable">$PATH:</span><span class="hljs-variable">$NGINX_HOME</span><br><span class="hljs-comment"># 重新加载环境变量</span><br>source /etc/profile<br><span class="hljs-comment"># 在 root 路径下使用 nginx 命令</span><br><span class="hljs-built_in">cd</span> /<br>nginx <span class="hljs-literal">-h</span><br></code></pre></td></tr></table></figure><h4 id="5、nginx其他命令"><a href="#5、nginx其他命令" class="headerlink" title="5、nginx其他命令"></a>5、nginx其他命令</h4><p><strong>未配置环境变量，需将nginx替换为路径/usr/local/nginx/sbin/nginx</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 查看nginx帮助信息</span><br>nginx <span class="hljs-literal">-h</span><br><span class="hljs-comment"># 查看nginx的版本号</span><br>nginx <span class="hljs-literal">-v</span><br><span class="hljs-comment"># 显示nginx的版本号和编译信息</span><br>nginx <span class="hljs-literal">-V</span><br><span class="hljs-comment"># 启动nginx</span><br><span class="hljs-built_in">start</span> nginx<br><span class="hljs-comment"># 快速停止和关闭nginx</span><br>nginx <span class="hljs-literal">-s</span> stop<br><span class="hljs-comment"># 正常停止或关闭nginx，完成已接收的连接请求再退出</span><br>nginx <span class="hljs-literal">-s</span> quit<br><span class="hljs-comment"># 重新加载配置文件</span><br>nginx <span class="hljs-literal">-s</span> reload<br><span class="hljs-comment"># 测试nginx配置文件的正确性</span><br>nginx <span class="hljs-literal">-t</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js标识符、关键字、保留字</title>
    <link href="/2022/01/06/js%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%81%E4%BF%9D%E7%95%99%E5%AD%97/"/>
    <url>/2022/01/06/js%E6%A0%87%E8%AF%86%E7%AC%A6%E3%80%81%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%81%E4%BF%9D%E7%95%99%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h4 id="1、标识符"><a href="#1、标识符" class="headerlink" title="1、标识符"></a>1、标识符</h4><p>标识符：指开发人员为变量、属性、函数、参数取的名字。</p><p><strong>标识符可以包含字母、数字、下划线、$符号，但是不能以数字开头，并区分大小写，标识符不能是关键字或保留字。</strong></p><h4 id="2、关键字"><a href="#2、关键字" class="headerlink" title="2、关键字"></a>2、关键字</h4><p>关键字：指JS本身已经使用了的字，不能再用他们充当变量名、方法名。<br>包括： break、case、catch、class、const、continue、debugger、default、delete、do、else、export、extends、finally、for、function、if、import、in、instanceof、new、return、super、switch、this、throw、try、typeof、var、void、while、with、yield</p><h4 id="3、保留字"><a href="#3、保留字" class="headerlink" title="3、保留字"></a>3、保留字</h4><p>保留字：<strong>实际就是预留的“关键字”，意思是现在虽然还不是关键字，但是未来可能会成为关键字</strong>，同样不能使用他们当变量名或方法名。<br>包括：enum、abstract、boolean、byte、char、double、final、float、goto、int、long、native、short、synchronized、transient、volatile<br>只在严格模式中被当成保留关键字：implements、interface、let、package、private、protected、public、static<br>只在模块代码中被当成保留关键字：await</p><p><strong>另外，直接量null、true和false同样不能被当成标识使用</strong></p><h4 id="4、标识符为关键字报错信息"><a href="#4、标识符为关键字报错信息" class="headerlink" title="4、标识符为关键字报错信息"></a>4、标识符为关键字报错信息</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/js/js%E6%A0%87%E8%AF%86%E7%AC%A6/%E5%85%B3%E9%94%AE%E5%AD%97%E6%8A%A5%E9%94%99.png" alt="标识符为关键字报错信息"></p><h4 id="5、标识符为保留字报错信息"><a href="#5、标识符为保留字报错信息" class="headerlink" title="5、标识符为保留字报错信息"></a>5、标识符为保留字报错信息</h4><p><img src="https://gitee.com/huqian025/my-images/raw/master/js/js%E6%A0%87%E8%AF%86%E7%AC%A6/%E4%BF%9D%E7%95%99%E5%AD%97%E6%8A%A5%E9%94%99.png" alt="标识符为保留字报错信息"></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar">关键字、保留字参考文档</a></p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>标识符</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js数组中的高阶函数</title>
    <link href="/2022/01/06/js%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <url>/2022/01/06/js%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="0、什么是高阶函数"><a href="#0、什么是高阶函数" class="headerlink" title="0、什么是高阶函数"></a>0、什么是高阶函数</h4><p>高阶函数英文叫Higher-order function。JavaScript的函数其实都指向某个变量。既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p><h4 id="1、filter函数的使用（过滤数组）"><a href="#1、filter函数的使用（过滤数组）" class="headerlink" title="1、filter函数的使用（过滤数组）"></a>1、filter函数的使用（过滤数组）</h4><blockquote><p>MDN：filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。 </p></blockquote><p>filter中的回调函数有一个要求：必须返回一个boolean值<br>true：当返回为true时，函数内部自动将这次回调的n加入到新的数组中<br>false：当返回为false时，函数内部会过滤掉这次的n</p><ul><li><p>示例：获取集合中小于100的数</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">111</span>, <span class="hljs-number">222</span>, <span class="hljs-number">333</span>]<br><span class="hljs-keyword">let</span> newNums = nums.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> n&lt;<span class="hljs-number">100</span><br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>示例：js中获取素数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_primes</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> arr.filter(<span class="hljs-function"><span class="hljs-params">num</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// 1不是素数</span><br>        <span class="hljs-keyword">if</span>(num === <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 从2开始，取到该数的平方根即可</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">2</span>; i&lt;=<span class="hljs-built_in">Math</span>.sqrt(num); i++) &#123;<br>            <span class="hljs-comment">// 如果可以整除，证明不是素数</span><br>            <span class="hljs-keyword">if</span>(num % i === <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="2、map函数的使用（对数组每个元素进行操作）"><a href="#2、map函数的使用（对数组每个元素进行操作）" class="headerlink" title="2、map函数的使用（对数组每个元素进行操作）"></a>2、map函数的使用（对数组每个元素进行操作）</h4><blockquote><p>MDN：map()方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。</p></blockquote><ul><li>示例：将新集合中的所有数*2<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> new2Nums = newNums.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> n*<span class="hljs-number">2</span><br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h4 id="3、reduce函数的使用（汇总数组的内容）"><a href="#3、reduce函数的使用（汇总数组的内容）" class="headerlink" title="3、reduce函数的使用（汇总数组的内容）"></a>3、reduce函数的使用（汇总数组的内容）</h4><blockquote><p>MDN：reduce()方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</p></blockquote><ul><li>示例：计算集合所有数据的和<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// new2Nums数组的和，preValue为上一次function的返回值，0为preValue初始值</span><br>new2Nums.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">preValue, n</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> preValue + n<br>&#125;, <span class="hljs-number">0</span>)<br><br><span class="hljs-comment">// 简化</span><br><span class="hljs-keyword">let</span> total = nums.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> n&lt;<span class="hljs-number">100</span><br>&#125;).map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> n*<span class="hljs-number">2</span><br>&#125;).reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">preValue, n</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> preValue + n<br>&#125;, <span class="hljs-number">0</span>)<br><br><span class="hljs-comment">// 进一步简化：</span><br><span class="hljs-keyword">let</span> total = nums.filter(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> n&lt;<span class="hljs-number">100</span>).map(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> n*<span class="hljs-number">2</span>).reduce(<span class="hljs-function">(<span class="hljs-params">preValue, n</span>) =&gt;</span> preValue +n)<br></code></pre></td></tr></table></figure></li></ul><h4 id="4、sort函数的使用（数组排序）"><a href="#4、sort函数的使用（数组排序）" class="headerlink" title="4、sort函数的使用（数组排序）"></a>4、sort函数的使用（数组排序）</h4><blockquote><p>MDN：sort()方法用<a href="https://en.wikipedia.org/wiki/In-place_algorithm">原地算法</a>对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的。<a href="https://juejin.cn/post/6844904159314116622">深入理解字符编码</a></p></blockquote><p>对于两个元素x和y，如果认为x &lt; y，则返回-1，如果认为x == y，则返回0，如果认为x &gt; y，则返回1。<strong>sort()方法会直接对Array进行修改，它返回的结果仍是当前Array。</strong></p><ul><li><p>示例：使用sort默认排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;Microsoft&#x27;</span>].sort(); <span class="hljs-comment">// [&#x27;Apple&#x27;, &#x27;Google&#x27;, &#x27;Microsoft&#x27;];</span><br><br>[<span class="hljs-string">&#x27;Google&#x27;</span>, <span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;Microsoft&#x27;</span>].sort(); <span class="hljs-comment">// [&#x27;Google&#x27;, &#x27;Microsoft&quot;, &#x27;apple&#x27;]</span><br><br><span class="hljs-comment">//  Array的sort()方法默认把所有元素先转换为String再排序</span><br>[<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>].sort(); <span class="hljs-comment">// [1, 10, 2, 20]</span><br></code></pre></td></tr></table></figure></li><li><p>示例：将数组从小到大排序 [10, 20, 1, 2]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-comment">// 正数相当于1，负数相当于-1</span><br>arr.sort(<span class="hljs-function">(<span class="hljs-params">x, y</span>) =&gt;</span> x-y); <span class="hljs-comment">// [1, 2, 10, 20]</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="5、every函数的使用（判断数组的所有元素是否满足测试条件）"><a href="#5、every函数的使用（判断数组的所有元素是否满足测试条件）" class="headerlink" title="5、every函数的使用（判断数组的所有元素是否满足测试条件）"></a>5、every函数的使用（判断数组的所有元素是否满足测试条件）</h4><blockquote><p>MDN：every()方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</p></blockquote><p><strong>若收到一个空数组，此方法在一切情况下都会返回 true。</strong></p><ul><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>];<br><span class="hljs-built_in">console</span>.log(arr.every(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> s.length &gt; <span class="hljs-number">0</span>;<br>&#125;)); <span class="hljs-comment">// true, 因为每个元素都满足s.length&gt;0</span><br><br><span class="hljs-built_in">console</span>.log(arr.every(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> s.toLowerCase() === s;<br>&#125;)); <span class="hljs-comment">// false, 因为不是每个元素都全部是小写</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="6、find函数的使用（查找符合条件的第一个元素，返回值）"><a href="#6、find函数的使用（查找符合条件的第一个元素，返回值）" class="headerlink" title="6、find函数的使用（查找符合条件的第一个元素，返回值）"></a>6、find函数的使用（查找符合条件的第一个元素，返回值）</h4><blockquote><p>MDN： find()方法返回数组中满足提供的测试函数的第一个元素的值。否则返回undefined。</p></blockquote><ul><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>];<br><span class="hljs-built_in">console</span>.log(arr.find(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> s.toLowerCase() === s;<br>&#125;)); <span class="hljs-comment">// &#x27;pear&#x27;, 因为pear全部是小写</span><br><br><span class="hljs-built_in">console</span>.log(arr.find(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> s.toUpperCase() === s;<br>&#125;)); <span class="hljs-comment">// undefined, 因为没有全部是大写的元素</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="7、findIndex函数的使用（查找符合条件的第一个元素，返回索引）"><a href="#7、findIndex函数的使用（查找符合条件的第一个元素，返回索引）" class="headerlink" title="7、findIndex函数的使用（查找符合条件的第一个元素，返回索引）"></a>7、findIndex函数的使用（查找符合条件的第一个元素，返回索引）</h4><blockquote><p>MDN：findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回-1。</p></blockquote><ul><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>];<br><span class="hljs-built_in">console</span>.log(arr.findIndex(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> s.toLowerCase() === s;<br>&#125;)); <span class="hljs-comment">// 1, 因为&#x27;pear&#x27;的索引是1</span><br><br><span class="hljs-built_in">console</span>.log(arr.findIndex(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> s.toUpperCase() === s;<br>&#125;)); <span class="hljs-comment">// -1</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>findIndex与indexOf的区别</strong></p><ul><li>findindex丢进去的是一个函数，找满足函数关系的元素。</li><li>indexof丢进去的是要找的元素，直接找元素。</li></ul><h4 id="8、forEach函数的使用（对数组每个元素进行操作，没有返回值）"><a href="#8、forEach函数的使用（对数组每个元素进行操作，没有返回值）" class="headerlink" title="8、forEach函数的使用（对数组每个元素进行操作，没有返回值）"></a>8、forEach函数的使用（对数组每个元素进行操作，没有返回值）</h4><blockquote><p>MDN：forEach()方法对数组的每个元素执行一次给定的函数。</p></blockquote><p>forEach()和map()类似，它也把每个元素依次作用于传入的函数，但不会返回新的数组。forEach()常用于遍历数组，因此，传入的函数不需要返回值。</p><ul><li>示例：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;pear&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>];<br>arr.forEach(<span class="hljs-built_in">console</span>.log); <span class="hljs-comment">// 依次打印每个元素</span><br></code></pre></td></tr></table></figure></li></ul><p>forEach方法可以接收两个参数array.forEach(function(currentValue, index, arr), thisValue)：</p><ol><li>回调函数，必需，回调函数中有三个参数<ol><li>currentValue，必需，当前元素</li><li>index，可选，当前元素的索引值</li><li>arr，可选，当前元素所属的数组对象</li></ol></li><li>thisValue，可选，传递给参数的值一般用“this”值，如果这个参数为空，“undefined”会传递给“this”值简单点来说，就是我们可以直接使用第二个参数来指定函数里的this的值，而不需要使用箭头函数或者在外面定义var that = this;等操作。 在加上第二个参数前，forEach函数里的this默认是指向window的，在加了第二个参数this之后则指向forEach函数所在的对象了。<br><img src="https://gitee.com/huqian025/my-images/raw/master/js/js%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/foreach%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8F%82%E6%95%B0.png" alt="forEach方法第二个参数thisValue"></li></ol>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js模块化规范</title>
    <link href="/2022/01/06/js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/"/>
    <url>/2022/01/06/js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h3 id="一、入门介绍"><a href="#一、入门介绍" class="headerlink" title="一、入门介绍"></a>一、入门介绍</h3><h4 id="1、什么是模块-模块化"><a href="#1、什么是模块-模块化" class="headerlink" title="1、什么是模块/模块化"></a>1、什么是模块/模块化</h4><ul><li>将一个复杂的程序依据一定的规则（规范）封装成几个块（文件），并进行组合在一起</li><li>块的内部数据/实现是私有的，只是向外部暴露一些接口（方法）与其他外部模块通信</li></ul><h4 id="2、为什么要模块化"><a href="#2、为什么要模块化" class="headerlink" title="2、为什么要模块化"></a>2、为什么要模块化</h4><ul><li>降低复杂度</li><li>提高解耦性（降低耦合度）</li><li>部署方便（功能点明确）</li></ul><h4 id="3、模块化的好处"><a href="#3、模块化的好处" class="headerlink" title="3、模块化的好处"></a>3、模块化的好处</h4><ul><li>避免命名冲突（减少命名空间污染）</li><li>更好的分离，按需加载</li><li>更高复用性</li><li>高可维护性</li></ul><h4 id="4、页面引入加载script问题"><a href="#4、页面引入加载script问题" class="headerlink" title="4、页面引入加载script问题"></a>4、页面引入加载script问题</h4><ul><li>请求过多</li><li>依赖模糊</li><li>难以维护</li></ul><h3 id="二、模块化规范"><a href="#二、模块化规范" class="headerlink" title="二、模块化规范"></a>二、模块化规范</h3><h4 id="0、不使用任何规范"><a href="#0、不使用任何规范" class="headerlink" title="0、不使用任何规范"></a>0、不使用任何规范</h4><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// module1.js</span><br><span class="hljs-comment">// 定义一个没有任何依赖的模块</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">window</span></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;module1&#x27;</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> name<br>  &#125;<br>  <span class="hljs-built_in">window</span>.module1 = &#123;getName&#125;<br>&#125;)(<span class="hljs-built_in">window</span>)<br><br><span class="hljs-comment">// module2.js</span><br><span class="hljs-comment">// 定义一个有依赖的模块</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">window</span>, module1</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> msg = <span class="hljs-string">&#x27;module2&#x27;</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(msg, module1.getName())<br>  &#125;<br>  <span class="hljs-built_in">window</span>.module2 = &#123;foo&#125;<br>&#125;)(<span class="hljs-built_in">window</span>, module1)<br><br><span class="hljs-comment">// app.js</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">module2</span>) </span>&#123;<br>  module2.foo()<br>&#125;)(module2)<br><br><span class="hljs-comment">// html中引入</span><br>&lt;!-- 需要发三次请求，且依赖关系不能乱 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/module1.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/module2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./app.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="1、CommonJS（掌握）"><a href="#1、CommonJS（掌握）" class="headerlink" title="1、CommonJS（掌握）"></a>1、CommonJS（掌握）</h4><h5 id="1-1、规范"><a href="#1-1、规范" class="headerlink" title="1.1、规范"></a>1.1、规范</h5><ul><li>说明：<ul><li>每个js文件都可当做一个模块</li><li>在服务器端：模块的加载是运行时同步加载的</li><li>在浏览器端：模块需要提前编译打包处理</li></ul></li><li>基本语法：<ul><li>暴露模块：<ul><li><code>module.exports = value</code></li><li><code>exports.xxx = value</code></li><li>暴露模块本质暴露的是exports对象</li></ul></li><li>引入模块：<code>require(xxx)</code><ul><li>第三方模块：xxx为模块名</li><li>自定义模块：xxx为模块文件路径</li></ul></li></ul></li></ul><h5 id="1-2、实现"><a href="#1-2、实现" class="headerlink" title="1.2、实现"></a>1.2、实现</h5><ul><li>服务端实现：Node. js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// module1.js</span><br><span class="hljs-comment">// module.exports = value 暴露一个对象</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;module1&#x27;</span>,<br>  foo () &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.msg)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// module2.js</span><br><span class="hljs-comment">// 暴露一个函数 module.exports = function()&#123;&#125;</span><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;module2&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// module3.js</span><br><span class="hljs-comment">// exports.xxx = value</span><br><span class="hljs-built_in">exports</span>.foo = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;foo() module3&#x27;</span>)<br>&#125;<br><span class="hljs-built_in">exports</span>.bar= <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;bar() module3&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// 将其他模块汇集到主模块</span><br><span class="hljs-keyword">let</span> uniq = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;uniq&#x27;</span>) <span class="hljs-comment">// 引入第三方不用写路径，一般第三方放到最上面</span><br><span class="hljs-keyword">let</span> module1 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./modules/module1&#x27;</span>)<br><span class="hljs-keyword">let</span> module2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./modules/module2&#x27;</span>)<br><span class="hljs-keyword">let</span> module3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./modules/module3&#x27;</span>)<br><br>module1.foo()<br>module2()<br>module3.foo()<br>module3.bar()<br></code></pre></td></tr></table></figure><ul><li>浏览器端实现：Browserify，也称为浏览器端的打包工具（ES6也使用到）。全局安装<code>npm install browserify -g</code>，项目中安装<code>npm install browserify --save-dev</code><ul><li>浏览器端与node端基本相似，区别在于浏览器端需要将主模块js文件打包，并在html文件中引入打包后的js文件</li><li>踩坑：使用<code>browserify js/src/app.js -o js/dist/bundle.js</code>对js主模块进行打包时，会报错<code>browserify : 无法加载文件 D:\devSoftware\nodejs\node_global\browserify.ps1，因为在此系统上禁止运行脚本</code>，解决方法：以管理员身份进入命令行，切换到项目根目录，再执行上述打包命令</li></ul></li></ul><h4 id="2、AMD（掌握）"><a href="#2、AMD（掌握）" class="headerlink" title="2、AMD（掌握）"></a>2、AMD（掌握）</h4><h5 id="2-1、规范"><a href="#2-1、规范" class="headerlink" title="2.1、规范"></a>2.1、规范</h5><ul><li>说明：专门用于浏览器端，模块的加载是异步的</li><li>基本语法：<ul><li>定义暴露模块<ul><li>定义没有依赖的模块：<code>define(function() &#123; return 模块 &#125;)</code></li><li>定义有依赖的模块：<code>define([&#39;module1&#39;, &#39;module2&#39;], function(m1, m2) &#123; return 模块 &#125;)</code></li></ul></li><li>引入使用模块（可以使用require，也可以使用requirejs）<ul><li><code>requirejs([&#39;module1&#39;, &#39;module2&#39;], function(m1, m2) &#123; 使用m1/m2 &#125;)</code></li></ul></li></ul></li></ul><h5 id="2-2、实现（浏览器端）"><a href="#2-2、实现（浏览器端）" class="headerlink" title="2.2、实现（浏览器端）"></a>2.2、实现（浏览器端）</h5><ul><li>require.js，在官网或github下载require.js，并将其导入项目（如：js/libs/require.js）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// dataService.js</span><br><span class="hljs-comment">// 定义没有依赖的模块</span><br>define(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;dataService.js&#x27;</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getName</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> name<br>  &#125;<br>  <span class="hljs-comment">// 暴露模块</span><br>  <span class="hljs-keyword">return</span> &#123;getName&#125;<br>&#125;)<br><br><span class="hljs-comment">// alerter.js</span><br><span class="hljs-comment">// 定义有依赖的模块</span><br>define([<span class="hljs-string">&#x27;dataService&#x27;</span>, <span class="hljs-string">&#x27;jquery&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">dataService, $</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> msg = <span class="hljs-string">&#x27;alerter.js&#x27;</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showMsg</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(msg, dataService.getName())<br>  &#125;<br>  $(<span class="hljs-string">&#x27;body&#x27;</span>).css(<span class="hljs-string">&#x27;background&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>)<br>  <span class="hljs-comment">// 暴露模块</span><br>  <span class="hljs-keyword">return</span> &#123;showMsg&#125;<br>&#125;)<br><br><span class="hljs-comment">// main.js</span><br>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  requirejs.config(&#123;<br>    <span class="hljs-comment">// 基本路径，使用baseUrl出发点在根目录下，不使用从自身出发</span><br>    <span class="hljs-comment">// baseUrl: &#x27;js/&#x27;,</span><br>    <span class="hljs-comment">// 配置路径</span><br>    <span class="hljs-attr">paths</span>: &#123;<br>      <span class="hljs-comment">// 模块名: 路径，文件名后不用加.js，requirejs会自动添加.js</span><br>      <span class="hljs-attr">dataService</span>: <span class="hljs-string">&#x27;./modules/dataService&#x27;</span>,<br>      <span class="hljs-attr">alerter</span>: <span class="hljs-string">&#x27;./modules/alerter&#x27;</span>,<br>      <span class="hljs-comment">// jQuery官方在AMD规范中暴露jquery</span><br>      <span class="hljs-attr">jquery</span>: <span class="hljs-string">&#x27;./libs/jquery-3.6.0&#x27;</span><br>    &#125;<br>  &#125;)<br>  requirejs([<span class="hljs-string">&#x27;alerter&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">alerter</span>) </span>&#123;<br>    alerter.showMsg()<br>  &#125;)<br>&#125;)()<br><br><span class="hljs-comment">// html中引入</span><br>&lt;!-- data-main为根目录下主模块路径，src为根目录下<span class="hljs-built_in">require</span>.js路径 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">data-main</span>=<span class="hljs-string">&quot;js/main.js&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/libs/require.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="3、CMD（了解）"><a href="#3、CMD（了解）" class="headerlink" title="3、CMD（了解）"></a>3、CMD（了解）</h4><h5 id="3-1、规范"><a href="#3-1、规范" class="headerlink" title="3.1、规范"></a>3.1、规范</h5><ul><li>说明：专门用于浏览器端，模块的加载是异步的，模块使用时才会加载执行</li><li>基本语法：<ul><li>定义暴露模块、引入使用模块</li><li><img src="https://gitee.com/huqian025/my-images/raw/master/js/js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/CMD.png"></li></ul></li></ul><h5 id="3-2、实现（浏览器端）"><a href="#3-2、实现（浏览器端）" class="headerlink" title="3.2、实现（浏览器端）"></a>3.2、实现（浏览器端）</h5><ul><li>Sea.js（停止维护）</li></ul><h4 id="4、ES6（掌握）"><a href="#4、ES6（掌握）" class="headerlink" title="4、ES6（掌握）"></a>4、ES6（掌握）</h4><h5 id="4-1、规范"><a href="#4-1、规范" class="headerlink" title="4.1、规范"></a>4.1、规范</h5><ul><li>说明：依赖模块需要编译打包处理</li><li>语法：<ul><li>导出模块：export</li><li>引入模块：import</li></ul></li></ul><h5 id="4-2、实现（浏览器端）"><a href="#4-2、实现（浏览器端）" class="headerlink" title="4.2、实现（浏览器端）"></a>4.2、实现（浏览器端）</h5><ul><li><p>核心：</p><ul><li>使用Babel将ES6编译为ES5代码</li><li>使用Browserify编译打包js</li></ul></li><li><p>使用：</p><ul><li>安装babel-cli，babel-preset-es2015和browserify<ul><li>npm install babel-cli browserify -g</li><li>npm install babel-preset-es2015 –save-dev</li></ul></li><li>定义 .babelrc 文件<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;es2015&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>编译</p><ul><li>使用Babel将ES6编译为ES5代码（但还是包含CommonJS语法）：babel js/src -d js/build</li><li>使用Browserify编译js：browserify js/build/main.js -o js/dist/bundle.js</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// module1.js</span><br><span class="hljs-comment">// 常规暴露-分别暴露</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;foo() module1&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;bar() module1&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><br><span class="hljs-comment">// module2.js</span><br><span class="hljs-comment">// 常规暴露-统一暴露</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;fun() module2&#x27;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun2</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;fun2() module2&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">export</span> &#123;fun, fun2&#125;<br><br><span class="hljs-comment">// module3.js</span><br><span class="hljs-comment">// 默认暴露，可以暴露任意数据类型，暴露什么数据接收到的就是什么数据</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;默认暴露&#x27;</span>,<br>  foo () &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.msg)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// main.js</span><br><span class="hljs-comment">// 引入模块</span><br><span class="hljs-comment">// 常规暴露必须使用解构赋值的形式引入</span><br><span class="hljs-keyword">import</span> &#123;foo, bar&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module1&#x27;</span><br><span class="hljs-keyword">import</span> &#123; fun, fun2 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module2&#x27;</span><br><span class="hljs-comment">// 默认暴露直接引入</span><br><span class="hljs-keyword">import</span> module3 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module3&#x27;</span><br><span class="hljs-comment">// 引入第三方库类似默认暴露，以jquery为例</span><br><span class="hljs-keyword">import</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jquery&#x27;</span><br>$(<span class="hljs-string">&#x27;body&#x27;</span>).css(<span class="hljs-string">&#x27;background&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>)<br>foo()<br>bar()<br>fun()<br>fun2()<br>module3.foo()<br><br><span class="hljs-comment">// html中引入</span><br>&lt;!-- 引入通过babel和browserify打包处理后的js文件 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/dist/bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="三、ES6引入export-default导出的模块，不使用"><a href="#三、ES6引入export-default导出的模块，不使用" class="headerlink" title="三、ES6引入export default导出的模块，不使用{}"></a>三、ES6引入export default导出的模块，不使用{}</h3><p><img src="https://gitee.com/huqian025/my-images/raw/master/js/js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/ES6%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4%E5%AF%BC%E5%87%BA%E6%A8%A1%E5%9D%97.png"></p>]]></content>
    
    
    <categories>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>模块化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ajax基础</title>
    <link href="/2022/01/06/ajax%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/01/06/ajax%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h4 id="0、HTTP协议"><a href="#0、HTTP协议" class="headerlink" title="0、HTTP协议"></a>0、HTTP协议</h4><ul><li><p>HTTP 超文本传输协议，协议详细规定了浏览器与万维网服务器之间互相通信的规则。</p></li><li><p>请求报文：<br><img src="https://gitee.com/huqian025/my-images/raw/master/ajax/ajax%E5%9F%BA%E7%A1%80/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.png" alt="请求报文"></p></li><li><p>响应报文：<br><img src="https://gitee.com/huqian025/my-images/raw/master/ajax/ajax%E5%9F%BA%E7%A1%80/%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87.png" alt="响应报文"></p></li></ul><h4 id="1、Ajax简介"><a href="#1、Ajax简介" class="headerlink" title="1、Ajax简介"></a>1、Ajax简介</h4><ul><li>Ajax全称为Asynchronous JavaScript And XML，就是异步的JS和XML</li><li>通过Ajax可以在浏览器中向服务器发送异步请求，最大的优势：<strong>无刷新获取数据</strong></li><li>Ajax不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式</li></ul><h4 id="2、XML简介"><a href="#2、XML简介" class="headerlink" title="2、XML简介"></a>2、XML简介</h4><ul><li>XML可扩展标记语言，被设计用来传输和存储数据</li><li>XML和HTML类似，不同的是HTML中都是预定义标签，而XML中没有预定义标签，全部都是自定义标签，用来表示一些数据</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 例如：有一个学生数据name=&quot;孙悟空&quot;; age=18; gender=&quot;男&quot; --&gt;</span><br><span class="hljs-comment">&lt;!-- 用XML表示： --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">student</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>孙悟空<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">age</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">age</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">gender</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">gender</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">student</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>现在已经被JSON取代了<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 用JSON表示：</span><br>&#123;<br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;孙悟空&quot;</span>,<br>    <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">&quot;gender&quot;</span>: <span class="hljs-string">&quot;男&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="3、Ajax特点"><a href="#3、Ajax特点" class="headerlink" title="3、Ajax特点"></a>3、Ajax特点</h4><h5 id="3-1、Ajax优点"><a href="#3-1、Ajax优点" class="headerlink" title="3.1、Ajax优点"></a>3.1、Ajax优点</h5><ul><li>可以在无需刷新页面与服务器进行通信</li><li>允许根据用户事件来更新部分页面内容</li></ul><h5 id="3-2、Ajax缺点"><a href="#3-2、Ajax缺点" class="headerlink" title="3.2、Ajax缺点"></a>3.2、Ajax缺点</h5><ul><li>没有浏览历史，不能回退</li><li>存在跨域问题</li><li>SEO优化不友好</li></ul><h4 id="4、发送ajax请求"><a href="#4、发送ajax请求" class="headerlink" title="4、发送ajax请求"></a>4、发送ajax请求</h4><h5 id="4-1、原生ajax"><a href="#4-1、原生ajax" class="headerlink" title="4.1、原生ajax"></a>4.1、原生ajax</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取button元素</span><br><span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;button&#x27;</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">const</span> box = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;box&#x27;</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-comment">// 绑定事件</span><br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 1. 创建对象</span><br>    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest()<br>    <span class="hljs-comment">// 2. 初始化 设置请求类型和url</span><br>    xhr.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;http://127.0.0.1:8000/server&#x27;</span>)<br>    <span class="hljs-comment">// 3. 发送</span><br>    xhr.send()<br>    <span class="hljs-comment">// 4. 事件绑定 处理服务端返回的结果</span><br>    <span class="hljs-comment">// on when 当...时候</span><br>    <span class="hljs-comment">// readystate 是xhr对象中的属性，表示状态0,1,2,3,4（分别对应未初始化，open方法调用完毕，send方法调用完毕，服务端返回部分结果，服务端返回所有结果）</span><br>    <span class="hljs-comment">// change 改变</span><br>    xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-comment">// 判断服务端返回所有结果</span><br>      <span class="hljs-keyword">if</span>(xhr.readyState === <span class="hljs-number">4</span>)&#123;<br>        <span class="hljs-comment">// 判断相应状态码，2开头都是成功</span><br>        <span class="hljs-keyword">if</span>(xhr.status &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.status &lt; <span class="hljs-number">300</span>)&#123;<br>          <span class="hljs-comment">// 处理结果</span><br>          <span class="hljs-built_in">console</span>.log(xhr.status) <span class="hljs-comment">// 响应状态码</span><br>          <span class="hljs-built_in">console</span>.log(xhr.statusText) <span class="hljs-comment">// 响应状态字符串</span><br>          <span class="hljs-built_in">console</span>.log(xhr.getAllResponseHeaders()) <span class="hljs-comment">// 所有响应头</span><br>          <span class="hljs-built_in">console</span>.log(xhr.response) <span class="hljs-comment">// 响应体</span><br>          box.innerHTML = xhr.response<br>        &#125;<br>      &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-2、jquery发送ajax请求"><a href="#4-2、jquery发送ajax请求" class="headerlink" title="4.2、jquery发送ajax请求"></a>4.2、jquery发送ajax请求</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">0</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $.get(<span class="hljs-string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>, &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">200</span>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(data)<br>    &#125;, <span class="hljs-string">&#x27;json&#x27;</span>)<br>  &#125;)<br>  $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">1</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $.post(<span class="hljs-string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>, &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">200</span>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>      <span class="hljs-built_in">console</span>.log(data)<br>    &#125;)<br>  &#125;)<br>  $(<span class="hljs-string">&#x27;button&#x27;</span>).eq(<span class="hljs-number">2</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $.ajax(&#123;<br>      <span class="hljs-comment">// url</span><br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>,<br>      <span class="hljs-comment">// 参数</span><br>      <span class="hljs-attr">data</span>: &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">200</span>&#125;,<br>      <span class="hljs-comment">// 请求类型</span><br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>      <span class="hljs-comment">// 响应体结果</span><br>      <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,<br>      <span class="hljs-comment">// 成功回调</span><br>      <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(data)<br>      &#125;,<br>      <span class="hljs-comment">// 超时时间</span><br>      <span class="hljs-attr">timeout</span>: <span class="hljs-number">2000</span>,<br>      <span class="hljs-comment">// 失败回调</span><br>      <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;出错了&#x27;</span>)<br>      &#125;<br>    &#125;)<br>  &#125;)<br></code></pre></td></tr></table></figure><h5 id="4-3、axios发送ajax请求"><a href="#4-3、axios发送ajax请求" class="headerlink" title="4.3、axios发送ajax请求"></a>4.3、axios发送ajax请求</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;button&#x27;</span>)<br>  <span class="hljs-comment">// 配置baseURL</span><br>  axios.defaults.baseURL = <span class="hljs-string">&#x27;http://127.0.0.1:8000&#x27;</span><br>  btns[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// GET请求</span><br>    axios.get(<span class="hljs-string">&#x27;axios-server&#x27;</span>, &#123;<br>      <span class="hljs-comment">// url参数</span><br>      <span class="hljs-attr">params</span>: &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">100</span>,<br>        <span class="hljs-attr">vip</span>: <span class="hljs-number">7</span><br>      &#125;,<br>      <span class="hljs-comment">// 请求头信息</span><br>      <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;abc&#x27;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>      &#125;<br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(res)<br>    &#125;)<br>  &#125;<br>  btns[<span class="hljs-number">1</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// POST请求</span><br>    axios.post(<span class="hljs-string">&#x27;axios-server&#x27;</span>, <br>      &#123;<br>        <span class="hljs-comment">// 请求体</span><br>        <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>        <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;admin&#x27;</span><br>      &#125;, <br>      &#123;<br>        <span class="hljs-comment">// url参数</span><br>        <span class="hljs-attr">params</span>: &#123;<br>          <span class="hljs-attr">id</span>: <span class="hljs-number">100</span>,<br>          <span class="hljs-attr">vip</span>: <span class="hljs-number">7</span><br>        &#125;,<br>        <span class="hljs-comment">// 请求头信息</span><br>        <span class="hljs-attr">headers</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;abc&#x27;</span>,<br>          <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>        &#125;<br>      &#125;<br>    ).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(res)<br>    &#125;)<br>  &#125;<br>  btns[<span class="hljs-number">2</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    axios(&#123;<br>      <span class="hljs-comment">// 请求类型</span><br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>      <span class="hljs-comment">// url</span><br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;axios-server&#x27;</span>,<br>      <span class="hljs-comment">// url参数</span><br>      <span class="hljs-attr">params</span>: &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">100</span>,<br>        <span class="hljs-attr">vip</span>: <span class="hljs-number">7</span><br>      &#125;,<br>      <span class="hljs-comment">// 请求头信息</span><br>      <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;abc&#x27;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>      &#125;,<br>      <span class="hljs-comment">// 请求体</span><br>      <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>        <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;admin&#x27;</span><br>      &#125;<br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(res)<br>    &#125;)<br>  &#125;<br></code></pre></td></tr></table></figure><h5 id="4-4、fetch发送ajax请求"><a href="#4-4、fetch发送ajax请求" class="headerlink" title="4.4、fetch发送ajax请求"></a>4.4、fetch发送ajax请求</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>)<br>  btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    fetch(<span class="hljs-string">&#x27;http://127.0.0.1:8000/fetch-server&#x27;</span>, &#123;<br>      <span class="hljs-comment">// 请求类型</span><br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>      <span class="hljs-comment">// 请求头</span><br>      <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;abc&#x27;</span><br>      &#125;,<br>      <span class="hljs-comment">// 请求体</span><br>      <span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;username=admin&amp;password=admin&#x27;</span><br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-comment">// console.log(res)</span><br>      <span class="hljs-keyword">return</span> res.json()<br>    &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-built_in">console</span>.log(res)<br>    &#125;)<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="5、跨域"><a href="#5、跨域" class="headerlink" title="5、跨域"></a>5、跨域</h4><h5 id="5-1、同源策略"><a href="#5-1、同源策略" class="headerlink" title="5.1、同源策略"></a>5.1、同源策略</h5><ul><li><ol><li>同源策略是浏览器的一种安全策略</li></ol></li><li><ol start="2"><li>同源：协议、域名、端口号必须完全相同</li></ol></li><li><ol start="3"><li>违背同源策略就是跨域</li></ol></li></ul><h5 id="5-2、解决跨域-jsonp"><a href="#5-2、解决跨域-jsonp" class="headerlink" title="5.2、解决跨域-jsonp"></a>5.2、解决跨域-jsonp</h5><ul><li><ol><li>jsonp是什么：jsonp是一个非官方的跨域解决方案，凭借程序员的聪明才智开发出来，只支持get请求</li></ol></li><li><ol start="2"><li>jsonp怎么工作的：在网页中有一些标签天生具有跨域能力，比如img、link、iframe和script。jsonp就是利用script标签的跨域能力来发送请求的</li></ol></li><li><ol start="3"><li>jsonp的使用：</li></ol><ul><li>1）动态创建一个script标签<code>var script = document.createElement(&#39;script&#39;)</code></li><li>2）设置script的src属性，设置回调函数<code>script.src = &#39;http://127.0.0.1:8000/check-username&#39;</code></li><li>3）将script标签插入到文档中<code>document.body.appendChild(script)</code></li></ul></li></ul><h5 id="5-3、解决跨域-设置CORS响应头"><a href="#5-3、解决跨域-设置CORS响应头" class="headerlink" title="5.3、解决跨域-设置CORS响应头"></a>5.3、解决跨域-设置CORS响应头</h5><ul><li><ol><li>CORS是什么：跨域资源共享，CORS是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持post和get请求。跨域资源共享标准新增了一组HTTP首部字段，允许服务器声明哪些源站通过浏览器访问哪些资源</li></ol></li><li><ol start="2"><li>CORS是怎么工作的：CORS是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行</li></ol></li><li><ol start="3"><li>CORS的使用：</li></ol><ul><li>在服务端设置请求的响应头<code>response.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;)</code></li></ul></li></ul><p><img src="https://gitee.com/huqian025/my-images/raw/master/ajax/ajax%E5%9F%BA%E7%A1%80/%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F.png" alt="解决跨域"></p>]]></content>
    
    
    <categories>
      
      <category>ajax</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
